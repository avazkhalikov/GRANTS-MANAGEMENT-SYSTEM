#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BOTACORE.CORE.Domain
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="KZBOTADB3")]
	public partial class BOTADataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAddress(Address instance);
    partial void UpdateAddress(Address instance);
    partial void DeleteAddress(Address instance);
    partial void InsertUserActionLog(UserActionLog instance);
    partial void UpdateUserActionLog(UserActionLog instance);
    partial void DeleteUserActionLog(UserActionLog instance);
    partial void InsertBankInfo(BankInfo instance);
    partial void UpdateBankInfo(BankInfo instance);
    partial void DeleteBankInfo(BankInfo instance);
    partial void InsertBudget(Budget instance);
    partial void UpdateBudget(Budget instance);
    partial void DeleteBudget(Budget instance);
    partial void InsertCompetitionCode(CompetitionCode instance);
    partial void UpdateCompetitionCode(CompetitionCode instance);
    partial void DeleteCompetitionCode(CompetitionCode instance);
    partial void InsertCompetitionCodeList(CompetitionCodeList instance);
    partial void UpdateCompetitionCodeList(CompetitionCodeList instance);
    partial void DeleteCompetitionCodeList(CompetitionCodeList instance);
    partial void InsertEventFieldMapper(EventFieldMapper instance);
    partial void UpdateEventFieldMapper(EventFieldMapper instance);
    partial void DeleteEventFieldMapper(EventFieldMapper instance);
    partial void InsertEventType(EventType instance);
    partial void UpdateEventType(EventType instance);
    partial void DeleteEventType(EventType instance);
    partial void InsertFinancialArticle(FinancialArticle instance);
    partial void UpdateFinancialArticle(FinancialArticle instance);
    partial void DeleteFinancialArticle(FinancialArticle instance);
    partial void InsertFinArtCatList(FinArtCatList instance);
    partial void UpdateFinArtCatList(FinArtCatList instance);
    partial void DeleteFinArtCatList(FinArtCatList instance);
    partial void InsertFinArtCatListR(FinArtCatListR instance);
    partial void UpdateFinArtCatListR(FinArtCatListR instance);
    partial void DeleteFinArtCatListR(FinArtCatListR instance);
    partial void InsertFinArticleCategory(FinArticleCategory instance);
    partial void UpdateFinArticleCategory(FinArticleCategory instance);
    partial void DeleteFinArticleCategory(FinArticleCategory instance);
    partial void InsertFundingOrganization(FundingOrganization instance);
    partial void UpdateFundingOrganization(FundingOrganization instance);
    partial void DeleteFundingOrganization(FundingOrganization instance);
    partial void InsertFundingSource(FundingSource instance);
    partial void UpdateFundingSource(FundingSource instance);
    partial void DeleteFundingSource(FundingSource instance);
    partial void InsertGeneral(General instance);
    partial void UpdateGeneral(General instance);
    partial void DeleteGeneral(General instance);
    partial void InsertGrantType(GrantType instance);
    partial void UpdateGrantType(GrantType instance);
    partial void DeleteGrantType(GrantType instance);
    partial void InsertGrantTypeList(GrantTypeList instance);
    partial void UpdateGrantTypeList(GrantTypeList instance);
    partial void DeleteGrantTypeList(GrantTypeList instance);
    partial void InsertIndicator(Indicator instance);
    partial void UpdateIndicator(Indicator instance);
    partial void DeleteIndicator(Indicator instance);
    partial void InsertIndicatorCategoryLabel(IndicatorCategoryLabel instance);
    partial void UpdateIndicatorCategoryLabel(IndicatorCategoryLabel instance);
    partial void DeleteIndicatorCategoryLabel(IndicatorCategoryLabel instance);
    partial void InsertIndicatorItem(IndicatorItem instance);
    partial void UpdateIndicatorItem(IndicatorItem instance);
    partial void DeleteIndicatorItem(IndicatorItem instance);
    partial void InsertIndicatorLabelContentCategory(IndicatorLabelContentCategory instance);
    partial void UpdateIndicatorLabelContentCategory(IndicatorLabelContentCategory instance);
    partial void DeleteIndicatorLabelContentCategory(IndicatorLabelContentCategory instance);
    partial void InsertIndicatorTemplateItem(IndicatorTemplateItem instance);
    partial void UpdateIndicatorTemplateItem(IndicatorTemplateItem instance);
    partial void DeleteIndicatorTemplateItem(IndicatorTemplateItem instance);
    partial void InsertLegalStatus(LegalStatus instance);
    partial void UpdateLegalStatus(LegalStatus instance);
    partial void DeleteLegalStatus(LegalStatus instance);
    partial void InsertLegalStatusList(LegalStatusList instance);
    partial void UpdateLegalStatusList(LegalStatusList instance);
    partial void DeleteLegalStatusList(LegalStatusList instance);
    partial void InsertOrganization(Organization instance);
    partial void UpdateOrganization(Organization instance);
    partial void DeleteOrganization(Organization instance);
    partial void InsertOrganizationStaff(OrganizationStaff instance);
    partial void UpdateOrganizationStaff(OrganizationStaff instance);
    partial void DeleteOrganizationStaff(OrganizationStaff instance);
    partial void InsertOtherFunder(OtherFunder instance);
    partial void UpdateOtherFunder(OtherFunder instance);
    partial void DeleteOtherFunder(OtherFunder instance);
    partial void InsertPermission(Permission instance);
    partial void UpdatePermission(Permission instance);
    partial void DeletePermission(Permission instance);
    partial void InsertPermission1(Permission1 instance);
    partial void UpdatePermission1(Permission1 instance);
    partial void DeletePermission1(Permission1 instance);
    partial void InsertProgramArea(ProgramArea instance);
    partial void UpdateProgramArea(ProgramArea instance);
    partial void DeleteProgramArea(ProgramArea instance);
    partial void InsertProgramAreaList(ProgramAreaList instance);
    partial void UpdateProgramAreaList(ProgramAreaList instance);
    partial void DeleteProgramAreaList(ProgramAreaList instance);
    partial void InsertProjectEvent(ProjectEvent instance);
    partial void UpdateProjectEvent(ProjectEvent instance);
    partial void DeleteProjectEvent(ProjectEvent instance);
    partial void InsertProjectEventDoc(ProjectEventDoc instance);
    partial void UpdateProjectEventDoc(ProjectEventDoc instance);
    partial void DeleteProjectEventDoc(ProjectEventDoc instance);
    partial void InsertProjectEventDocument(ProjectEventDocument instance);
    partial void UpdateProjectEventDocument(ProjectEventDocument instance);
    partial void DeleteProjectEventDocument(ProjectEventDocument instance);
    partial void InsertProjectInfo(ProjectInfo instance);
    partial void UpdateProjectInfo(ProjectInfo instance);
    partial void DeleteProjectInfo(ProjectInfo instance);
    partial void InsertProject(Project instance);
    partial void UpdateProject(Project instance);
    partial void DeleteProject(Project instance);
    partial void InsertProjLocation(ProjLocation instance);
    partial void UpdateProjLocation(ProjLocation instance);
    partial void DeleteProjLocation(ProjLocation instance);
    partial void InsertProjLocationList(ProjLocationList instance);
    partial void UpdateProjLocationList(ProjLocationList instance);
    partial void DeleteProjLocationList(ProjLocationList instance);
    partial void InsertProposalInfo(ProposalInfo instance);
    partial void UpdateProposalInfo(ProposalInfo instance);
    partial void DeleteProposalInfo(ProposalInfo instance);
    partial void InsertProposalStatus(ProposalStatus instance);
    partial void UpdateProposalStatus(ProposalStatus instance);
    partial void DeleteProposalStatus(ProposalStatus instance);
    partial void InsertProposalStatusList(ProposalStatusList instance);
    partial void UpdateProposalStatusList(ProposalStatusList instance);
    partial void DeleteProposalStatusList(ProposalStatusList instance);
    partial void InsertRegionList(RegionList instance);
    partial void UpdateRegionList(RegionList instance);
    partial void DeleteRegionList(RegionList instance);
    partial void InsertReportPeriod(ReportPeriod instance);
    partial void UpdateReportPeriod(ReportPeriod instance);
    partial void DeleteReportPeriod(ReportPeriod instance);
    partial void InsertReportPeriodList(ReportPeriodList instance);
    partial void UpdateReportPeriodList(ReportPeriodList instance);
    partial void DeleteReportPeriodList(ReportPeriodList instance);
    partial void InsertReportPeriodListR(ReportPeriodListR instance);
    partial void UpdateReportPeriodListR(ReportPeriodListR instance);
    partial void DeleteReportPeriodListR(ReportPeriodListR instance);
    partial void InsertReportPeriodR(ReportPeriodR instance);
    partial void UpdateReportPeriodR(ReportPeriodR instance);
    partial void DeleteReportPeriodR(ReportPeriodR instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertRolesSSPStaff(RolesSSPStaff instance);
    partial void UpdateRolesSSPStaff(RolesSSPStaff instance);
    partial void DeleteRolesSSPStaff(RolesSSPStaff instance);
    partial void InsertSSPStaff(SSPStaff instance);
    partial void UpdateSSPStaff(SSPStaff instance);
    partial void DeleteSSPStaff(SSPStaff instance);
    partial void InsertSSPStaffProject(SSPStaffProject instance);
    partial void UpdateSSPStaffProject(SSPStaffProject instance);
    partial void DeleteSSPStaffProject(SSPStaffProject instance);
    partial void InsertTemplateDocument(TemplateDocument instance);
    partial void UpdateTemplateDocument(TemplateDocument instance);
    partial void DeleteTemplateDocument(TemplateDocument instance);
    partial void InsertTemplateFile(TemplateFile instance);
    partial void UpdateTemplateFile(TemplateFile instance);
    partial void DeleteTemplateFile(TemplateFile instance);
    partial void InsertTheKey(TheKey instance);
    partial void UpdateTheKey(TheKey instance);
    partial void DeleteTheKey(TheKey instance);
    partial void InsertFinArticleCategoryR(FinArticleCategoryR instance);
    partial void UpdateFinArticleCategoryR(FinArticleCategoryR instance);
    partial void DeleteFinArticleCategoryR(FinArticleCategoryR instance);
    partial void InsertOutComeStatement(OutComeStatement instance);
    partial void UpdateOutComeStatement(OutComeStatement instance);
    partial void DeleteOutComeStatement(OutComeStatement instance);
    partial void InsertLFIndicator(LFIndicator instance);
    partial void UpdateLFIndicator(LFIndicator instance);
    partial void DeleteLFIndicator(LFIndicator instance);
    partial void InsertLFIndicatorList(LFIndicatorList instance);
    partial void UpdateLFIndicatorList(LFIndicatorList instance);
    partial void DeleteLFIndicatorList(LFIndicatorList instance);
    partial void InsertPageAccess(PageAccess instance);
    partial void UpdatePageAccess(PageAccess instance);
    partial void DeletePageAccess(PageAccess instance);
    partial void InsertContact(Contact instance);
    partial void UpdateContact(Contact instance);
    partial void DeleteContact(Contact instance);
    partial void InsertIndicatorLabel(IndicatorLabel instance);
    partial void UpdateIndicatorLabel(IndicatorLabel instance);
    partial void DeleteIndicatorLabel(IndicatorLabel instance);
    #endregion
		
		//public BOTADataContext() : 
		//		base(global::BOTACORE.Properties.Settings.Default.KZBOTADB3ConnectionString1, mappingSource)
		//{
		//	OnCreated();
		//}
		
		public BOTADataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BOTADataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BOTADataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BOTADataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Address> Addresses
		{
			get
			{
				return this.GetTable<Address>();
			}
		}
		
		public System.Data.Linq.Table<UserActionLog> UserActionLogs
		{
			get
			{
				return this.GetTable<UserActionLog>();
			}
		}
		
		public System.Data.Linq.Table<BankInfo> BankInfos
		{
			get
			{
				return this.GetTable<BankInfo>();
			}
		}
		
		public System.Data.Linq.Table<BeingEditedByUser> BeingEditedByUsers
		{
			get
			{
				return this.GetTable<BeingEditedByUser>();
			}
		}
		
		public System.Data.Linq.Table<Budget> Budgets
		{
			get
			{
				return this.GetTable<Budget>();
			}
		}
		
		public System.Data.Linq.Table<CompetitionCode> CompetitionCodes
		{
			get
			{
				return this.GetTable<CompetitionCode>();
			}
		}
		
		public System.Data.Linq.Table<CompetitionCodeList> CompetitionCodeLists
		{
			get
			{
				return this.GetTable<CompetitionCodeList>();
			}
		}
		
		public System.Data.Linq.Table<EventFieldMapper> EventFieldMappers
		{
			get
			{
				return this.GetTable<EventFieldMapper>();
			}
		}
		
		public System.Data.Linq.Table<EventType> EventTypes
		{
			get
			{
				return this.GetTable<EventType>();
			}
		}
		
		public System.Data.Linq.Table<FinancialArticle> FinancialArticles
		{
			get
			{
				return this.GetTable<FinancialArticle>();
			}
		}
		
		public System.Data.Linq.Table<FinArtCatList> FinArtCatLists
		{
			get
			{
				return this.GetTable<FinArtCatList>();
			}
		}
		
		public System.Data.Linq.Table<FinArtCatListR> FinArtCatListRs
		{
			get
			{
				return this.GetTable<FinArtCatListR>();
			}
		}
		
		public System.Data.Linq.Table<FinArticleCategory> FinArticleCategories
		{
			get
			{
				return this.GetTable<FinArticleCategory>();
			}
		}
		
		public System.Data.Linq.Table<FundingOrganization> FundingOrganizations
		{
			get
			{
				return this.GetTable<FundingOrganization>();
			}
		}
		
		public System.Data.Linq.Table<FundingSource> FundingSources
		{
			get
			{
				return this.GetTable<FundingSource>();
			}
		}
		
		public System.Data.Linq.Table<General> Generals
		{
			get
			{
				return this.GetTable<General>();
			}
		}
		
		public System.Data.Linq.Table<GrantType> GrantTypes
		{
			get
			{
				return this.GetTable<GrantType>();
			}
		}
		
		public System.Data.Linq.Table<GrantTypeList> GrantTypeLists
		{
			get
			{
				return this.GetTable<GrantTypeList>();
			}
		}
		
		public System.Data.Linq.Table<Indicator> Indicators
		{
			get
			{
				return this.GetTable<Indicator>();
			}
		}
		
		public System.Data.Linq.Table<IndicatorCategoryLabel> IndicatorCategoryLabels
		{
			get
			{
				return this.GetTable<IndicatorCategoryLabel>();
			}
		}
		
		public System.Data.Linq.Table<IndicatorItem> IndicatorItems
		{
			get
			{
				return this.GetTable<IndicatorItem>();
			}
		}
		
		public System.Data.Linq.Table<IndicatorLabelContentCategory> IndicatorLabelContentCategories
		{
			get
			{
				return this.GetTable<IndicatorLabelContentCategory>();
			}
		}
		
		public System.Data.Linq.Table<IndicatorTemplateItem> IndicatorTemplateItems
		{
			get
			{
				return this.GetTable<IndicatorTemplateItem>();
			}
		}
		
		public System.Data.Linq.Table<LegalStatus> LegalStatus
		{
			get
			{
				return this.GetTable<LegalStatus>();
			}
		}
		
		public System.Data.Linq.Table<LegalStatusList> LegalStatusLists
		{
			get
			{
				return this.GetTable<LegalStatusList>();
			}
		}
		
		public System.Data.Linq.Table<Organization> Organizations
		{
			get
			{
				return this.GetTable<Organization>();
			}
		}
		
		public System.Data.Linq.Table<OrganizationStaff> OrganizationStaffs
		{
			get
			{
				return this.GetTable<OrganizationStaff>();
			}
		}
		
		public System.Data.Linq.Table<OtherFunder> OtherFunders
		{
			get
			{
				return this.GetTable<OtherFunder>();
			}
		}
		
		public System.Data.Linq.Table<Permission> Permissions
		{
			get
			{
				return this.GetTable<Permission>();
			}
		}
		
		public System.Data.Linq.Table<Permission1> Permission1s
		{
			get
			{
				return this.GetTable<Permission1>();
			}
		}
		
		public System.Data.Linq.Table<ProgramArea> ProgramAreas
		{
			get
			{
				return this.GetTable<ProgramArea>();
			}
		}
		
		public System.Data.Linq.Table<ProgramAreaList> ProgramAreaLists
		{
			get
			{
				return this.GetTable<ProgramAreaList>();
			}
		}
		
		public System.Data.Linq.Table<ProjectEvent> ProjectEvents
		{
			get
			{
				return this.GetTable<ProjectEvent>();
			}
		}
		
		public System.Data.Linq.Table<ProjectEventDoc> ProjectEventDocs
		{
			get
			{
				return this.GetTable<ProjectEventDoc>();
			}
		}
		
		public System.Data.Linq.Table<ProjectEventDocument> ProjectEventDocuments
		{
			get
			{
				return this.GetTable<ProjectEventDocument>();
			}
		}
		
		public System.Data.Linq.Table<ProjectInfo> ProjectInfos
		{
			get
			{
				return this.GetTable<ProjectInfo>();
			}
		}
		
		public System.Data.Linq.Table<Project> Projects
		{
			get
			{
				return this.GetTable<Project>();
			}
		}
		
		public System.Data.Linq.Table<ProjLocation> ProjLocations
		{
			get
			{
				return this.GetTable<ProjLocation>();
			}
		}
		
		public System.Data.Linq.Table<ProjLocationList> ProjLocationLists
		{
			get
			{
				return this.GetTable<ProjLocationList>();
			}
		}
		
		public System.Data.Linq.Table<ProposalInfo> ProposalInfos
		{
			get
			{
				return this.GetTable<ProposalInfo>();
			}
		}
		
		public System.Data.Linq.Table<ProposalStatus> ProposalStatus
		{
			get
			{
				return this.GetTable<ProposalStatus>();
			}
		}
		
		public System.Data.Linq.Table<ProposalStatusList> ProposalStatusLists
		{
			get
			{
				return this.GetTable<ProposalStatusList>();
			}
		}
		
		public System.Data.Linq.Table<RegionList> RegionLists
		{
			get
			{
				return this.GetTable<RegionList>();
			}
		}
		
		public System.Data.Linq.Table<ReportPeriod> ReportPeriods
		{
			get
			{
				return this.GetTable<ReportPeriod>();
			}
		}
		
		public System.Data.Linq.Table<ReportPeriodList> ReportPeriodLists
		{
			get
			{
				return this.GetTable<ReportPeriodList>();
			}
		}
		
		public System.Data.Linq.Table<ReportPeriodListR> ReportPeriodListRs
		{
			get
			{
				return this.GetTable<ReportPeriodListR>();
			}
		}
		
		public System.Data.Linq.Table<ReportPeriodR> ReportPeriodRs
		{
			get
			{
				return this.GetTable<ReportPeriodR>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<RolesSSPStaff> RolesSSPStaffs
		{
			get
			{
				return this.GetTable<RolesSSPStaff>();
			}
		}
		
		public System.Data.Linq.Table<SSPStaff> SSPStaffs
		{
			get
			{
				return this.GetTable<SSPStaff>();
			}
		}
		
		public System.Data.Linq.Table<SSPStaffProject> SSPStaffProjects
		{
			get
			{
				return this.GetTable<SSPStaffProject>();
			}
		}
		
		public System.Data.Linq.Table<TemplateDocument> TemplateDocuments
		{
			get
			{
				return this.GetTable<TemplateDocument>();
			}
		}
		
		public System.Data.Linq.Table<TemplateFile> TemplateFiles
		{
			get
			{
				return this.GetTable<TemplateFile>();
			}
		}
		
		public System.Data.Linq.Table<TheKey> TheKeys
		{
			get
			{
				return this.GetTable<TheKey>();
			}
		}
		
		public System.Data.Linq.Table<FinArticleCategoryR> FinArticleCategoryRs
		{
			get
			{
				return this.GetTable<FinArticleCategoryR>();
			}
		}
		
		public System.Data.Linq.Table<OutComeStatement> OutComeStatements
		{
			get
			{
				return this.GetTable<OutComeStatement>();
			}
		}
		
		public System.Data.Linq.Table<LFIndicator> LFIndicators
		{
			get
			{
				return this.GetTable<LFIndicator>();
			}
		}
		
		public System.Data.Linq.Table<LFIndicatorList> LFIndicatorLists
		{
			get
			{
				return this.GetTable<LFIndicatorList>();
			}
		}
		
		public System.Data.Linq.Table<PageAccess> PageAccesses
		{
			get
			{
				return this.GetTable<PageAccess>();
			}
		}
		
		public System.Data.Linq.Table<Contact> Contacts
		{
			get
			{
				return this.GetTable<Contact>();
			}
		}
		
		public System.Data.Linq.Table<IndicatorLabel> IndicatorLabels
		{
			get
			{
				return this.GetTable<IndicatorLabel>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Address")]
	public partial class Address : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AddessID;
		
		private System.Nullable<int> _OrgID;
		
		private System.Nullable<int> _DDIDRegion;
		
		private string _LegalAddress;
		
		private string _LocationHint;
		
		private string _Country;
		
		private string _Area;
		
		private string _City;
		
		private string _Region;
		
		private string _Village;
		
		private string _Phone;
		
		private string _Fax;
		
		private string _email;
		
		private string _website;
		
		private System.Nullable<bool> _isLegalAddress;
		
		private EntityRef<Organization> _Organization;
		
		private EntityRef<RegionList> _RegionList;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAddessIDChanging(int value);
    partial void OnAddessIDChanged();
    partial void OnOrgIDChanging(System.Nullable<int> value);
    partial void OnOrgIDChanged();
    partial void OnDDIDRegionChanging(System.Nullable<int> value);
    partial void OnDDIDRegionChanged();
    partial void OnLegalAddressChanging(string value);
    partial void OnLegalAddressChanged();
    partial void OnLocationHintChanging(string value);
    partial void OnLocationHintChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    partial void OnAreaChanging(string value);
    partial void OnAreaChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnRegionChanging(string value);
    partial void OnRegionChanged();
    partial void OnVillageChanging(string value);
    partial void OnVillageChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnwebsiteChanging(string value);
    partial void OnwebsiteChanged();
    partial void OnisLegalAddressChanging(System.Nullable<bool> value);
    partial void OnisLegalAddressChanged();
    #endregion
		
		public Address()
		{
			this._Organization = default(EntityRef<Organization>);
			this._RegionList = default(EntityRef<RegionList>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddessID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AddessID
		{
			get
			{
				return this._AddessID;
			}
			set
			{
				if ((this._AddessID != value))
				{
					this.OnAddessIDChanging(value);
					this.SendPropertyChanging();
					this._AddessID = value;
					this.SendPropertyChanged("AddessID");
					this.OnAddessIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrgID", DbType="Int")]
		public System.Nullable<int> OrgID
		{
			get
			{
				return this._OrgID;
			}
			set
			{
				if ((this._OrgID != value))
				{
					if (this._Organization.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrgIDChanging(value);
					this.SendPropertyChanging();
					this._OrgID = value;
					this.SendPropertyChanged("OrgID");
					this.OnOrgIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DDIDRegion", DbType="Int")]
		public System.Nullable<int> DDIDRegion
		{
			get
			{
				return this._DDIDRegion;
			}
			set
			{
				if ((this._DDIDRegion != value))
				{
					if (this._RegionList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDDIDRegionChanging(value);
					this.SendPropertyChanging();
					this._DDIDRegion = value;
					this.SendPropertyChanged("DDIDRegion");
					this.OnDDIDRegionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LegalAddress", DbType="NVarChar(100)")]
		public string LegalAddress
		{
			get
			{
				return this._LegalAddress;
			}
			set
			{
				if ((this._LegalAddress != value))
				{
					this.OnLegalAddressChanging(value);
					this.SendPropertyChanging();
					this._LegalAddress = value;
					this.SendPropertyChanged("LegalAddress");
					this.OnLegalAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationHint", DbType="NVarChar(100)")]
		public string LocationHint
		{
			get
			{
				return this._LocationHint;
			}
			set
			{
				if ((this._LocationHint != value))
				{
					this.OnLocationHintChanging(value);
					this.SendPropertyChanging();
					this._LocationHint = value;
					this.SendPropertyChanged("LocationHint");
					this.OnLocationHintChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country", DbType="NVarChar(50)")]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Area", DbType="NVarChar(50)")]
		public string Area
		{
			get
			{
				return this._Area;
			}
			set
			{
				if ((this._Area != value))
				{
					this.OnAreaChanging(value);
					this.SendPropertyChanging();
					this._Area = value;
					this.SendPropertyChanged("Area");
					this.OnAreaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="NVarChar(50)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Region", DbType="NVarChar(50)")]
		public string Region
		{
			get
			{
				return this._Region;
			}
			set
			{
				if ((this._Region != value))
				{
					this.OnRegionChanging(value);
					this.SendPropertyChanging();
					this._Region = value;
					this.SendPropertyChanged("Region");
					this.OnRegionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Village", DbType="NVarChar(50)")]
		public string Village
		{
			get
			{
				return this._Village;
			}
			set
			{
				if ((this._Village != value))
				{
					this.OnVillageChanging(value);
					this.SendPropertyChanging();
					this._Village = value;
					this.SendPropertyChanged("Village");
					this.OnVillageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(50)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fax", DbType="VarChar(50)")]
		public string Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this.OnFaxChanging(value);
					this.SendPropertyChanging();
					this._Fax = value;
					this.SendPropertyChanged("Fax");
					this.OnFaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(50)")]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_website", DbType="VarChar(50)")]
		public string website
		{
			get
			{
				return this._website;
			}
			set
			{
				if ((this._website != value))
				{
					this.OnwebsiteChanging(value);
					this.SendPropertyChanging();
					this._website = value;
					this.SendPropertyChanged("website");
					this.OnwebsiteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isLegalAddress", DbType="Bit")]
		public System.Nullable<bool> isLegalAddress
		{
			get
			{
				return this._isLegalAddress;
			}
			set
			{
				if ((this._isLegalAddress != value))
				{
					this.OnisLegalAddressChanging(value);
					this.SendPropertyChanging();
					this._isLegalAddress = value;
					this.SendPropertyChanged("isLegalAddress");
					this.OnisLegalAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_Address", Storage="_Organization", ThisKey="OrgID", OtherKey="OrgID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Organization Organization
		{
			get
			{
				return this._Organization.Entity;
			}
			set
			{
				Organization previousValue = this._Organization.Entity;
				if (((previousValue != value) 
							|| (this._Organization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organization.Entity = null;
						previousValue.Addresses.Remove(this);
					}
					this._Organization.Entity = value;
					if ((value != null))
					{
						value.Addresses.Add(this);
						this._OrgID = value.OrgID;
					}
					else
					{
						this._OrgID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Organization");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RegionList_Address", Storage="_RegionList", ThisKey="DDIDRegion", OtherKey="DDID", IsForeignKey=true)]
		public RegionList RegionList
		{
			get
			{
				return this._RegionList.Entity;
			}
			set
			{
				RegionList previousValue = this._RegionList.Entity;
				if (((previousValue != value) 
							|| (this._RegionList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RegionList.Entity = null;
						previousValue.Addresses.Remove(this);
					}
					this._RegionList.Entity = value;
					if ((value != null))
					{
						value.Addresses.Add(this);
						this._DDIDRegion = value.DDID;
					}
					else
					{
						this._DDIDRegion = default(Nullable<int>);
					}
					this.SendPropertyChanged("RegionList");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserActionLog")]
	public partial class UserActionLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LogID;
		
		private int _ProjectID;
		
		private string _Section;
		
		private string _UserName;
		
		private string _Action;
		
		private string _Data;
		
		private System.Nullable<System.DateTime> _Date;
		
		private string _ProjectLabel;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLogIDChanging(int value);
    partial void OnLogIDChanged();
    partial void OnProjectIDChanging(int value);
    partial void OnProjectIDChanged();
    partial void OnSectionChanging(string value);
    partial void OnSectionChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnActionChanging(string value);
    partial void OnActionChanged();
    partial void OnDataChanging(string value);
    partial void OnDataChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnProjectLabelChanging(string value);
    partial void OnProjectLabelChanged();
    #endregion
		
		public UserActionLog()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LogID
		{
			get
			{
				return this._LogID;
			}
			set
			{
				if ((this._LogID != value))
				{
					this.OnLogIDChanging(value);
					this.SendPropertyChanging();
					this._LogID = value;
					this.SendPropertyChanged("LogID");
					this.OnLogIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int NOT NULL")]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Section", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Section
		{
			get
			{
				return this._Section;
			}
			set
			{
				if ((this._Section != value))
				{
					this.OnSectionChanging(value);
					this.SendPropertyChanging();
					this._Section = value;
					this.SendPropertyChanged("Section");
					this.OnSectionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Action", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Action
		{
			get
			{
				return this._Action;
			}
			set
			{
				if ((this._Action != value))
				{
					this.OnActionChanging(value);
					this.SendPropertyChanging();
					this._Action = value;
					this.SendPropertyChanged("Action");
					this.OnActionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Data", DbType="NVarChar(3850)")]
		public string Data
		{
			get
			{
				return this._Data;
			}
			set
			{
				if ((this._Data != value))
				{
					this.OnDataChanging(value);
					this.SendPropertyChanging();
					this._Data = value;
					this.SendPropertyChanged("Data");
					this.OnDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectLabel", DbType="NVarChar(50)")]
		public string ProjectLabel
		{
			get
			{
				return this._ProjectLabel;
			}
			set
			{
				if ((this._ProjectLabel != value))
				{
					this.OnProjectLabelChanging(value);
					this.SendPropertyChanging();
					this._ProjectLabel = value;
					this.SendPropertyChanged("ProjectLabel");
					this.OnProjectLabelChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BankInfo")]
	public partial class BankInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BankInfoID;
		
		private System.Nullable<int> _BankType;
		
		private string _Address1;
		
		private string _Address2;
		
		private string _City;
		
		private string _State;
		
		private string _Zip;
		
		private string _Country;
		
		private string _BankName;
		
		private string _AccountNumber;
		
		private string _SortCode;
		
		private string _Correspond;
		
		private string _ABASwift;
		
		private string _bank;
		
		private string _swift;
		
		private string _TIN;
		
		private System.Nullable<int> _Lang;
		
		private EntityRef<Project> _Project;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBankInfoIDChanging(int value);
    partial void OnBankInfoIDChanged();
    partial void OnBankTypeChanging(System.Nullable<int> value);
    partial void OnBankTypeChanged();
    partial void OnAddress1Changing(string value);
    partial void OnAddress1Changed();
    partial void OnAddress2Changing(string value);
    partial void OnAddress2Changed();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnZipChanging(string value);
    partial void OnZipChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    partial void OnBankNameChanging(string value);
    partial void OnBankNameChanged();
    partial void OnAccountNumberChanging(string value);
    partial void OnAccountNumberChanged();
    partial void OnSortCodeChanging(string value);
    partial void OnSortCodeChanged();
    partial void OnCorrespondChanging(string value);
    partial void OnCorrespondChanged();
    partial void OnABASwiftChanging(string value);
    partial void OnABASwiftChanged();
    partial void OnbankChanging(string value);
    partial void OnbankChanged();
    partial void OnswiftChanging(string value);
    partial void OnswiftChanged();
    partial void OnTINChanging(string value);
    partial void OnTINChanged();
    partial void OnLangChanging(System.Nullable<int> value);
    partial void OnLangChanged();
    #endregion
		
		public BankInfo()
		{
			this._Project = default(EntityRef<Project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankInfoID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BankInfoID
		{
			get
			{
				return this._BankInfoID;
			}
			set
			{
				if ((this._BankInfoID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBankInfoIDChanging(value);
					this.SendPropertyChanging();
					this._BankInfoID = value;
					this.SendPropertyChanged("BankInfoID");
					this.OnBankInfoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankType", DbType="Int")]
		public System.Nullable<int> BankType
		{
			get
			{
				return this._BankType;
			}
			set
			{
				if ((this._BankType != value))
				{
					this.OnBankTypeChanging(value);
					this.SendPropertyChanging();
					this._BankType = value;
					this.SendPropertyChanged("BankType");
					this.OnBankTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address1", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Address1
		{
			get
			{
				return this._Address1;
			}
			set
			{
				if ((this._Address1 != value))
				{
					this.OnAddress1Changing(value);
					this.SendPropertyChanging();
					this._Address1 = value;
					this.SendPropertyChanged("Address1");
					this.OnAddress1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address2", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Address2
		{
			get
			{
				return this._Address2;
			}
			set
			{
				if ((this._Address2 != value))
				{
					this.OnAddress2Changing(value);
					this.SendPropertyChanging();
					this._Address2 = value;
					this.SendPropertyChanged("Address2");
					this.OnAddress2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(50)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="VarChar(50)")]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Zip", DbType="VarChar(50)")]
		public string Zip
		{
			get
			{
				return this._Zip;
			}
			set
			{
				if ((this._Zip != value))
				{
					this.OnZipChanging(value);
					this.SendPropertyChanging();
					this._Zip = value;
					this.SendPropertyChanged("Zip");
					this.OnZipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country", DbType="VarChar(50)")]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankName", DbType="VarChar(50)")]
		public string BankName
		{
			get
			{
				return this._BankName;
			}
			set
			{
				if ((this._BankName != value))
				{
					this.OnBankNameChanging(value);
					this.SendPropertyChanging();
					this._BankName = value;
					this.SendPropertyChanged("BankName");
					this.OnBankNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountNumber", DbType="VarChar(50)")]
		public string AccountNumber
		{
			get
			{
				return this._AccountNumber;
			}
			set
			{
				if ((this._AccountNumber != value))
				{
					this.OnAccountNumberChanging(value);
					this.SendPropertyChanging();
					this._AccountNumber = value;
					this.SendPropertyChanged("AccountNumber");
					this.OnAccountNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SortCode", DbType="VarChar(50)")]
		public string SortCode
		{
			get
			{
				return this._SortCode;
			}
			set
			{
				if ((this._SortCode != value))
				{
					this.OnSortCodeChanging(value);
					this.SendPropertyChanging();
					this._SortCode = value;
					this.SendPropertyChanged("SortCode");
					this.OnSortCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Correspond", DbType="VarChar(50)")]
		public string Correspond
		{
			get
			{
				return this._Correspond;
			}
			set
			{
				if ((this._Correspond != value))
				{
					this.OnCorrespondChanging(value);
					this.SendPropertyChanging();
					this._Correspond = value;
					this.SendPropertyChanged("Correspond");
					this.OnCorrespondChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ABASwift", DbType="VarChar(50)")]
		public string ABASwift
		{
			get
			{
				return this._ABASwift;
			}
			set
			{
				if ((this._ABASwift != value))
				{
					this.OnABASwiftChanging(value);
					this.SendPropertyChanging();
					this._ABASwift = value;
					this.SendPropertyChanged("ABASwift");
					this.OnABASwiftChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bank", DbType="VarChar(50)")]
		public string bank
		{
			get
			{
				return this._bank;
			}
			set
			{
				if ((this._bank != value))
				{
					this.OnbankChanging(value);
					this.SendPropertyChanging();
					this._bank = value;
					this.SendPropertyChanged("bank");
					this.OnbankChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_swift", DbType="VarChar(50)")]
		public string swift
		{
			get
			{
				return this._swift;
			}
			set
			{
				if ((this._swift != value))
				{
					this.OnswiftChanging(value);
					this.SendPropertyChanging();
					this._swift = value;
					this.SendPropertyChanged("swift");
					this.OnswiftChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TIN", DbType="VarChar(50)")]
		public string TIN
		{
			get
			{
				return this._TIN;
			}
			set
			{
				if ((this._TIN != value))
				{
					this.OnTINChanging(value);
					this.SendPropertyChanging();
					this._TIN = value;
					this.SendPropertyChanged("TIN");
					this.OnTINChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lang", DbType="Int")]
		public System.Nullable<int> Lang
		{
			get
			{
				return this._Lang;
			}
			set
			{
				if ((this._Lang != value))
				{
					this.OnLangChanging(value);
					this.SendPropertyChanging();
					this._Lang = value;
					this.SendPropertyChanged("Lang");
					this.OnLangChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_BankInfo", Storage="_Project", ThisKey="BankInfoID", OtherKey="ProjectID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.BankInfo = null;
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.BankInfo = this;
						this._BankInfoID = value.ProjectID;
					}
					else
					{
						this._BankInfoID = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BeingEditedByUser")]
	public partial class BeingEditedByUser
	{
		
		private string _TableName;
		
		private System.Nullable<int> _UserID;
		
		private string _PrimaryKeyFieldName;
		
		private System.Nullable<int> _PrimaryKey;
		
		public BeingEditedByUser()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TableName", DbType="VarChar(50)")]
		public string TableName
		{
			get
			{
				return this._TableName;
			}
			set
			{
				if ((this._TableName != value))
				{
					this._TableName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int")]
		public System.Nullable<int> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this._UserID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrimaryKeyFieldName", DbType="VarChar(50)")]
		public string PrimaryKeyFieldName
		{
			get
			{
				return this._PrimaryKeyFieldName;
			}
			set
			{
				if ((this._PrimaryKeyFieldName != value))
				{
					this._PrimaryKeyFieldName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrimaryKey", DbType="Int")]
		public System.Nullable<int> PrimaryKey
		{
			get
			{
				return this._PrimaryKey;
			}
			set
			{
				if ((this._PrimaryKey != value))
				{
					this._PrimaryKey = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Budget")]
	public partial class Budget : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BudgetID;
		
		private System.Nullable<int> _ContractInitialAmt;
		
		private string _InfoBox;
		
		private System.Nullable<decimal> _Cancellation;
		
		private System.Nullable<decimal> _Returned;
		
		private EntitySet<FinArticleCategory> _FinArticleCategories;
		
		private EntitySet<ReportPeriodList> _ReportPeriodLists;
		
		private EntitySet<ReportPeriodListR> _ReportPeriodListRs;
		
		private EntitySet<FinArticleCategoryR> _FinArticleCategoryRs;
		
		private EntityRef<Project> _Project;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBudgetIDChanging(int value);
    partial void OnBudgetIDChanged();
    partial void OnContractInitialAmtChanging(System.Nullable<int> value);
    partial void OnContractInitialAmtChanged();
    partial void OnInfoBoxChanging(string value);
    partial void OnInfoBoxChanged();
    partial void OnCancellationChanging(System.Nullable<decimal> value);
    partial void OnCancellationChanged();
    partial void OnReturnedChanging(System.Nullable<decimal> value);
    partial void OnReturnedChanged();
    #endregion
		
		public Budget()
		{
			this._FinArticleCategories = new EntitySet<FinArticleCategory>(new Action<FinArticleCategory>(this.attach_FinArticleCategories), new Action<FinArticleCategory>(this.detach_FinArticleCategories));
			this._ReportPeriodLists = new EntitySet<ReportPeriodList>(new Action<ReportPeriodList>(this.attach_ReportPeriodLists), new Action<ReportPeriodList>(this.detach_ReportPeriodLists));
			this._ReportPeriodListRs = new EntitySet<ReportPeriodListR>(new Action<ReportPeriodListR>(this.attach_ReportPeriodListRs), new Action<ReportPeriodListR>(this.detach_ReportPeriodListRs));
			this._FinArticleCategoryRs = new EntitySet<FinArticleCategoryR>(new Action<FinArticleCategoryR>(this.attach_FinArticleCategoryRs), new Action<FinArticleCategoryR>(this.detach_FinArticleCategoryRs));
			this._Project = default(EntityRef<Project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BudgetID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BudgetID
		{
			get
			{
				return this._BudgetID;
			}
			set
			{
				if ((this._BudgetID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBudgetIDChanging(value);
					this.SendPropertyChanging();
					this._BudgetID = value;
					this.SendPropertyChanged("BudgetID");
					this.OnBudgetIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractInitialAmt", DbType="Int")]
		public System.Nullable<int> ContractInitialAmt
		{
			get
			{
				return this._ContractInitialAmt;
			}
			set
			{
				if ((this._ContractInitialAmt != value))
				{
					this.OnContractInitialAmtChanging(value);
					this.SendPropertyChanging();
					this._ContractInitialAmt = value;
					this.SendPropertyChanged("ContractInitialAmt");
					this.OnContractInitialAmtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InfoBox", DbType="NVarChar(500)")]
		public string InfoBox
		{
			get
			{
				return this._InfoBox;
			}
			set
			{
				if ((this._InfoBox != value))
				{
					this.OnInfoBoxChanging(value);
					this.SendPropertyChanging();
					this._InfoBox = value;
					this.SendPropertyChanged("InfoBox");
					this.OnInfoBoxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cancellation", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Cancellation
		{
			get
			{
				return this._Cancellation;
			}
			set
			{
				if ((this._Cancellation != value))
				{
					this.OnCancellationChanging(value);
					this.SendPropertyChanging();
					this._Cancellation = value;
					this.SendPropertyChanged("Cancellation");
					this.OnCancellationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Returned", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Returned
		{
			get
			{
				return this._Returned;
			}
			set
			{
				if ((this._Returned != value))
				{
					this.OnReturnedChanging(value);
					this.SendPropertyChanging();
					this._Returned = value;
					this.SendPropertyChanged("Returned");
					this.OnReturnedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Budget_FinArticleCategory", Storage="_FinArticleCategories", ThisKey="BudgetID", OtherKey="BudgetID")]
		public EntitySet<FinArticleCategory> FinArticleCategories
		{
			get
			{
				return this._FinArticleCategories;
			}
			set
			{
				this._FinArticleCategories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Budget_ReportPeriodList", Storage="_ReportPeriodLists", ThisKey="BudgetID", OtherKey="BudgetID")]
		public EntitySet<ReportPeriodList> ReportPeriodLists
		{
			get
			{
				return this._ReportPeriodLists;
			}
			set
			{
				this._ReportPeriodLists.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Budget_ReportPeriodListR", Storage="_ReportPeriodListRs", ThisKey="BudgetID", OtherKey="BudgetID")]
		public EntitySet<ReportPeriodListR> ReportPeriodListRs
		{
			get
			{
				return this._ReportPeriodListRs;
			}
			set
			{
				this._ReportPeriodListRs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Budget_FinArticleCategoryR", Storage="_FinArticleCategoryRs", ThisKey="BudgetID", OtherKey="BudgetID")]
		public EntitySet<FinArticleCategoryR> FinArticleCategoryRs
		{
			get
			{
				return this._FinArticleCategoryRs;
			}
			set
			{
				this._FinArticleCategoryRs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Budget", Storage="_Project", ThisKey="BudgetID", OtherKey="ProjectID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.Budget = null;
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.Budget = this;
						this._BudgetID = value.ProjectID;
					}
					else
					{
						this._BudgetID = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FinArticleCategories(FinArticleCategory entity)
		{
			this.SendPropertyChanging();
			entity.Budget = this;
		}
		
		private void detach_FinArticleCategories(FinArticleCategory entity)
		{
			this.SendPropertyChanging();
			entity.Budget = null;
		}
		
		private void attach_ReportPeriodLists(ReportPeriodList entity)
		{
			this.SendPropertyChanging();
			entity.Budget = this;
		}
		
		private void detach_ReportPeriodLists(ReportPeriodList entity)
		{
			this.SendPropertyChanging();
			entity.Budget = null;
		}
		
		private void attach_ReportPeriodListRs(ReportPeriodListR entity)
		{
			this.SendPropertyChanging();
			entity.Budget = this;
		}
		
		private void detach_ReportPeriodListRs(ReportPeriodListR entity)
		{
			this.SendPropertyChanging();
			entity.Budget = null;
		}
		
		private void attach_FinArticleCategoryRs(FinArticleCategoryR entity)
		{
			this.SendPropertyChanging();
			entity.Budget = this;
		}
		
		private void detach_FinArticleCategoryRs(FinArticleCategoryR entity)
		{
			this.SendPropertyChanging();
			entity.Budget = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CompetitionCode")]
	public partial class CompetitionCode : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<int> _CompetCodeID;
		
		private int _ProjectID;
		
		private System.Nullable<System.DateTime> _SelectedDate;
		
		private EntityRef<CompetitionCodeList> _CompetitionCodeList;
		
		private EntityRef<Project> _Project;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompetCodeIDChanging(System.Nullable<int> value);
    partial void OnCompetCodeIDChanged();
    partial void OnProjectIDChanging(int value);
    partial void OnProjectIDChanged();
    partial void OnSelectedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnSelectedDateChanged();
    #endregion
		
		public CompetitionCode()
		{
			this._CompetitionCodeList = default(EntityRef<CompetitionCodeList>);
			this._Project = default(EntityRef<Project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompetCodeID", DbType="Int")]
		public System.Nullable<int> CompetCodeID
		{
			get
			{
				return this._CompetCodeID;
			}
			set
			{
				if ((this._CompetCodeID != value))
				{
					if (this._CompetitionCodeList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompetCodeIDChanging(value);
					this.SendPropertyChanging();
					this._CompetCodeID = value;
					this.SendPropertyChanged("CompetCodeID");
					this.OnCompetCodeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SelectedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> SelectedDate
		{
			get
			{
				return this._SelectedDate;
			}
			set
			{
				if ((this._SelectedDate != value))
				{
					this.OnSelectedDateChanging(value);
					this.SendPropertyChanging();
					this._SelectedDate = value;
					this.SendPropertyChanged("SelectedDate");
					this.OnSelectedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompetitionCodeList_CompetitionCode", Storage="_CompetitionCodeList", ThisKey="CompetCodeID", OtherKey="CompetitionCodeID", IsForeignKey=true)]
		public CompetitionCodeList CompetitionCodeList
		{
			get
			{
				return this._CompetitionCodeList.Entity;
			}
			set
			{
				CompetitionCodeList previousValue = this._CompetitionCodeList.Entity;
				if (((previousValue != value) 
							|| (this._CompetitionCodeList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CompetitionCodeList.Entity = null;
						previousValue.CompetitionCodes.Remove(this);
					}
					this._CompetitionCodeList.Entity = value;
					if ((value != null))
					{
						value.CompetitionCodes.Add(this);
						this._CompetCodeID = value.CompetitionCodeID;
					}
					else
					{
						this._CompetCodeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CompetitionCodeList");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_CompetitionCode", Storage="_Project", ThisKey="ProjectID", OtherKey="ProjectID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.CompetitionCode = null;
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.CompetitionCode = this;
						this._ProjectID = value.ProjectID;
					}
					else
					{
						this._ProjectID = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CompetitionCodeList")]
	public partial class CompetitionCodeList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CompetitionCodeID;
		
		private string _CodeText;
		
		private EntitySet<CompetitionCode> _CompetitionCodes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompetitionCodeIDChanging(int value);
    partial void OnCompetitionCodeIDChanged();
    partial void OnCodeTextChanging(string value);
    partial void OnCodeTextChanged();
    #endregion
		
		public CompetitionCodeList()
		{
			this._CompetitionCodes = new EntitySet<CompetitionCode>(new Action<CompetitionCode>(this.attach_CompetitionCodes), new Action<CompetitionCode>(this.detach_CompetitionCodes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompetitionCodeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CompetitionCodeID
		{
			get
			{
				return this._CompetitionCodeID;
			}
			set
			{
				if ((this._CompetitionCodeID != value))
				{
					this.OnCompetitionCodeIDChanging(value);
					this.SendPropertyChanging();
					this._CompetitionCodeID = value;
					this.SendPropertyChanged("CompetitionCodeID");
					this.OnCompetitionCodeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodeText", DbType="VarChar(50)")]
		public string CodeText
		{
			get
			{
				return this._CodeText;
			}
			set
			{
				if ((this._CodeText != value))
				{
					this.OnCodeTextChanging(value);
					this.SendPropertyChanging();
					this._CodeText = value;
					this.SendPropertyChanged("CodeText");
					this.OnCodeTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompetitionCodeList_CompetitionCode", Storage="_CompetitionCodes", ThisKey="CompetitionCodeID", OtherKey="CompetCodeID")]
		public EntitySet<CompetitionCode> CompetitionCodes
		{
			get
			{
				return this._CompetitionCodes;
			}
			set
			{
				this._CompetitionCodes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CompetitionCodes(CompetitionCode entity)
		{
			this.SendPropertyChanging();
			entity.CompetitionCodeList = this;
		}
		
		private void detach_CompetitionCodes(CompetitionCode entity)
		{
			this.SendPropertyChanging();
			entity.CompetitionCodeList = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EventFieldMapper")]
	public partial class EventFieldMapper : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MapperID;
		
		private string _DBFIELD;
		
		private string _DOCFIELD;
		
		private string _TABLENAME;
		
		private string _Description;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMapperIDChanging(int value);
    partial void OnMapperIDChanged();
    partial void OnDBFIELDChanging(string value);
    partial void OnDBFIELDChanged();
    partial void OnDOCFIELDChanging(string value);
    partial void OnDOCFIELDChanged();
    partial void OnTABLENAMEChanging(string value);
    partial void OnTABLENAMEChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public EventFieldMapper()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MapperID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MapperID
		{
			get
			{
				return this._MapperID;
			}
			set
			{
				if ((this._MapperID != value))
				{
					this.OnMapperIDChanging(value);
					this.SendPropertyChanging();
					this._MapperID = value;
					this.SendPropertyChanged("MapperID");
					this.OnMapperIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DBFIELD", DbType="VarChar(50)")]
		public string DBFIELD
		{
			get
			{
				return this._DBFIELD;
			}
			set
			{
				if ((this._DBFIELD != value))
				{
					this.OnDBFIELDChanging(value);
					this.SendPropertyChanging();
					this._DBFIELD = value;
					this.SendPropertyChanged("DBFIELD");
					this.OnDBFIELDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DOCFIELD", DbType="VarChar(50)")]
		public string DOCFIELD
		{
			get
			{
				return this._DOCFIELD;
			}
			set
			{
				if ((this._DOCFIELD != value))
				{
					this.OnDOCFIELDChanging(value);
					this.SendPropertyChanging();
					this._DOCFIELD = value;
					this.SendPropertyChanged("DOCFIELD");
					this.OnDOCFIELDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TABLENAME", DbType="VarChar(50)")]
		public string TABLENAME
		{
			get
			{
				return this._TABLENAME;
			}
			set
			{
				if ((this._TABLENAME != value))
				{
					this.OnTABLENAMEChanging(value);
					this.SendPropertyChanging();
					this._TABLENAME = value;
					this.SendPropertyChanged("TABLENAME");
					this.OnTABLENAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(200)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EventType")]
	public partial class EventType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EventTypeID;
		
		private string _EventTypeName;
		
		private EntitySet<ProjectEvent> _ProjectEvents;
		
		private EntitySet<TemplateDocument> _TemplateDocuments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventTypeIDChanging(int value);
    partial void OnEventTypeIDChanged();
    partial void OnEventTypeNameChanging(string value);
    partial void OnEventTypeNameChanged();
    #endregion
		
		public EventType()
		{
			this._ProjectEvents = new EntitySet<ProjectEvent>(new Action<ProjectEvent>(this.attach_ProjectEvents), new Action<ProjectEvent>(this.detach_ProjectEvents));
			this._TemplateDocuments = new EntitySet<TemplateDocument>(new Action<TemplateDocument>(this.attach_TemplateDocuments), new Action<TemplateDocument>(this.detach_TemplateDocuments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EventTypeID
		{
			get
			{
				return this._EventTypeID;
			}
			set
			{
				if ((this._EventTypeID != value))
				{
					this.OnEventTypeIDChanging(value);
					this.SendPropertyChanging();
					this._EventTypeID = value;
					this.SendPropertyChanged("EventTypeID");
					this.OnEventTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventTypeName", DbType="NVarChar(100)")]
		public string EventTypeName
		{
			get
			{
				return this._EventTypeName;
			}
			set
			{
				if ((this._EventTypeName != value))
				{
					this.OnEventTypeNameChanging(value);
					this.SendPropertyChanging();
					this._EventTypeName = value;
					this.SendPropertyChanged("EventTypeName");
					this.OnEventTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EventType_ProjectEvent", Storage="_ProjectEvents", ThisKey="EventTypeID", OtherKey="EventTypeID")]
		public EntitySet<ProjectEvent> ProjectEvents
		{
			get
			{
				return this._ProjectEvents;
			}
			set
			{
				this._ProjectEvents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EventType_TemplateDocument", Storage="_TemplateDocuments", ThisKey="EventTypeID", OtherKey="EventTypeID")]
		public EntitySet<TemplateDocument> TemplateDocuments
		{
			get
			{
				return this._TemplateDocuments;
			}
			set
			{
				this._TemplateDocuments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProjectEvents(ProjectEvent entity)
		{
			this.SendPropertyChanging();
			entity.EventType = this;
		}
		
		private void detach_ProjectEvents(ProjectEvent entity)
		{
			this.SendPropertyChanging();
			entity.EventType = null;
		}
		
		private void attach_TemplateDocuments(TemplateDocument entity)
		{
			this.SendPropertyChanging();
			entity.EventType = this;
		}
		
		private void detach_TemplateDocuments(TemplateDocument entity)
		{
			this.SendPropertyChanging();
			entity.EventType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FinancialArticle")]
	public partial class FinancialArticle : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FinArticleID;
		
		private int _BudgetID;
		
		private int _FinArticleCatID;
		
		private string _ArticleName;
		
		private System.Nullable<int> _Price;
		
		private System.Nullable<int> _Amt;
		
		private System.Nullable<int> _Times;
		
		private System.Nullable<int> _TimePeriod;
		
		private System.Nullable<int> _GranteeInput;
		
		private System.Nullable<int> _DonorInput;
		
		private string _Info;
		
		private System.Nullable<int> _TransferAmt;
		
		private EntitySet<ReportPeriod> _ReportPeriods;
		
		private EntityRef<FinArticleCategory> _FinArticleCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFinArticleIDChanging(int value);
    partial void OnFinArticleIDChanged();
    partial void OnBudgetIDChanging(int value);
    partial void OnBudgetIDChanged();
    partial void OnFinArticleCatIDChanging(int value);
    partial void OnFinArticleCatIDChanged();
    partial void OnArticleNameChanging(string value);
    partial void OnArticleNameChanged();
    partial void OnPriceChanging(System.Nullable<int> value);
    partial void OnPriceChanged();
    partial void OnAmtChanging(System.Nullable<int> value);
    partial void OnAmtChanged();
    partial void OnTimesChanging(System.Nullable<int> value);
    partial void OnTimesChanged();
    partial void OnTimePeriodChanging(System.Nullable<int> value);
    partial void OnTimePeriodChanged();
    partial void OnGranteeInputChanging(System.Nullable<int> value);
    partial void OnGranteeInputChanged();
    partial void OnDonorInputChanging(System.Nullable<int> value);
    partial void OnDonorInputChanged();
    partial void OnInfoChanging(string value);
    partial void OnInfoChanged();
    partial void OnTransferAmtChanging(System.Nullable<int> value);
    partial void OnTransferAmtChanged();
    #endregion
		
		public FinancialArticle()
		{
			this._ReportPeriods = new EntitySet<ReportPeriod>(new Action<ReportPeriod>(this.attach_ReportPeriods), new Action<ReportPeriod>(this.detach_ReportPeriods));
			this._FinArticleCategory = default(EntityRef<FinArticleCategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinArticleID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FinArticleID
		{
			get
			{
				return this._FinArticleID;
			}
			set
			{
				if ((this._FinArticleID != value))
				{
					this.OnFinArticleIDChanging(value);
					this.SendPropertyChanging();
					this._FinArticleID = value;
					this.SendPropertyChanged("FinArticleID");
					this.OnFinArticleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BudgetID", DbType="Int NOT NULL")]
		public int BudgetID
		{
			get
			{
				return this._BudgetID;
			}
			set
			{
				if ((this._BudgetID != value))
				{
					if (this._FinArticleCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBudgetIDChanging(value);
					this.SendPropertyChanging();
					this._BudgetID = value;
					this.SendPropertyChanged("BudgetID");
					this.OnBudgetIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinArticleCatID", DbType="Int NOT NULL")]
		public int FinArticleCatID
		{
			get
			{
				return this._FinArticleCatID;
			}
			set
			{
				if ((this._FinArticleCatID != value))
				{
					if (this._FinArticleCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFinArticleCatIDChanging(value);
					this.SendPropertyChanging();
					this._FinArticleCatID = value;
					this.SendPropertyChanged("FinArticleCatID");
					this.OnFinArticleCatIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArticleName", DbType="NVarChar(100)")]
		public string ArticleName
		{
			get
			{
				return this._ArticleName;
			}
			set
			{
				if ((this._ArticleName != value))
				{
					this.OnArticleNameChanging(value);
					this.SendPropertyChanging();
					this._ArticleName = value;
					this.SendPropertyChanged("ArticleName");
					this.OnArticleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Int")]
		public System.Nullable<int> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amt", DbType="Int")]
		public System.Nullable<int> Amt
		{
			get
			{
				return this._Amt;
			}
			set
			{
				if ((this._Amt != value))
				{
					this.OnAmtChanging(value);
					this.SendPropertyChanging();
					this._Amt = value;
					this.SendPropertyChanged("Amt");
					this.OnAmtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Times", DbType="Int")]
		public System.Nullable<int> Times
		{
			get
			{
				return this._Times;
			}
			set
			{
				if ((this._Times != value))
				{
					this.OnTimesChanging(value);
					this.SendPropertyChanging();
					this._Times = value;
					this.SendPropertyChanged("Times");
					this.OnTimesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimePeriod", DbType="Int")]
		public System.Nullable<int> TimePeriod
		{
			get
			{
				return this._TimePeriod;
			}
			set
			{
				if ((this._TimePeriod != value))
				{
					this.OnTimePeriodChanging(value);
					this.SendPropertyChanging();
					this._TimePeriod = value;
					this.SendPropertyChanged("TimePeriod");
					this.OnTimePeriodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GranteeInput", DbType="Int")]
		public System.Nullable<int> GranteeInput
		{
			get
			{
				return this._GranteeInput;
			}
			set
			{
				if ((this._GranteeInput != value))
				{
					this.OnGranteeInputChanging(value);
					this.SendPropertyChanging();
					this._GranteeInput = value;
					this.SendPropertyChanged("GranteeInput");
					this.OnGranteeInputChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DonorInput", DbType="Int")]
		public System.Nullable<int> DonorInput
		{
			get
			{
				return this._DonorInput;
			}
			set
			{
				if ((this._DonorInput != value))
				{
					this.OnDonorInputChanging(value);
					this.SendPropertyChanging();
					this._DonorInput = value;
					this.SendPropertyChanged("DonorInput");
					this.OnDonorInputChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Info", DbType="NVarChar(100)")]
		public string Info
		{
			get
			{
				return this._Info;
			}
			set
			{
				if ((this._Info != value))
				{
					this.OnInfoChanging(value);
					this.SendPropertyChanging();
					this._Info = value;
					this.SendPropertyChanged("Info");
					this.OnInfoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransferAmt", DbType="Int")]
		public System.Nullable<int> TransferAmt
		{
			get
			{
				return this._TransferAmt;
			}
			set
			{
				if ((this._TransferAmt != value))
				{
					this.OnTransferAmtChanging(value);
					this.SendPropertyChanging();
					this._TransferAmt = value;
					this.SendPropertyChanged("TransferAmt");
					this.OnTransferAmtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FinancialArticle_ReportPeriod", Storage="_ReportPeriods", ThisKey="FinArticleID", OtherKey="FinArticleID")]
		public EntitySet<ReportPeriod> ReportPeriods
		{
			get
			{
				return this._ReportPeriods;
			}
			set
			{
				this._ReportPeriods.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FinArticleCategory_FinancialArticle", Storage="_FinArticleCategory", ThisKey="BudgetID,FinArticleCatID", OtherKey="BudgetID,FinArticleCatID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public FinArticleCategory FinArticleCategory
		{
			get
			{
				return this._FinArticleCategory.Entity;
			}
			set
			{
				FinArticleCategory previousValue = this._FinArticleCategory.Entity;
				if (((previousValue != value) 
							|| (this._FinArticleCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FinArticleCategory.Entity = null;
						previousValue.FinancialArticles.Remove(this);
					}
					this._FinArticleCategory.Entity = value;
					if ((value != null))
					{
						value.FinancialArticles.Add(this);
						this._BudgetID = value.BudgetID;
						this._FinArticleCatID = value.FinArticleCatID;
					}
					else
					{
						this._BudgetID = default(int);
						this._FinArticleCatID = default(int);
					}
					this.SendPropertyChanged("FinArticleCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ReportPeriods(ReportPeriod entity)
		{
			this.SendPropertyChanging();
			entity.FinancialArticle = this;
		}
		
		private void detach_ReportPeriods(ReportPeriod entity)
		{
			this.SendPropertyChanging();
			entity.FinancialArticle = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FinArtCatList")]
	public partial class FinArtCatList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FinArticleCatID;
		
		private string _FinArticleCatName;
		
		private EntitySet<FinArticleCategory> _FinArticleCategories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFinArticleCatIDChanging(int value);
    partial void OnFinArticleCatIDChanged();
    partial void OnFinArticleCatNameChanging(string value);
    partial void OnFinArticleCatNameChanged();
    #endregion
		
		public FinArtCatList()
		{
			this._FinArticleCategories = new EntitySet<FinArticleCategory>(new Action<FinArticleCategory>(this.attach_FinArticleCategories), new Action<FinArticleCategory>(this.detach_FinArticleCategories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinArticleCatID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FinArticleCatID
		{
			get
			{
				return this._FinArticleCatID;
			}
			set
			{
				if ((this._FinArticleCatID != value))
				{
					this.OnFinArticleCatIDChanging(value);
					this.SendPropertyChanging();
					this._FinArticleCatID = value;
					this.SendPropertyChanged("FinArticleCatID");
					this.OnFinArticleCatIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinArticleCatName", DbType="NVarChar(200)")]
		public string FinArticleCatName
		{
			get
			{
				return this._FinArticleCatName;
			}
			set
			{
				if ((this._FinArticleCatName != value))
				{
					this.OnFinArticleCatNameChanging(value);
					this.SendPropertyChanging();
					this._FinArticleCatName = value;
					this.SendPropertyChanged("FinArticleCatName");
					this.OnFinArticleCatNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FinArtCatList_FinArticleCategory", Storage="_FinArticleCategories", ThisKey="FinArticleCatID", OtherKey="FinArticleCatID")]
		public EntitySet<FinArticleCategory> FinArticleCategories
		{
			get
			{
				return this._FinArticleCategories;
			}
			set
			{
				this._FinArticleCategories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FinArticleCategories(FinArticleCategory entity)
		{
			this.SendPropertyChanging();
			entity.FinArtCatList = this;
		}
		
		private void detach_FinArticleCategories(FinArticleCategory entity)
		{
			this.SendPropertyChanging();
			entity.FinArtCatList = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FinArtCatListR")]
	public partial class FinArtCatListR : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FinArticleCatListID;
		
		private string _FinArticleCatName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFinArticleCatListIDChanging(int value);
    partial void OnFinArticleCatListIDChanged();
    partial void OnFinArticleCatNameChanging(string value);
    partial void OnFinArticleCatNameChanged();
    #endregion
		
		public FinArtCatListR()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinArticleCatListID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FinArticleCatListID
		{
			get
			{
				return this._FinArticleCatListID;
			}
			set
			{
				if ((this._FinArticleCatListID != value))
				{
					this.OnFinArticleCatListIDChanging(value);
					this.SendPropertyChanging();
					this._FinArticleCatListID = value;
					this.SendPropertyChanged("FinArticleCatListID");
					this.OnFinArticleCatListIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinArticleCatName", DbType="NVarChar(100)")]
		public string FinArticleCatName
		{
			get
			{
				return this._FinArticleCatName;
			}
			set
			{
				if ((this._FinArticleCatName != value))
				{
					this.OnFinArticleCatNameChanging(value);
					this.SendPropertyChanging();
					this._FinArticleCatName = value;
					this.SendPropertyChanged("FinArticleCatName");
					this.OnFinArticleCatNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FinArticleCategory")]
	public partial class FinArticleCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BudgetID;
		
		private int _FinArticleCatID;
		
		private EntitySet<FinancialArticle> _FinancialArticles;
		
		private EntityRef<Budget> _Budget;
		
		private EntityRef<FinArtCatList> _FinArtCatList;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBudgetIDChanging(int value);
    partial void OnBudgetIDChanged();
    partial void OnFinArticleCatIDChanging(int value);
    partial void OnFinArticleCatIDChanged();
    #endregion
		
		public FinArticleCategory()
		{
			this._FinancialArticles = new EntitySet<FinancialArticle>(new Action<FinancialArticle>(this.attach_FinancialArticles), new Action<FinancialArticle>(this.detach_FinancialArticles));
			this._Budget = default(EntityRef<Budget>);
			this._FinArtCatList = default(EntityRef<FinArtCatList>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BudgetID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BudgetID
		{
			get
			{
				return this._BudgetID;
			}
			set
			{
				if ((this._BudgetID != value))
				{
					if (this._Budget.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBudgetIDChanging(value);
					this.SendPropertyChanging();
					this._BudgetID = value;
					this.SendPropertyChanged("BudgetID");
					this.OnBudgetIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinArticleCatID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int FinArticleCatID
		{
			get
			{
				return this._FinArticleCatID;
			}
			set
			{
				if ((this._FinArticleCatID != value))
				{
					if (this._FinArtCatList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFinArticleCatIDChanging(value);
					this.SendPropertyChanging();
					this._FinArticleCatID = value;
					this.SendPropertyChanged("FinArticleCatID");
					this.OnFinArticleCatIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FinArticleCategory_FinancialArticle", Storage="_FinancialArticles", ThisKey="BudgetID,FinArticleCatID", OtherKey="BudgetID,FinArticleCatID")]
		public EntitySet<FinancialArticle> FinancialArticles
		{
			get
			{
				return this._FinancialArticles;
			}
			set
			{
				this._FinancialArticles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Budget_FinArticleCategory", Storage="_Budget", ThisKey="BudgetID", OtherKey="BudgetID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Budget Budget
		{
			get
			{
				return this._Budget.Entity;
			}
			set
			{
				Budget previousValue = this._Budget.Entity;
				if (((previousValue != value) 
							|| (this._Budget.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Budget.Entity = null;
						previousValue.FinArticleCategories.Remove(this);
					}
					this._Budget.Entity = value;
					if ((value != null))
					{
						value.FinArticleCategories.Add(this);
						this._BudgetID = value.BudgetID;
					}
					else
					{
						this._BudgetID = default(int);
					}
					this.SendPropertyChanged("Budget");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FinArtCatList_FinArticleCategory", Storage="_FinArtCatList", ThisKey="FinArticleCatID", OtherKey="FinArticleCatID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public FinArtCatList FinArtCatList
		{
			get
			{
				return this._FinArtCatList.Entity;
			}
			set
			{
				FinArtCatList previousValue = this._FinArtCatList.Entity;
				if (((previousValue != value) 
							|| (this._FinArtCatList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FinArtCatList.Entity = null;
						previousValue.FinArticleCategories.Remove(this);
					}
					this._FinArtCatList.Entity = value;
					if ((value != null))
					{
						value.FinArticleCategories.Add(this);
						this._FinArticleCatID = value.FinArticleCatID;
					}
					else
					{
						this._FinArticleCatID = default(int);
					}
					this.SendPropertyChanged("FinArtCatList");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FinancialArticles(FinancialArticle entity)
		{
			this.SendPropertyChanging();
			entity.FinArticleCategory = this;
		}
		
		private void detach_FinancialArticles(FinancialArticle entity)
		{
			this.SendPropertyChanging();
			entity.FinArticleCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FundingOrganization")]
	public partial class FundingOrganization : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FundingSourceOrgID;
		
		private string _FundingOrgName;
		
		private string _FundingOrgDescription;
		
		private EntitySet<FundingSource> _FundingSources;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFundingSourceOrgIDChanging(int value);
    partial void OnFundingSourceOrgIDChanged();
    partial void OnFundingOrgNameChanging(string value);
    partial void OnFundingOrgNameChanged();
    partial void OnFundingOrgDescriptionChanging(string value);
    partial void OnFundingOrgDescriptionChanged();
    #endregion
		
		public FundingOrganization()
		{
			this._FundingSources = new EntitySet<FundingSource>(new Action<FundingSource>(this.attach_FundingSources), new Action<FundingSource>(this.detach_FundingSources));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FundingSourceOrgID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FundingSourceOrgID
		{
			get
			{
				return this._FundingSourceOrgID;
			}
			set
			{
				if ((this._FundingSourceOrgID != value))
				{
					this.OnFundingSourceOrgIDChanging(value);
					this.SendPropertyChanging();
					this._FundingSourceOrgID = value;
					this.SendPropertyChanged("FundingSourceOrgID");
					this.OnFundingSourceOrgIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FundingOrgName", DbType="NVarChar(200)")]
		public string FundingOrgName
		{
			get
			{
				return this._FundingOrgName;
			}
			set
			{
				if ((this._FundingOrgName != value))
				{
					this.OnFundingOrgNameChanging(value);
					this.SendPropertyChanging();
					this._FundingOrgName = value;
					this.SendPropertyChanged("FundingOrgName");
					this.OnFundingOrgNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FundingOrgDescription", DbType="NVarChar(500)")]
		public string FundingOrgDescription
		{
			get
			{
				return this._FundingOrgDescription;
			}
			set
			{
				if ((this._FundingOrgDescription != value))
				{
					this.OnFundingOrgDescriptionChanging(value);
					this.SendPropertyChanging();
					this._FundingOrgDescription = value;
					this.SendPropertyChanged("FundingOrgDescription");
					this.OnFundingOrgDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FundingOrganization_FundingSource", Storage="_FundingSources", ThisKey="FundingSourceOrgID", OtherKey="FundingSourceOrgID")]
		public EntitySet<FundingSource> FundingSources
		{
			get
			{
				return this._FundingSources;
			}
			set
			{
				this._FundingSources.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FundingSources(FundingSource entity)
		{
			this.SendPropertyChanging();
			entity.FundingOrganization = this;
		}
		
		private void detach_FundingSources(FundingSource entity)
		{
			this.SendPropertyChanging();
			entity.FundingOrganization = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FundingSource")]
	public partial class FundingSource : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FundingSourceID;
		
		private int _ProjectID;
		
		private int _FundingSourceOrgID;
		
		private System.Nullable<System.DateTime> _Date;
		
		private System.Nullable<int> _CashAmount;
		
		private System.Nullable<int> _InKindAmount;
		
		private string _InKindAmountInfo;
		
		private EntityRef<FundingOrganization> _FundingOrganization;
		
		private EntityRef<Project> _Project;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFundingSourceIDChanging(int value);
    partial void OnFundingSourceIDChanged();
    partial void OnProjectIDChanging(int value);
    partial void OnProjectIDChanged();
    partial void OnFundingSourceOrgIDChanging(int value);
    partial void OnFundingSourceOrgIDChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnCashAmountChanging(System.Nullable<int> value);
    partial void OnCashAmountChanged();
    partial void OnInKindAmountChanging(System.Nullable<int> value);
    partial void OnInKindAmountChanged();
    partial void OnInKindAmountInfoChanging(string value);
    partial void OnInKindAmountInfoChanged();
    #endregion
		
		public FundingSource()
		{
			this._FundingOrganization = default(EntityRef<FundingOrganization>);
			this._Project = default(EntityRef<Project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FundingSourceID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FundingSourceID
		{
			get
			{
				return this._FundingSourceID;
			}
			set
			{
				if ((this._FundingSourceID != value))
				{
					this.OnFundingSourceIDChanging(value);
					this.SendPropertyChanging();
					this._FundingSourceID = value;
					this.SendPropertyChanged("FundingSourceID");
					this.OnFundingSourceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int NOT NULL")]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FundingSourceOrgID", DbType="Int NOT NULL")]
		public int FundingSourceOrgID
		{
			get
			{
				return this._FundingSourceOrgID;
			}
			set
			{
				if ((this._FundingSourceOrgID != value))
				{
					if (this._FundingOrganization.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFundingSourceOrgIDChanging(value);
					this.SendPropertyChanging();
					this._FundingSourceOrgID = value;
					this.SendPropertyChanged("FundingSourceOrgID");
					this.OnFundingSourceOrgIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CashAmount", DbType="Int")]
		public System.Nullable<int> CashAmount
		{
			get
			{
				return this._CashAmount;
			}
			set
			{
				if ((this._CashAmount != value))
				{
					this.OnCashAmountChanging(value);
					this.SendPropertyChanging();
					this._CashAmount = value;
					this.SendPropertyChanged("CashAmount");
					this.OnCashAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InKindAmount", DbType="Int")]
		public System.Nullable<int> InKindAmount
		{
			get
			{
				return this._InKindAmount;
			}
			set
			{
				if ((this._InKindAmount != value))
				{
					this.OnInKindAmountChanging(value);
					this.SendPropertyChanging();
					this._InKindAmount = value;
					this.SendPropertyChanged("InKindAmount");
					this.OnInKindAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InKindAmountInfo", DbType="VarChar(50)")]
		public string InKindAmountInfo
		{
			get
			{
				return this._InKindAmountInfo;
			}
			set
			{
				if ((this._InKindAmountInfo != value))
				{
					this.OnInKindAmountInfoChanging(value);
					this.SendPropertyChanging();
					this._InKindAmountInfo = value;
					this.SendPropertyChanged("InKindAmountInfo");
					this.OnInKindAmountInfoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FundingOrganization_FundingSource", Storage="_FundingOrganization", ThisKey="FundingSourceOrgID", OtherKey="FundingSourceOrgID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public FundingOrganization FundingOrganization
		{
			get
			{
				return this._FundingOrganization.Entity;
			}
			set
			{
				FundingOrganization previousValue = this._FundingOrganization.Entity;
				if (((previousValue != value) 
							|| (this._FundingOrganization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FundingOrganization.Entity = null;
						previousValue.FundingSources.Remove(this);
					}
					this._FundingOrganization.Entity = value;
					if ((value != null))
					{
						value.FundingSources.Add(this);
						this._FundingSourceOrgID = value.FundingSourceOrgID;
					}
					else
					{
						this._FundingSourceOrgID = default(int);
					}
					this.SendPropertyChanged("FundingOrganization");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_FundingSource", Storage="_Project", ThisKey="ProjectID", OtherKey="ProjectID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.FundingSources.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.FundingSources.Add(this);
						this._ProjectID = value.ProjectID;
					}
					else
					{
						this._ProjectID = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.General")]
	public partial class General : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrgID;
		
		private System.Nullable<System.DateTime> _FiscalYearEnd;
		
		private string _Name;
		
		private string _Notes;
		
		private string _NameRu;
		
		private EntityRef<Organization> _Organization;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrgIDChanging(int value);
    partial void OnOrgIDChanged();
    partial void OnFiscalYearEndChanging(System.Nullable<System.DateTime> value);
    partial void OnFiscalYearEndChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnNameRuChanging(string value);
    partial void OnNameRuChanged();
    #endregion
		
		public General()
		{
			this._Organization = default(EntityRef<Organization>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrgID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int OrgID
		{
			get
			{
				return this._OrgID;
			}
			set
			{
				if ((this._OrgID != value))
				{
					if (this._Organization.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrgIDChanging(value);
					this.SendPropertyChanging();
					this._OrgID = value;
					this.SendPropertyChanged("OrgID");
					this.OnOrgIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FiscalYearEnd", DbType="DateTime")]
		public System.Nullable<System.DateTime> FiscalYearEnd
		{
			get
			{
				return this._FiscalYearEnd;
			}
			set
			{
				if ((this._FiscalYearEnd != value))
				{
					this.OnFiscalYearEndChanging(value);
					this.SendPropertyChanging();
					this._FiscalYearEnd = value;
					this.SendPropertyChanged("FiscalYearEnd");
					this.OnFiscalYearEndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(400)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="NVarChar(300)")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameRu", DbType="NVarChar(400)")]
		public string NameRu
		{
			get
			{
				return this._NameRu;
			}
			set
			{
				if ((this._NameRu != value))
				{
					this.OnNameRuChanging(value);
					this.SendPropertyChanging();
					this._NameRu = value;
					this.SendPropertyChanged("NameRu");
					this.OnNameRuChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_General", Storage="_Organization", ThisKey="OrgID", OtherKey="OrgID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Organization Organization
		{
			get
			{
				return this._Organization.Entity;
			}
			set
			{
				Organization previousValue = this._Organization.Entity;
				if (((previousValue != value) 
							|| (this._Organization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organization.Entity = null;
						previousValue.General = null;
					}
					this._Organization.Entity = value;
					if ((value != null))
					{
						value.General = this;
						this._OrgID = value.OrgID;
					}
					else
					{
						this._OrgID = default(int);
					}
					this.SendPropertyChanged("Organization");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GrantType")]
	public partial class GrantType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<int> _GrantTypeCodeID;
		
		private int _ProjectID;
		
		private System.Nullable<System.DateTime> _SelectedDate;
		
		private EntityRef<GrantTypeList> _GrantTypeList;
		
		private EntityRef<Project> _Project;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGrantTypeCodeIDChanging(System.Nullable<int> value);
    partial void OnGrantTypeCodeIDChanged();
    partial void OnProjectIDChanging(int value);
    partial void OnProjectIDChanged();
    partial void OnSelectedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnSelectedDateChanged();
    #endregion
		
		public GrantType()
		{
			this._GrantTypeList = default(EntityRef<GrantTypeList>);
			this._Project = default(EntityRef<Project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GrantTypeCodeID", DbType="Int")]
		public System.Nullable<int> GrantTypeCodeID
		{
			get
			{
				return this._GrantTypeCodeID;
			}
			set
			{
				if ((this._GrantTypeCodeID != value))
				{
					if (this._GrantTypeList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGrantTypeCodeIDChanging(value);
					this.SendPropertyChanging();
					this._GrantTypeCodeID = value;
					this.SendPropertyChanged("GrantTypeCodeID");
					this.OnGrantTypeCodeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SelectedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> SelectedDate
		{
			get
			{
				return this._SelectedDate;
			}
			set
			{
				if ((this._SelectedDate != value))
				{
					this.OnSelectedDateChanging(value);
					this.SendPropertyChanging();
					this._SelectedDate = value;
					this.SendPropertyChanged("SelectedDate");
					this.OnSelectedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GrantTypeList_GrantType", Storage="_GrantTypeList", ThisKey="GrantTypeCodeID", OtherKey="GrantTypeCodeID", IsForeignKey=true)]
		public GrantTypeList GrantTypeList
		{
			get
			{
				return this._GrantTypeList.Entity;
			}
			set
			{
				GrantTypeList previousValue = this._GrantTypeList.Entity;
				if (((previousValue != value) 
							|| (this._GrantTypeList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GrantTypeList.Entity = null;
						previousValue.GrantTypes.Remove(this);
					}
					this._GrantTypeList.Entity = value;
					if ((value != null))
					{
						value.GrantTypes.Add(this);
						this._GrantTypeCodeID = value.GrantTypeCodeID;
					}
					else
					{
						this._GrantTypeCodeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("GrantTypeList");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_GrantType", Storage="_Project", ThisKey="ProjectID", OtherKey="ProjectID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.GrantType = null;
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.GrantType = this;
						this._ProjectID = value.ProjectID;
					}
					else
					{
						this._ProjectID = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GrantTypeList")]
	public partial class GrantTypeList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GrantTypeCodeID;
		
		private string _GrantTypeText;
		
		private EntitySet<GrantType> _GrantTypes;
		
		private EntitySet<IndicatorCategoryLabel> _IndicatorCategoryLabels;
		
		private EntitySet<IndicatorLabel> _IndicatorLabels;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGrantTypeCodeIDChanging(int value);
    partial void OnGrantTypeCodeIDChanged();
    partial void OnGrantTypeTextChanging(string value);
    partial void OnGrantTypeTextChanged();
    #endregion
		
		public GrantTypeList()
		{
			this._GrantTypes = new EntitySet<GrantType>(new Action<GrantType>(this.attach_GrantTypes), new Action<GrantType>(this.detach_GrantTypes));
			this._IndicatorCategoryLabels = new EntitySet<IndicatorCategoryLabel>(new Action<IndicatorCategoryLabel>(this.attach_IndicatorCategoryLabels), new Action<IndicatorCategoryLabel>(this.detach_IndicatorCategoryLabels));
			this._IndicatorLabels = new EntitySet<IndicatorLabel>(new Action<IndicatorLabel>(this.attach_IndicatorLabels), new Action<IndicatorLabel>(this.detach_IndicatorLabels));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GrantTypeCodeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GrantTypeCodeID
		{
			get
			{
				return this._GrantTypeCodeID;
			}
			set
			{
				if ((this._GrantTypeCodeID != value))
				{
					this.OnGrantTypeCodeIDChanging(value);
					this.SendPropertyChanging();
					this._GrantTypeCodeID = value;
					this.SendPropertyChanged("GrantTypeCodeID");
					this.OnGrantTypeCodeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GrantTypeText", DbType="VarChar(50)")]
		public string GrantTypeText
		{
			get
			{
				return this._GrantTypeText;
			}
			set
			{
				if ((this._GrantTypeText != value))
				{
					this.OnGrantTypeTextChanging(value);
					this.SendPropertyChanging();
					this._GrantTypeText = value;
					this.SendPropertyChanged("GrantTypeText");
					this.OnGrantTypeTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GrantTypeList_GrantType", Storage="_GrantTypes", ThisKey="GrantTypeCodeID", OtherKey="GrantTypeCodeID")]
		public EntitySet<GrantType> GrantTypes
		{
			get
			{
				return this._GrantTypes;
			}
			set
			{
				this._GrantTypes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GrantTypeList_IndicatorCategoryLabel", Storage="_IndicatorCategoryLabels", ThisKey="GrantTypeCodeID", OtherKey="GrantTypeCodeID")]
		public EntitySet<IndicatorCategoryLabel> IndicatorCategoryLabels
		{
			get
			{
				return this._IndicatorCategoryLabels;
			}
			set
			{
				this._IndicatorCategoryLabels.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GrantTypeList_IndicatorLabel", Storage="_IndicatorLabels", ThisKey="GrantTypeCodeID", OtherKey="GrantTypeCodeID")]
		public EntitySet<IndicatorLabel> IndicatorLabels
		{
			get
			{
				return this._IndicatorLabels;
			}
			set
			{
				this._IndicatorLabels.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GrantTypes(GrantType entity)
		{
			this.SendPropertyChanging();
			entity.GrantTypeList = this;
		}
		
		private void detach_GrantTypes(GrantType entity)
		{
			this.SendPropertyChanging();
			entity.GrantTypeList = null;
		}
		
		private void attach_IndicatorCategoryLabels(IndicatorCategoryLabel entity)
		{
			this.SendPropertyChanging();
			entity.GrantTypeList = this;
		}
		
		private void detach_IndicatorCategoryLabels(IndicatorCategoryLabel entity)
		{
			this.SendPropertyChanging();
			entity.GrantTypeList = null;
		}
		
		private void attach_IndicatorLabels(IndicatorLabel entity)
		{
			this.SendPropertyChanging();
			entity.GrantTypeList = this;
		}
		
		private void detach_IndicatorLabels(IndicatorLabel entity)
		{
			this.SendPropertyChanging();
			entity.GrantTypeList = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Indicator")]
	public partial class Indicator : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IndicatorID;
		
		private string _IndicatorName;
		
		private EntitySet<IndicatorItem> _IndicatorItems;
		
		private EntityRef<Project> _Project;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIndicatorIDChanging(int value);
    partial void OnIndicatorIDChanged();
    partial void OnIndicatorNameChanging(string value);
    partial void OnIndicatorNameChanged();
    #endregion
		
		public Indicator()
		{
			this._IndicatorItems = new EntitySet<IndicatorItem>(new Action<IndicatorItem>(this.attach_IndicatorItems), new Action<IndicatorItem>(this.detach_IndicatorItems));
			this._Project = default(EntityRef<Project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IndicatorID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IndicatorID
		{
			get
			{
				return this._IndicatorID;
			}
			set
			{
				if ((this._IndicatorID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIndicatorIDChanging(value);
					this.SendPropertyChanging();
					this._IndicatorID = value;
					this.SendPropertyChanged("IndicatorID");
					this.OnIndicatorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IndicatorName", DbType="NVarChar(100)")]
		public string IndicatorName
		{
			get
			{
				return this._IndicatorName;
			}
			set
			{
				if ((this._IndicatorName != value))
				{
					this.OnIndicatorNameChanging(value);
					this.SendPropertyChanging();
					this._IndicatorName = value;
					this.SendPropertyChanged("IndicatorName");
					this.OnIndicatorNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Indicator_IndicatorItem", Storage="_IndicatorItems", ThisKey="IndicatorID", OtherKey="IndicatorID")]
		public EntitySet<IndicatorItem> IndicatorItems
		{
			get
			{
				return this._IndicatorItems;
			}
			set
			{
				this._IndicatorItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Indicator", Storage="_Project", ThisKey="IndicatorID", OtherKey="ProjectID", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.Indicator = null;
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.Indicator = this;
						this._IndicatorID = value.ProjectID;
					}
					else
					{
						this._IndicatorID = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_IndicatorItems(IndicatorItem entity)
		{
			this.SendPropertyChanging();
			entity.Indicator = this;
		}
		
		private void detach_IndicatorItems(IndicatorItem entity)
		{
			this.SendPropertyChanging();
			entity.Indicator = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.IndicatorCategoryLabel")]
	public partial class IndicatorCategoryLabel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IndicatorCategoryLabelID;
		
		private int _GrantTypeCodeID;
		
		private bool _CountTotal;
		
		private string _Text;
		
		private EntitySet<IndicatorItem> _IndicatorItems;
		
		private EntitySet<IndicatorTemplateItem> _IndicatorTemplateItems;
		
		private EntityRef<GrantTypeList> _GrantTypeList;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIndicatorCategoryLabelIDChanging(int value);
    partial void OnIndicatorCategoryLabelIDChanged();
    partial void OnGrantTypeCodeIDChanging(int value);
    partial void OnGrantTypeCodeIDChanged();
    partial void OnCountTotalChanging(bool value);
    partial void OnCountTotalChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    #endregion
		
		public IndicatorCategoryLabel()
		{
			this._IndicatorItems = new EntitySet<IndicatorItem>(new Action<IndicatorItem>(this.attach_IndicatorItems), new Action<IndicatorItem>(this.detach_IndicatorItems));
			this._IndicatorTemplateItems = new EntitySet<IndicatorTemplateItem>(new Action<IndicatorTemplateItem>(this.attach_IndicatorTemplateItems), new Action<IndicatorTemplateItem>(this.detach_IndicatorTemplateItems));
			this._GrantTypeList = default(EntityRef<GrantTypeList>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IndicatorCategoryLabelID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IndicatorCategoryLabelID
		{
			get
			{
				return this._IndicatorCategoryLabelID;
			}
			set
			{
				if ((this._IndicatorCategoryLabelID != value))
				{
					this.OnIndicatorCategoryLabelIDChanging(value);
					this.SendPropertyChanging();
					this._IndicatorCategoryLabelID = value;
					this.SendPropertyChanged("IndicatorCategoryLabelID");
					this.OnIndicatorCategoryLabelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GrantTypeCodeID", DbType="Int NOT NULL")]
		public int GrantTypeCodeID
		{
			get
			{
				return this._GrantTypeCodeID;
			}
			set
			{
				if ((this._GrantTypeCodeID != value))
				{
					if (this._GrantTypeList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGrantTypeCodeIDChanging(value);
					this.SendPropertyChanging();
					this._GrantTypeCodeID = value;
					this.SendPropertyChanged("GrantTypeCodeID");
					this.OnGrantTypeCodeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountTotal", DbType="Bit NOT NULL")]
		public bool CountTotal
		{
			get
			{
				return this._CountTotal;
			}
			set
			{
				if ((this._CountTotal != value))
				{
					this.OnCountTotalChanging(value);
					this.SendPropertyChanging();
					this._CountTotal = value;
					this.SendPropertyChanged("CountTotal");
					this.OnCountTotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(100)")]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IndicatorCategoryLabel_IndicatorItem", Storage="_IndicatorItems", ThisKey="IndicatorCategoryLabelID", OtherKey="IndicatorCategoryLabelID")]
		public EntitySet<IndicatorItem> IndicatorItems
		{
			get
			{
				return this._IndicatorItems;
			}
			set
			{
				this._IndicatorItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IndicatorCategoryLabel_IndicatorTemplateItem", Storage="_IndicatorTemplateItems", ThisKey="IndicatorCategoryLabelID", OtherKey="IndicatorCategoryLabelID")]
		public EntitySet<IndicatorTemplateItem> IndicatorTemplateItems
		{
			get
			{
				return this._IndicatorTemplateItems;
			}
			set
			{
				this._IndicatorTemplateItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GrantTypeList_IndicatorCategoryLabel", Storage="_GrantTypeList", ThisKey="GrantTypeCodeID", OtherKey="GrantTypeCodeID", IsForeignKey=true)]
		public GrantTypeList GrantTypeList
		{
			get
			{
				return this._GrantTypeList.Entity;
			}
			set
			{
				GrantTypeList previousValue = this._GrantTypeList.Entity;
				if (((previousValue != value) 
							|| (this._GrantTypeList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GrantTypeList.Entity = null;
						previousValue.IndicatorCategoryLabels.Remove(this);
					}
					this._GrantTypeList.Entity = value;
					if ((value != null))
					{
						value.IndicatorCategoryLabels.Add(this);
						this._GrantTypeCodeID = value.GrantTypeCodeID;
					}
					else
					{
						this._GrantTypeCodeID = default(int);
					}
					this.SendPropertyChanged("GrantTypeList");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_IndicatorItems(IndicatorItem entity)
		{
			this.SendPropertyChanging();
			entity.IndicatorCategoryLabel = this;
		}
		
		private void detach_IndicatorItems(IndicatorItem entity)
		{
			this.SendPropertyChanging();
			entity.IndicatorCategoryLabel = null;
		}
		
		private void attach_IndicatorTemplateItems(IndicatorTemplateItem entity)
		{
			this.SendPropertyChanging();
			entity.IndicatorCategoryLabel = this;
		}
		
		private void detach_IndicatorTemplateItems(IndicatorTemplateItem entity)
		{
			this.SendPropertyChanging();
			entity.IndicatorCategoryLabel = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.IndicatorItem")]
	public partial class IndicatorItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IndicatorItemID;
		
		private int _IndicatorCategoryLabelID;
		
		private int _IndicatorLabelID;
		
		private int _IndicatorID;
		
		private System.Nullable<int> _Baseline;
		
		private System.Nullable<int> _Benchmark;
		
		private System.Nullable<int> _Final;
		
		private EntityRef<Indicator> _Indicator;
		
		private EntityRef<IndicatorCategoryLabel> _IndicatorCategoryLabel;
		
		private EntityRef<IndicatorLabel> _IndicatorLabel;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIndicatorItemIDChanging(int value);
    partial void OnIndicatorItemIDChanged();
    partial void OnIndicatorCategoryLabelIDChanging(int value);
    partial void OnIndicatorCategoryLabelIDChanged();
    partial void OnIndicatorLabelIDChanging(int value);
    partial void OnIndicatorLabelIDChanged();
    partial void OnIndicatorIDChanging(int value);
    partial void OnIndicatorIDChanged();
    partial void OnBaselineChanging(System.Nullable<int> value);
    partial void OnBaselineChanged();
    partial void OnBenchmarkChanging(System.Nullable<int> value);
    partial void OnBenchmarkChanged();
    partial void OnFinalChanging(System.Nullable<int> value);
    partial void OnFinalChanged();
    #endregion
		
		public IndicatorItem()
		{
			this._Indicator = default(EntityRef<Indicator>);
			this._IndicatorCategoryLabel = default(EntityRef<IndicatorCategoryLabel>);
			this._IndicatorLabel = default(EntityRef<IndicatorLabel>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IndicatorItemID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IndicatorItemID
		{
			get
			{
				return this._IndicatorItemID;
			}
			set
			{
				if ((this._IndicatorItemID != value))
				{
					this.OnIndicatorItemIDChanging(value);
					this.SendPropertyChanging();
					this._IndicatorItemID = value;
					this.SendPropertyChanged("IndicatorItemID");
					this.OnIndicatorItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IndicatorCategoryLabelID", DbType="Int NOT NULL")]
		public int IndicatorCategoryLabelID
		{
			get
			{
				return this._IndicatorCategoryLabelID;
			}
			set
			{
				if ((this._IndicatorCategoryLabelID != value))
				{
					if (this._IndicatorCategoryLabel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIndicatorCategoryLabelIDChanging(value);
					this.SendPropertyChanging();
					this._IndicatorCategoryLabelID = value;
					this.SendPropertyChanged("IndicatorCategoryLabelID");
					this.OnIndicatorCategoryLabelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IndicatorLabelID", DbType="Int NOT NULL")]
		public int IndicatorLabelID
		{
			get
			{
				return this._IndicatorLabelID;
			}
			set
			{
				if ((this._IndicatorLabelID != value))
				{
					if (this._IndicatorLabel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIndicatorLabelIDChanging(value);
					this.SendPropertyChanging();
					this._IndicatorLabelID = value;
					this.SendPropertyChanged("IndicatorLabelID");
					this.OnIndicatorLabelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IndicatorID", DbType="Int NOT NULL")]
		public int IndicatorID
		{
			get
			{
				return this._IndicatorID;
			}
			set
			{
				if ((this._IndicatorID != value))
				{
					if (this._Indicator.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIndicatorIDChanging(value);
					this.SendPropertyChanging();
					this._IndicatorID = value;
					this.SendPropertyChanged("IndicatorID");
					this.OnIndicatorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Baseline", DbType="Int")]
		public System.Nullable<int> Baseline
		{
			get
			{
				return this._Baseline;
			}
			set
			{
				if ((this._Baseline != value))
				{
					this.OnBaselineChanging(value);
					this.SendPropertyChanging();
					this._Baseline = value;
					this.SendPropertyChanged("Baseline");
					this.OnBaselineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Benchmark", DbType="Int")]
		public System.Nullable<int> Benchmark
		{
			get
			{
				return this._Benchmark;
			}
			set
			{
				if ((this._Benchmark != value))
				{
					this.OnBenchmarkChanging(value);
					this.SendPropertyChanging();
					this._Benchmark = value;
					this.SendPropertyChanged("Benchmark");
					this.OnBenchmarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Final", DbType="Int")]
		public System.Nullable<int> Final
		{
			get
			{
				return this._Final;
			}
			set
			{
				if ((this._Final != value))
				{
					this.OnFinalChanging(value);
					this.SendPropertyChanging();
					this._Final = value;
					this.SendPropertyChanged("Final");
					this.OnFinalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Indicator_IndicatorItem", Storage="_Indicator", ThisKey="IndicatorID", OtherKey="IndicatorID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Indicator Indicator
		{
			get
			{
				return this._Indicator.Entity;
			}
			set
			{
				Indicator previousValue = this._Indicator.Entity;
				if (((previousValue != value) 
							|| (this._Indicator.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Indicator.Entity = null;
						previousValue.IndicatorItems.Remove(this);
					}
					this._Indicator.Entity = value;
					if ((value != null))
					{
						value.IndicatorItems.Add(this);
						this._IndicatorID = value.IndicatorID;
					}
					else
					{
						this._IndicatorID = default(int);
					}
					this.SendPropertyChanged("Indicator");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IndicatorCategoryLabel_IndicatorItem", Storage="_IndicatorCategoryLabel", ThisKey="IndicatorCategoryLabelID", OtherKey="IndicatorCategoryLabelID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public IndicatorCategoryLabel IndicatorCategoryLabel
		{
			get
			{
				return this._IndicatorCategoryLabel.Entity;
			}
			set
			{
				IndicatorCategoryLabel previousValue = this._IndicatorCategoryLabel.Entity;
				if (((previousValue != value) 
							|| (this._IndicatorCategoryLabel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IndicatorCategoryLabel.Entity = null;
						previousValue.IndicatorItems.Remove(this);
					}
					this._IndicatorCategoryLabel.Entity = value;
					if ((value != null))
					{
						value.IndicatorItems.Add(this);
						this._IndicatorCategoryLabelID = value.IndicatorCategoryLabelID;
					}
					else
					{
						this._IndicatorCategoryLabelID = default(int);
					}
					this.SendPropertyChanged("IndicatorCategoryLabel");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IndicatorLabel_IndicatorItem", Storage="_IndicatorLabel", ThisKey="IndicatorLabelID", OtherKey="IndicatorLabelID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public IndicatorLabel IndicatorLabel
		{
			get
			{
				return this._IndicatorLabel.Entity;
			}
			set
			{
				IndicatorLabel previousValue = this._IndicatorLabel.Entity;
				if (((previousValue != value) 
							|| (this._IndicatorLabel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IndicatorLabel.Entity = null;
						previousValue.IndicatorItems.Remove(this);
					}
					this._IndicatorLabel.Entity = value;
					if ((value != null))
					{
						value.IndicatorItems.Add(this);
						this._IndicatorLabelID = value.IndicatorLabelID;
					}
					else
					{
						this._IndicatorLabelID = default(int);
					}
					this.SendPropertyChanged("IndicatorLabel");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.IndicatorLabelContentCategory")]
	public partial class IndicatorLabelContentCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Text;
		
		private EntitySet<IndicatorLabel> _IndicatorLabels;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    #endregion
		
		public IndicatorLabelContentCategory()
		{
			this._IndicatorLabels = new EntitySet<IndicatorLabel>(new Action<IndicatorLabel>(this.attach_IndicatorLabels), new Action<IndicatorLabel>(this.detach_IndicatorLabels));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(50)")]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IndicatorLabelContentCategory_IndicatorLabel", Storage="_IndicatorLabels", ThisKey="ID", OtherKey="LabelContentCategory")]
		public EntitySet<IndicatorLabel> IndicatorLabels
		{
			get
			{
				return this._IndicatorLabels;
			}
			set
			{
				this._IndicatorLabels.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_IndicatorLabels(IndicatorLabel entity)
		{
			this.SendPropertyChanging();
			entity.IndicatorLabelContentCategory = this;
		}
		
		private void detach_IndicatorLabels(IndicatorLabel entity)
		{
			this.SendPropertyChanging();
			entity.IndicatorLabelContentCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.IndicatorTemplateItem")]
	public partial class IndicatorTemplateItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IndicatorTemplateItemID;
		
		private int _IndicatorCategoryLabelID;
		
		private int _IndicatorLabelID;
		
		private System.Nullable<int> _Baseline;
		
		private System.Nullable<int> _Benchmark;
		
		private System.Nullable<int> _Final;
		
		private EntityRef<IndicatorCategoryLabel> _IndicatorCategoryLabel;
		
		private EntityRef<IndicatorLabel> _IndicatorLabel;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIndicatorTemplateItemIDChanging(int value);
    partial void OnIndicatorTemplateItemIDChanged();
    partial void OnIndicatorCategoryLabelIDChanging(int value);
    partial void OnIndicatorCategoryLabelIDChanged();
    partial void OnIndicatorLabelIDChanging(int value);
    partial void OnIndicatorLabelIDChanged();
    partial void OnBaselineChanging(System.Nullable<int> value);
    partial void OnBaselineChanged();
    partial void OnBenchmarkChanging(System.Nullable<int> value);
    partial void OnBenchmarkChanged();
    partial void OnFinalChanging(System.Nullable<int> value);
    partial void OnFinalChanged();
    #endregion
		
		public IndicatorTemplateItem()
		{
			this._IndicatorCategoryLabel = default(EntityRef<IndicatorCategoryLabel>);
			this._IndicatorLabel = default(EntityRef<IndicatorLabel>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IndicatorTemplateItemID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IndicatorTemplateItemID
		{
			get
			{
				return this._IndicatorTemplateItemID;
			}
			set
			{
				if ((this._IndicatorTemplateItemID != value))
				{
					this.OnIndicatorTemplateItemIDChanging(value);
					this.SendPropertyChanging();
					this._IndicatorTemplateItemID = value;
					this.SendPropertyChanged("IndicatorTemplateItemID");
					this.OnIndicatorTemplateItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IndicatorCategoryLabelID", DbType="Int NOT NULL")]
		public int IndicatorCategoryLabelID
		{
			get
			{
				return this._IndicatorCategoryLabelID;
			}
			set
			{
				if ((this._IndicatorCategoryLabelID != value))
				{
					if (this._IndicatorCategoryLabel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIndicatorCategoryLabelIDChanging(value);
					this.SendPropertyChanging();
					this._IndicatorCategoryLabelID = value;
					this.SendPropertyChanged("IndicatorCategoryLabelID");
					this.OnIndicatorCategoryLabelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IndicatorLabelID", DbType="Int NOT NULL")]
		public int IndicatorLabelID
		{
			get
			{
				return this._IndicatorLabelID;
			}
			set
			{
				if ((this._IndicatorLabelID != value))
				{
					if (this._IndicatorLabel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIndicatorLabelIDChanging(value);
					this.SendPropertyChanging();
					this._IndicatorLabelID = value;
					this.SendPropertyChanged("IndicatorLabelID");
					this.OnIndicatorLabelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Baseline", DbType="Int")]
		public System.Nullable<int> Baseline
		{
			get
			{
				return this._Baseline;
			}
			set
			{
				if ((this._Baseline != value))
				{
					this.OnBaselineChanging(value);
					this.SendPropertyChanging();
					this._Baseline = value;
					this.SendPropertyChanged("Baseline");
					this.OnBaselineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Benchmark", DbType="Int")]
		public System.Nullable<int> Benchmark
		{
			get
			{
				return this._Benchmark;
			}
			set
			{
				if ((this._Benchmark != value))
				{
					this.OnBenchmarkChanging(value);
					this.SendPropertyChanging();
					this._Benchmark = value;
					this.SendPropertyChanged("Benchmark");
					this.OnBenchmarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Final", DbType="Int")]
		public System.Nullable<int> Final
		{
			get
			{
				return this._Final;
			}
			set
			{
				if ((this._Final != value))
				{
					this.OnFinalChanging(value);
					this.SendPropertyChanging();
					this._Final = value;
					this.SendPropertyChanged("Final");
					this.OnFinalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IndicatorCategoryLabel_IndicatorTemplateItem", Storage="_IndicatorCategoryLabel", ThisKey="IndicatorCategoryLabelID", OtherKey="IndicatorCategoryLabelID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public IndicatorCategoryLabel IndicatorCategoryLabel
		{
			get
			{
				return this._IndicatorCategoryLabel.Entity;
			}
			set
			{
				IndicatorCategoryLabel previousValue = this._IndicatorCategoryLabel.Entity;
				if (((previousValue != value) 
							|| (this._IndicatorCategoryLabel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IndicatorCategoryLabel.Entity = null;
						previousValue.IndicatorTemplateItems.Remove(this);
					}
					this._IndicatorCategoryLabel.Entity = value;
					if ((value != null))
					{
						value.IndicatorTemplateItems.Add(this);
						this._IndicatorCategoryLabelID = value.IndicatorCategoryLabelID;
					}
					else
					{
						this._IndicatorCategoryLabelID = default(int);
					}
					this.SendPropertyChanged("IndicatorCategoryLabel");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IndicatorLabel_IndicatorTemplateItem", Storage="_IndicatorLabel", ThisKey="IndicatorLabelID", OtherKey="IndicatorLabelID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public IndicatorLabel IndicatorLabel
		{
			get
			{
				return this._IndicatorLabel.Entity;
			}
			set
			{
				IndicatorLabel previousValue = this._IndicatorLabel.Entity;
				if (((previousValue != value) 
							|| (this._IndicatorLabel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IndicatorLabel.Entity = null;
						previousValue.IndicatorTemplateItems.Remove(this);
					}
					this._IndicatorLabel.Entity = value;
					if ((value != null))
					{
						value.IndicatorTemplateItems.Add(this);
						this._IndicatorLabelID = value.IndicatorLabelID;
					}
					else
					{
						this._IndicatorLabelID = default(int);
					}
					this.SendPropertyChanged("IndicatorLabel");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LegalStatus")]
	public partial class LegalStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrgID;
		
		private int _LegSListID;
		
		private System.Nullable<System.DateTime> _SelectedDate;
		
		private EntityRef<LegalStatusList> _LegalStatusList;
		
		private EntityRef<Organization> _Organization;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrgIDChanging(int value);
    partial void OnOrgIDChanged();
    partial void OnLegSListIDChanging(int value);
    partial void OnLegSListIDChanged();
    partial void OnSelectedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnSelectedDateChanged();
    #endregion
		
		public LegalStatus()
		{
			this._LegalStatusList = default(EntityRef<LegalStatusList>);
			this._Organization = default(EntityRef<Organization>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrgID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int OrgID
		{
			get
			{
				return this._OrgID;
			}
			set
			{
				if ((this._OrgID != value))
				{
					if (this._Organization.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrgIDChanging(value);
					this.SendPropertyChanging();
					this._OrgID = value;
					this.SendPropertyChanged("OrgID");
					this.OnOrgIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LegSListID", DbType="Int NOT NULL")]
		public int LegSListID
		{
			get
			{
				return this._LegSListID;
			}
			set
			{
				if ((this._LegSListID != value))
				{
					if (this._LegalStatusList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLegSListIDChanging(value);
					this.SendPropertyChanging();
					this._LegSListID = value;
					this.SendPropertyChanged("LegSListID");
					this.OnLegSListIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SelectedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> SelectedDate
		{
			get
			{
				return this._SelectedDate;
			}
			set
			{
				if ((this._SelectedDate != value))
				{
					this.OnSelectedDateChanging(value);
					this.SendPropertyChanging();
					this._SelectedDate = value;
					this.SendPropertyChanged("SelectedDate");
					this.OnSelectedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LegalStatusList_LegalStatus", Storage="_LegalStatusList", ThisKey="LegSListID", OtherKey="LegStatListID", IsForeignKey=true)]
		public LegalStatusList LegalStatusList
		{
			get
			{
				return this._LegalStatusList.Entity;
			}
			set
			{
				LegalStatusList previousValue = this._LegalStatusList.Entity;
				if (((previousValue != value) 
							|| (this._LegalStatusList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LegalStatusList.Entity = null;
						previousValue.LegalStatus.Remove(this);
					}
					this._LegalStatusList.Entity = value;
					if ((value != null))
					{
						value.LegalStatus.Add(this);
						this._LegSListID = value.LegStatListID;
					}
					else
					{
						this._LegSListID = default(int);
					}
					this.SendPropertyChanged("LegalStatusList");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_LegalStatus", Storage="_Organization", ThisKey="OrgID", OtherKey="OrgID", IsForeignKey=true)]
		public Organization Organization
		{
			get
			{
				return this._Organization.Entity;
			}
			set
			{
				Organization previousValue = this._Organization.Entity;
				if (((previousValue != value) 
							|| (this._Organization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organization.Entity = null;
						previousValue.LegalStatus = null;
					}
					this._Organization.Entity = value;
					if ((value != null))
					{
						value.LegalStatus = this;
						this._OrgID = value.OrgID;
					}
					else
					{
						this._OrgID = default(int);
					}
					this.SendPropertyChanged("Organization");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LegalStatusList")]
	public partial class LegalStatusList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LegStatListID;
		
		private string _LegName;
		
		private EntitySet<LegalStatus> _LegalStatus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLegStatListIDChanging(int value);
    partial void OnLegStatListIDChanged();
    partial void OnLegNameChanging(string value);
    partial void OnLegNameChanged();
    #endregion
		
		public LegalStatusList()
		{
			this._LegalStatus = new EntitySet<LegalStatus>(new Action<LegalStatus>(this.attach_LegalStatus), new Action<LegalStatus>(this.detach_LegalStatus));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LegStatListID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LegStatListID
		{
			get
			{
				return this._LegStatListID;
			}
			set
			{
				if ((this._LegStatListID != value))
				{
					this.OnLegStatListIDChanging(value);
					this.SendPropertyChanging();
					this._LegStatListID = value;
					this.SendPropertyChanged("LegStatListID");
					this.OnLegStatListIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LegName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LegName
		{
			get
			{
				return this._LegName;
			}
			set
			{
				if ((this._LegName != value))
				{
					this.OnLegNameChanging(value);
					this.SendPropertyChanging();
					this._LegName = value;
					this.SendPropertyChanged("LegName");
					this.OnLegNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LegalStatusList_LegalStatus", Storage="_LegalStatus", ThisKey="LegStatListID", OtherKey="LegSListID")]
		public EntitySet<LegalStatus> LegalStatus
		{
			get
			{
				return this._LegalStatus;
			}
			set
			{
				this._LegalStatus.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LegalStatus(LegalStatus entity)
		{
			this.SendPropertyChanging();
			entity.LegalStatusList = this;
		}
		
		private void detach_LegalStatus(LegalStatus entity)
		{
			this.SendPropertyChanging();
			entity.LegalStatusList = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Organization")]
	public partial class Organization : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrgID;
		
		private EntitySet<Address> _Addresses;
		
		private EntityRef<General> _General;
		
		private EntityRef<LegalStatus> _LegalStatus;
		
		private EntitySet<OrganizationStaff> _OrganizationStaffs;
		
		private EntitySet<OtherFunder> _OtherFunders;
		
		private EntitySet<Project> _Projects;
		
		private EntitySet<Contact> _Contacts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrgIDChanging(int value);
    partial void OnOrgIDChanged();
    #endregion
		
		public Organization()
		{
			this._Addresses = new EntitySet<Address>(new Action<Address>(this.attach_Addresses), new Action<Address>(this.detach_Addresses));
			this._General = default(EntityRef<General>);
			this._LegalStatus = default(EntityRef<LegalStatus>);
			this._OrganizationStaffs = new EntitySet<OrganizationStaff>(new Action<OrganizationStaff>(this.attach_OrganizationStaffs), new Action<OrganizationStaff>(this.detach_OrganizationStaffs));
			this._OtherFunders = new EntitySet<OtherFunder>(new Action<OtherFunder>(this.attach_OtherFunders), new Action<OtherFunder>(this.detach_OtherFunders));
			this._Projects = new EntitySet<Project>(new Action<Project>(this.attach_Projects), new Action<Project>(this.detach_Projects));
			this._Contacts = new EntitySet<Contact>(new Action<Contact>(this.attach_Contacts), new Action<Contact>(this.detach_Contacts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrgID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OrgID
		{
			get
			{
				return this._OrgID;
			}
			set
			{
				if ((this._OrgID != value))
				{
					this.OnOrgIDChanging(value);
					this.SendPropertyChanging();
					this._OrgID = value;
					this.SendPropertyChanged("OrgID");
					this.OnOrgIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_Address", Storage="_Addresses", ThisKey="OrgID", OtherKey="OrgID")]
		public EntitySet<Address> Addresses
		{
			get
			{
				return this._Addresses;
			}
			set
			{
				this._Addresses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_General", Storage="_General", ThisKey="OrgID", OtherKey="OrgID", IsUnique=true, IsForeignKey=false)]
		public General General
		{
			get
			{
				return this._General.Entity;
			}
			set
			{
				General previousValue = this._General.Entity;
				if (((previousValue != value) 
							|| (this._General.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._General.Entity = null;
						previousValue.Organization = null;
					}
					this._General.Entity = value;
					if ((value != null))
					{
						value.Organization = this;
					}
					this.SendPropertyChanged("General");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_LegalStatus", Storage="_LegalStatus", ThisKey="OrgID", OtherKey="OrgID", IsUnique=true, IsForeignKey=false)]
		public LegalStatus LegalStatus
		{
			get
			{
				return this._LegalStatus.Entity;
			}
			set
			{
				LegalStatus previousValue = this._LegalStatus.Entity;
				if (((previousValue != value) 
							|| (this._LegalStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LegalStatus.Entity = null;
						previousValue.Organization = null;
					}
					this._LegalStatus.Entity = value;
					if ((value != null))
					{
						value.Organization = this;
					}
					this.SendPropertyChanged("LegalStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_OrganizationStaff", Storage="_OrganizationStaffs", ThisKey="OrgID", OtherKey="OrgID")]
		public EntitySet<OrganizationStaff> OrganizationStaffs
		{
			get
			{
				return this._OrganizationStaffs;
			}
			set
			{
				this._OrganizationStaffs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_OtherFunder", Storage="_OtherFunders", ThisKey="OrgID", OtherKey="OrgID")]
		public EntitySet<OtherFunder> OtherFunders
		{
			get
			{
				return this._OtherFunders;
			}
			set
			{
				this._OtherFunders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_Project", Storage="_Projects", ThisKey="OrgID", OtherKey="OrgID")]
		public EntitySet<Project> Projects
		{
			get
			{
				return this._Projects;
			}
			set
			{
				this._Projects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_Contact", Storage="_Contacts", ThisKey="OrgID", OtherKey="OrgID")]
		public EntitySet<Contact> Contacts
		{
			get
			{
				return this._Contacts;
			}
			set
			{
				this._Contacts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.Organization = this;
		}
		
		private void detach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.Organization = null;
		}
		
		private void attach_OrganizationStaffs(OrganizationStaff entity)
		{
			this.SendPropertyChanging();
			entity.Organization = this;
		}
		
		private void detach_OrganizationStaffs(OrganizationStaff entity)
		{
			this.SendPropertyChanging();
			entity.Organization = null;
		}
		
		private void attach_OtherFunders(OtherFunder entity)
		{
			this.SendPropertyChanging();
			entity.Organization = this;
		}
		
		private void detach_OtherFunders(OtherFunder entity)
		{
			this.SendPropertyChanging();
			entity.Organization = null;
		}
		
		private void attach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.Organization = this;
		}
		
		private void detach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.Organization = null;
		}
		
		private void attach_Contacts(Contact entity)
		{
			this.SendPropertyChanging();
			entity.Organization = this;
		}
		
		private void detach_Contacts(Contact entity)
		{
			this.SendPropertyChanging();
			entity.Organization = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrganizationStaff")]
	public partial class OrganizationStaff : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StaffID;
		
		private System.Nullable<int> _OrgID;
		
		private System.Nullable<int> _RoleID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _MiddleName;
		
		private EntityRef<Organization> _Organization;
		
		private EntityRef<Role> _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStaffIDChanging(int value);
    partial void OnStaffIDChanged();
    partial void OnOrgIDChanging(System.Nullable<int> value);
    partial void OnOrgIDChanged();
    partial void OnRoleIDChanging(System.Nullable<int> value);
    partial void OnRoleIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnMiddleNameChanging(string value);
    partial void OnMiddleNameChanged();
    #endregion
		
		public OrganizationStaff()
		{
			this._Organization = default(EntityRef<Organization>);
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StaffID
		{
			get
			{
				return this._StaffID;
			}
			set
			{
				if ((this._StaffID != value))
				{
					this.OnStaffIDChanging(value);
					this.SendPropertyChanging();
					this._StaffID = value;
					this.SendPropertyChanged("StaffID");
					this.OnStaffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrgID", DbType="Int")]
		public System.Nullable<int> OrgID
		{
			get
			{
				return this._OrgID;
			}
			set
			{
				if ((this._OrgID != value))
				{
					if (this._Organization.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrgIDChanging(value);
					this.SendPropertyChanging();
					this._OrgID = value;
					this.SendPropertyChanged("OrgID");
					this.OnOrgIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="Int")]
		public System.Nullable<int> RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(50)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(50)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MiddleName", DbType="VarChar(50)")]
		public string MiddleName
		{
			get
			{
				return this._MiddleName;
			}
			set
			{
				if ((this._MiddleName != value))
				{
					this.OnMiddleNameChanging(value);
					this.SendPropertyChanging();
					this._MiddleName = value;
					this.SendPropertyChanged("MiddleName");
					this.OnMiddleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_OrganizationStaff", Storage="_Organization", ThisKey="OrgID", OtherKey="OrgID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Organization Organization
		{
			get
			{
				return this._Organization.Entity;
			}
			set
			{
				Organization previousValue = this._Organization.Entity;
				if (((previousValue != value) 
							|| (this._Organization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organization.Entity = null;
						previousValue.OrganizationStaffs.Remove(this);
					}
					this._Organization.Entity = value;
					if ((value != null))
					{
						value.OrganizationStaffs.Add(this);
						this._OrgID = value.OrgID;
					}
					else
					{
						this._OrgID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Organization");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_OrganizationStaff", Storage="_Role", ThisKey="RoleID", OtherKey="RoleID", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.OrganizationStaffs.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.OrganizationStaffs.Add(this);
						this._RoleID = value.RoleID;
					}
					else
					{
						this._RoleID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OtherFunders")]
	public partial class OtherFunder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OtherFundID;
		
		private System.Nullable<int> _OrgID;
		
		private string _DonorName;
		
		private string _ProjectName;
		
		private System.Nullable<int> _Amount;
		
		private System.Nullable<int> _FundedYear;
		
		private string _ContactPerson;
		
		private EntityRef<Organization> _Organization;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOtherFundIDChanging(int value);
    partial void OnOtherFundIDChanged();
    partial void OnOrgIDChanging(System.Nullable<int> value);
    partial void OnOrgIDChanged();
    partial void OnDonorNameChanging(string value);
    partial void OnDonorNameChanged();
    partial void OnProjectNameChanging(string value);
    partial void OnProjectNameChanged();
    partial void OnAmountChanging(System.Nullable<int> value);
    partial void OnAmountChanged();
    partial void OnFundedYearChanging(System.Nullable<int> value);
    partial void OnFundedYearChanged();
    partial void OnContactPersonChanging(string value);
    partial void OnContactPersonChanged();
    #endregion
		
		public OtherFunder()
		{
			this._Organization = default(EntityRef<Organization>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OtherFundID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OtherFundID
		{
			get
			{
				return this._OtherFundID;
			}
			set
			{
				if ((this._OtherFundID != value))
				{
					this.OnOtherFundIDChanging(value);
					this.SendPropertyChanging();
					this._OtherFundID = value;
					this.SendPropertyChanged("OtherFundID");
					this.OnOtherFundIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrgID", DbType="Int")]
		public System.Nullable<int> OrgID
		{
			get
			{
				return this._OrgID;
			}
			set
			{
				if ((this._OrgID != value))
				{
					if (this._Organization.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrgIDChanging(value);
					this.SendPropertyChanging();
					this._OrgID = value;
					this.SendPropertyChanged("OrgID");
					this.OnOrgIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DonorName", DbType="NVarChar(500)")]
		public string DonorName
		{
			get
			{
				return this._DonorName;
			}
			set
			{
				if ((this._DonorName != value))
				{
					this.OnDonorNameChanging(value);
					this.SendPropertyChanging();
					this._DonorName = value;
					this.SendPropertyChanged("DonorName");
					this.OnDonorNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectName", DbType="NVarChar(500)")]
		public string ProjectName
		{
			get
			{
				return this._ProjectName;
			}
			set
			{
				if ((this._ProjectName != value))
				{
					this.OnProjectNameChanging(value);
					this.SendPropertyChanging();
					this._ProjectName = value;
					this.SendPropertyChanged("ProjectName");
					this.OnProjectNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Int")]
		public System.Nullable<int> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FundedYear", DbType="Int")]
		public System.Nullable<int> FundedYear
		{
			get
			{
				return this._FundedYear;
			}
			set
			{
				if ((this._FundedYear != value))
				{
					this.OnFundedYearChanging(value);
					this.SendPropertyChanging();
					this._FundedYear = value;
					this.SendPropertyChanged("FundedYear");
					this.OnFundedYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactPerson", DbType="NVarChar(500)")]
		public string ContactPerson
		{
			get
			{
				return this._ContactPerson;
			}
			set
			{
				if ((this._ContactPerson != value))
				{
					this.OnContactPersonChanging(value);
					this.SendPropertyChanging();
					this._ContactPerson = value;
					this.SendPropertyChanged("ContactPerson");
					this.OnContactPersonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_OtherFunder", Storage="_Organization", ThisKey="OrgID", OtherKey="OrgID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Organization Organization
		{
			get
			{
				return this._Organization.Entity;
			}
			set
			{
				Organization previousValue = this._Organization.Entity;
				if (((previousValue != value) 
							|| (this._Organization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organization.Entity = null;
						previousValue.OtherFunders.Remove(this);
					}
					this._Organization.Entity = value;
					if ((value != null))
					{
						value.OtherFunders.Add(this);
						this._OrgID = value.OrgID;
					}
					else
					{
						this._OrgID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Organization");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Permission")]
	public partial class Permission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PermissionID;
		
		private string _PermissionName;
		
		private System.Nullable<int> _PermissionType;
		
		private EntitySet<Permission1> _Permission1s;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPermissionIDChanging(int value);
    partial void OnPermissionIDChanged();
    partial void OnPermissionNameChanging(string value);
    partial void OnPermissionNameChanged();
    partial void OnPermissionTypeChanging(System.Nullable<int> value);
    partial void OnPermissionTypeChanged();
    #endregion
		
		public Permission()
		{
			this._Permission1s = new EntitySet<Permission1>(new Action<Permission1>(this.attach_Permission1s), new Action<Permission1>(this.detach_Permission1s));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermissionID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PermissionID
		{
			get
			{
				return this._PermissionID;
			}
			set
			{
				if ((this._PermissionID != value))
				{
					this.OnPermissionIDChanging(value);
					this.SendPropertyChanging();
					this._PermissionID = value;
					this.SendPropertyChanged("PermissionID");
					this.OnPermissionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermissionName", DbType="VarChar(50)")]
		public string PermissionName
		{
			get
			{
				return this._PermissionName;
			}
			set
			{
				if ((this._PermissionName != value))
				{
					this.OnPermissionNameChanging(value);
					this.SendPropertyChanging();
					this._PermissionName = value;
					this.SendPropertyChanged("PermissionName");
					this.OnPermissionNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermissionType", DbType="Int")]
		public System.Nullable<int> PermissionType
		{
			get
			{
				return this._PermissionType;
			}
			set
			{
				if ((this._PermissionType != value))
				{
					this.OnPermissionTypeChanging(value);
					this.SendPropertyChanging();
					this._PermissionType = value;
					this.SendPropertyChanged("PermissionType");
					this.OnPermissionTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Permission_Permission1", Storage="_Permission1s", ThisKey="PermissionID", OtherKey="PermissionID")]
		public EntitySet<Permission1> Permission1s
		{
			get
			{
				return this._Permission1s;
			}
			set
			{
				this._Permission1s.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Permission1s(Permission1 entity)
		{
			this.SendPropertyChanging();
			entity.Permission = this;
		}
		
		private void detach_Permission1s(Permission1 entity)
		{
			this.SendPropertyChanging();
			entity.Permission = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Permissions")]
	public partial class Permission1 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoleID;
		
		private int _PermissionID;
		
		private EntityRef<Permission> _Permission;
		
		private EntityRef<RolesSSPStaff> _RolesSSPStaff;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    partial void OnPermissionIDChanging(int value);
    partial void OnPermissionIDChanged();
    #endregion
		
		public Permission1()
		{
			this._Permission = default(EntityRef<Permission>);
			this._RolesSSPStaff = default(EntityRef<RolesSSPStaff>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._RolesSSPStaff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermissionID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PermissionID
		{
			get
			{
				return this._PermissionID;
			}
			set
			{
				if ((this._PermissionID != value))
				{
					if (this._Permission.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPermissionIDChanging(value);
					this.SendPropertyChanging();
					this._PermissionID = value;
					this.SendPropertyChanged("PermissionID");
					this.OnPermissionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Permission_Permission1", Storage="_Permission", ThisKey="PermissionID", OtherKey="PermissionID", IsForeignKey=true)]
		public Permission Permission
		{
			get
			{
				return this._Permission.Entity;
			}
			set
			{
				Permission previousValue = this._Permission.Entity;
				if (((previousValue != value) 
							|| (this._Permission.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Permission.Entity = null;
						previousValue.Permission1s.Remove(this);
					}
					this._Permission.Entity = value;
					if ((value != null))
					{
						value.Permission1s.Add(this);
						this._PermissionID = value.PermissionID;
					}
					else
					{
						this._PermissionID = default(int);
					}
					this.SendPropertyChanged("Permission");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RolesSSPStaff_Permission1", Storage="_RolesSSPStaff", ThisKey="RoleID", OtherKey="RoleID", IsForeignKey=true)]
		public RolesSSPStaff RolesSSPStaff
		{
			get
			{
				return this._RolesSSPStaff.Entity;
			}
			set
			{
				RolesSSPStaff previousValue = this._RolesSSPStaff.Entity;
				if (((previousValue != value) 
							|| (this._RolesSSPStaff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RolesSSPStaff.Entity = null;
						previousValue.Permission1s.Remove(this);
					}
					this._RolesSSPStaff.Entity = value;
					if ((value != null))
					{
						value.Permission1s.Add(this);
						this._RoleID = value.RoleID;
					}
					else
					{
						this._RoleID = default(int);
					}
					this.SendPropertyChanged("RolesSSPStaff");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProgramArea")]
	public partial class ProgramArea : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<int> _ProgramAreaCodeID;
		
		private int _ProjectID;
		
		private System.Nullable<System.DateTime> _SelectedDate;
		
		private EntityRef<ProgramAreaList> _ProgramAreaList;
		
		private EntityRef<Project> _Project;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProgramAreaCodeIDChanging(System.Nullable<int> value);
    partial void OnProgramAreaCodeIDChanged();
    partial void OnProjectIDChanging(int value);
    partial void OnProjectIDChanged();
    partial void OnSelectedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnSelectedDateChanged();
    #endregion
		
		public ProgramArea()
		{
			this._ProgramAreaList = default(EntityRef<ProgramAreaList>);
			this._Project = default(EntityRef<Project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProgramAreaCodeID", DbType="Int")]
		public System.Nullable<int> ProgramAreaCodeID
		{
			get
			{
				return this._ProgramAreaCodeID;
			}
			set
			{
				if ((this._ProgramAreaCodeID != value))
				{
					if (this._ProgramAreaList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProgramAreaCodeIDChanging(value);
					this.SendPropertyChanging();
					this._ProgramAreaCodeID = value;
					this.SendPropertyChanged("ProgramAreaCodeID");
					this.OnProgramAreaCodeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SelectedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> SelectedDate
		{
			get
			{
				return this._SelectedDate;
			}
			set
			{
				if ((this._SelectedDate != value))
				{
					this.OnSelectedDateChanging(value);
					this.SendPropertyChanging();
					this._SelectedDate = value;
					this.SendPropertyChanged("SelectedDate");
					this.OnSelectedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProgramAreaList_ProgramArea", Storage="_ProgramAreaList", ThisKey="ProgramAreaCodeID", OtherKey="ProgramAreaCodeID", IsForeignKey=true)]
		public ProgramAreaList ProgramAreaList
		{
			get
			{
				return this._ProgramAreaList.Entity;
			}
			set
			{
				ProgramAreaList previousValue = this._ProgramAreaList.Entity;
				if (((previousValue != value) 
							|| (this._ProgramAreaList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProgramAreaList.Entity = null;
						previousValue.ProgramAreas.Remove(this);
					}
					this._ProgramAreaList.Entity = value;
					if ((value != null))
					{
						value.ProgramAreas.Add(this);
						this._ProgramAreaCodeID = value.ProgramAreaCodeID;
					}
					else
					{
						this._ProgramAreaCodeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProgramAreaList");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProgramArea", Storage="_Project", ThisKey="ProjectID", OtherKey="ProjectID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.ProgramArea = null;
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.ProgramArea = this;
						this._ProjectID = value.ProjectID;
					}
					else
					{
						this._ProjectID = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProgramAreaList")]
	public partial class ProgramAreaList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProgramAreaCodeID;
		
		private string _ProgramAreaText;
		
		private EntitySet<ProgramArea> _ProgramAreas;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProgramAreaCodeIDChanging(int value);
    partial void OnProgramAreaCodeIDChanged();
    partial void OnProgramAreaTextChanging(string value);
    partial void OnProgramAreaTextChanged();
    #endregion
		
		public ProgramAreaList()
		{
			this._ProgramAreas = new EntitySet<ProgramArea>(new Action<ProgramArea>(this.attach_ProgramAreas), new Action<ProgramArea>(this.detach_ProgramAreas));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProgramAreaCodeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProgramAreaCodeID
		{
			get
			{
				return this._ProgramAreaCodeID;
			}
			set
			{
				if ((this._ProgramAreaCodeID != value))
				{
					this.OnProgramAreaCodeIDChanging(value);
					this.SendPropertyChanging();
					this._ProgramAreaCodeID = value;
					this.SendPropertyChanged("ProgramAreaCodeID");
					this.OnProgramAreaCodeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProgramAreaText", DbType="VarChar(50)")]
		public string ProgramAreaText
		{
			get
			{
				return this._ProgramAreaText;
			}
			set
			{
				if ((this._ProgramAreaText != value))
				{
					this.OnProgramAreaTextChanging(value);
					this.SendPropertyChanging();
					this._ProgramAreaText = value;
					this.SendPropertyChanged("ProgramAreaText");
					this.OnProgramAreaTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProgramAreaList_ProgramArea", Storage="_ProgramAreas", ThisKey="ProgramAreaCodeID", OtherKey="ProgramAreaCodeID")]
		public EntitySet<ProgramArea> ProgramAreas
		{
			get
			{
				return this._ProgramAreas;
			}
			set
			{
				this._ProgramAreas.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProgramAreas(ProgramArea entity)
		{
			this.SendPropertyChanging();
			entity.ProgramAreaList = this;
		}
		
		private void detach_ProgramAreas(ProgramArea entity)
		{
			this.SendPropertyChanging();
			entity.ProgramAreaList = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProjectEvent")]
	public partial class ProjectEvent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EventID;
		
		private int _ProjectID;
		
		private System.Nullable<int> _EventTypeID;
		
		private System.Nullable<int> _EventStatus;
		
		private string _EventDescription;
		
		private System.Nullable<bool> _SSPOrGrantee;
		
		private System.Nullable<int> _EventHolderID;
		
		private System.Nullable<System.DateTime> _ScheduledDate;
		
		private System.Nullable<System.DateTime> _CompletedDate;
		
		private System.Nullable<int> _ReportPeriodID;
		
		private System.Nullable<int> _ReportStatus;
		
		private EntitySet<ProjectEventDoc> _ProjectEventDocs;
		
		private EntityRef<EventType> _EventType;
		
		private EntityRef<Project> _Project;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventIDChanging(int value);
    partial void OnEventIDChanged();
    partial void OnProjectIDChanging(int value);
    partial void OnProjectIDChanged();
    partial void OnEventTypeIDChanging(System.Nullable<int> value);
    partial void OnEventTypeIDChanged();
    partial void OnEventStatusChanging(System.Nullable<int> value);
    partial void OnEventStatusChanged();
    partial void OnEventDescriptionChanging(string value);
    partial void OnEventDescriptionChanged();
    partial void OnSSPOrGranteeChanging(System.Nullable<bool> value);
    partial void OnSSPOrGranteeChanged();
    partial void OnEventHolderIDChanging(System.Nullable<int> value);
    partial void OnEventHolderIDChanged();
    partial void OnScheduledDateChanging(System.Nullable<System.DateTime> value);
    partial void OnScheduledDateChanged();
    partial void OnCompletedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCompletedDateChanged();
    partial void OnReportPeriodIDChanging(System.Nullable<int> value);
    partial void OnReportPeriodIDChanged();
    partial void OnReportStatusChanging(System.Nullable<int> value);
    partial void OnReportStatusChanged();
    #endregion
		
		public ProjectEvent()
		{
			this._ProjectEventDocs = new EntitySet<ProjectEventDoc>(new Action<ProjectEventDoc>(this.attach_ProjectEventDocs), new Action<ProjectEventDoc>(this.detach_ProjectEventDocs));
			this._EventType = default(EntityRef<EventType>);
			this._Project = default(EntityRef<Project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					this.OnEventIDChanging(value);
					this.SendPropertyChanging();
					this._EventID = value;
					this.SendPropertyChanged("EventID");
					this.OnEventIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int NOT NULL")]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventTypeID", DbType="Int")]
		public System.Nullable<int> EventTypeID
		{
			get
			{
				return this._EventTypeID;
			}
			set
			{
				if ((this._EventTypeID != value))
				{
					if (this._EventType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventTypeIDChanging(value);
					this.SendPropertyChanging();
					this._EventTypeID = value;
					this.SendPropertyChanged("EventTypeID");
					this.OnEventTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventStatus", DbType="Int")]
		public System.Nullable<int> EventStatus
		{
			get
			{
				return this._EventStatus;
			}
			set
			{
				if ((this._EventStatus != value))
				{
					this.OnEventStatusChanging(value);
					this.SendPropertyChanging();
					this._EventStatus = value;
					this.SendPropertyChanged("EventStatus");
					this.OnEventStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventDescription", DbType="NVarChar(3000)")]
		public string EventDescription
		{
			get
			{
				return this._EventDescription;
			}
			set
			{
				if ((this._EventDescription != value))
				{
					this.OnEventDescriptionChanging(value);
					this.SendPropertyChanging();
					this._EventDescription = value;
					this.SendPropertyChanged("EventDescription");
					this.OnEventDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SSPOrGrantee", DbType="Bit")]
		public System.Nullable<bool> SSPOrGrantee
		{
			get
			{
				return this._SSPOrGrantee;
			}
			set
			{
				if ((this._SSPOrGrantee != value))
				{
					this.OnSSPOrGranteeChanging(value);
					this.SendPropertyChanging();
					this._SSPOrGrantee = value;
					this.SendPropertyChanged("SSPOrGrantee");
					this.OnSSPOrGranteeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventHolderID", DbType="Int")]
		public System.Nullable<int> EventHolderID
		{
			get
			{
				return this._EventHolderID;
			}
			set
			{
				if ((this._EventHolderID != value))
				{
					this.OnEventHolderIDChanging(value);
					this.SendPropertyChanging();
					this._EventHolderID = value;
					this.SendPropertyChanged("EventHolderID");
					this.OnEventHolderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScheduledDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ScheduledDate
		{
			get
			{
				return this._ScheduledDate;
			}
			set
			{
				if ((this._ScheduledDate != value))
				{
					this.OnScheduledDateChanging(value);
					this.SendPropertyChanging();
					this._ScheduledDate = value;
					this.SendPropertyChanged("ScheduledDate");
					this.OnScheduledDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompletedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CompletedDate
		{
			get
			{
				return this._CompletedDate;
			}
			set
			{
				if ((this._CompletedDate != value))
				{
					this.OnCompletedDateChanging(value);
					this.SendPropertyChanging();
					this._CompletedDate = value;
					this.SendPropertyChanged("CompletedDate");
					this.OnCompletedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportPeriodID", DbType="Int")]
		public System.Nullable<int> ReportPeriodID
		{
			get
			{
				return this._ReportPeriodID;
			}
			set
			{
				if ((this._ReportPeriodID != value))
				{
					this.OnReportPeriodIDChanging(value);
					this.SendPropertyChanging();
					this._ReportPeriodID = value;
					this.SendPropertyChanged("ReportPeriodID");
					this.OnReportPeriodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportStatus", DbType="Int")]
		public System.Nullable<int> ReportStatus
		{
			get
			{
				return this._ReportStatus;
			}
			set
			{
				if ((this._ReportStatus != value))
				{
					this.OnReportStatusChanging(value);
					this.SendPropertyChanging();
					this._ReportStatus = value;
					this.SendPropertyChanged("ReportStatus");
					this.OnReportStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectEvent_ProjectEventDoc", Storage="_ProjectEventDocs", ThisKey="EventID", OtherKey="EventID")]
		public EntitySet<ProjectEventDoc> ProjectEventDocs
		{
			get
			{
				return this._ProjectEventDocs;
			}
			set
			{
				this._ProjectEventDocs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EventType_ProjectEvent", Storage="_EventType", ThisKey="EventTypeID", OtherKey="EventTypeID", IsForeignKey=true, DeleteRule="CASCADE")]
		public EventType EventType
		{
			get
			{
				return this._EventType.Entity;
			}
			set
			{
				EventType previousValue = this._EventType.Entity;
				if (((previousValue != value) 
							|| (this._EventType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EventType.Entity = null;
						previousValue.ProjectEvents.Remove(this);
					}
					this._EventType.Entity = value;
					if ((value != null))
					{
						value.ProjectEvents.Add(this);
						this._EventTypeID = value.EventTypeID;
					}
					else
					{
						this._EventTypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("EventType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjectEvent", Storage="_Project", ThisKey="ProjectID", OtherKey="ProjectID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.ProjectEvents.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.ProjectEvents.Add(this);
						this._ProjectID = value.ProjectID;
					}
					else
					{
						this._ProjectID = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProjectEventDocs(ProjectEventDoc entity)
		{
			this.SendPropertyChanging();
			entity.ProjectEvent = this;
		}
		
		private void detach_ProjectEventDocs(ProjectEventDoc entity)
		{
			this.SendPropertyChanging();
			entity.ProjectEvent = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProjectEventDocs")]
	public partial class ProjectEventDoc : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EventID;
		
		private int _ProjectEventDocumentID;
		
		private EntityRef<ProjectEvent> _ProjectEvent;
		
		private EntityRef<ProjectEventDocument> _ProjectEventDocument;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventIDChanging(int value);
    partial void OnEventIDChanged();
    partial void OnProjectEventDocumentIDChanging(int value);
    partial void OnProjectEventDocumentIDChanged();
    #endregion
		
		public ProjectEventDoc()
		{
			this._ProjectEvent = default(EntityRef<ProjectEvent>);
			this._ProjectEventDocument = default(EntityRef<ProjectEventDocument>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					if (this._ProjectEvent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventIDChanging(value);
					this.SendPropertyChanging();
					this._EventID = value;
					this.SendPropertyChanged("EventID");
					this.OnEventIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectEventDocumentID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProjectEventDocumentID
		{
			get
			{
				return this._ProjectEventDocumentID;
			}
			set
			{
				if ((this._ProjectEventDocumentID != value))
				{
					if (this._ProjectEventDocument.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectEventDocumentIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectEventDocumentID = value;
					this.SendPropertyChanged("ProjectEventDocumentID");
					this.OnProjectEventDocumentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectEvent_ProjectEventDoc", Storage="_ProjectEvent", ThisKey="EventID", OtherKey="EventID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ProjectEvent ProjectEvent
		{
			get
			{
				return this._ProjectEvent.Entity;
			}
			set
			{
				ProjectEvent previousValue = this._ProjectEvent.Entity;
				if (((previousValue != value) 
							|| (this._ProjectEvent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectEvent.Entity = null;
						previousValue.ProjectEventDocs.Remove(this);
					}
					this._ProjectEvent.Entity = value;
					if ((value != null))
					{
						value.ProjectEventDocs.Add(this);
						this._EventID = value.EventID;
					}
					else
					{
						this._EventID = default(int);
					}
					this.SendPropertyChanged("ProjectEvent");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectEventDocument_ProjectEventDoc", Storage="_ProjectEventDocument", ThisKey="ProjectEventDocumentID", OtherKey="ProjectEventDocumentID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ProjectEventDocument ProjectEventDocument
		{
			get
			{
				return this._ProjectEventDocument.Entity;
			}
			set
			{
				ProjectEventDocument previousValue = this._ProjectEventDocument.Entity;
				if (((previousValue != value) 
							|| (this._ProjectEventDocument.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectEventDocument.Entity = null;
						previousValue.ProjectEventDocs.Remove(this);
					}
					this._ProjectEventDocument.Entity = value;
					if ((value != null))
					{
						value.ProjectEventDocs.Add(this);
						this._ProjectEventDocumentID = value.ProjectEventDocumentID;
					}
					else
					{
						this._ProjectEventDocumentID = default(int);
					}
					this.SendPropertyChanged("ProjectEventDocument");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProjectEventDocument")]
	public partial class ProjectEventDocument : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProjectEventDocumentID;
		
		private string _FileName;
		
		private string _PhysicalVirtualPath;
		
		private string _PhysicalAbsolutePath;
		
		private string _WebVirtualPath;
		
		private string _WebAbsolutePath;
		
		private string _fileextension;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<System.DateTime> _UpdatedDate;
		
		private string _Author;
		
		private string _TemplateName;
		
		private EntitySet<ProjectEventDoc> _ProjectEventDocs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProjectEventDocumentIDChanging(int value);
    partial void OnProjectEventDocumentIDChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnPhysicalVirtualPathChanging(string value);
    partial void OnPhysicalVirtualPathChanged();
    partial void OnPhysicalAbsolutePathChanging(string value);
    partial void OnPhysicalAbsolutePathChanged();
    partial void OnWebVirtualPathChanging(string value);
    partial void OnWebVirtualPathChanged();
    partial void OnWebAbsolutePathChanging(string value);
    partial void OnWebAbsolutePathChanged();
    partial void OnfileextensionChanging(string value);
    partial void OnfileextensionChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnUpdatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedDateChanged();
    partial void OnAuthorChanging(string value);
    partial void OnAuthorChanged();
    partial void OnTemplateNameChanging(string value);
    partial void OnTemplateNameChanged();
    #endregion
		
		public ProjectEventDocument()
		{
			this._ProjectEventDocs = new EntitySet<ProjectEventDoc>(new Action<ProjectEventDoc>(this.attach_ProjectEventDocs), new Action<ProjectEventDoc>(this.detach_ProjectEventDocs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectEventDocumentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProjectEventDocumentID
		{
			get
			{
				return this._ProjectEventDocumentID;
			}
			set
			{
				if ((this._ProjectEventDocumentID != value))
				{
					this.OnProjectEventDocumentIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectEventDocumentID = value;
					this.SendPropertyChanged("ProjectEventDocumentID");
					this.OnProjectEventDocumentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileName", DbType="NVarChar(200)")]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhysicalVirtualPath", DbType="NVarChar(400)")]
		public string PhysicalVirtualPath
		{
			get
			{
				return this._PhysicalVirtualPath;
			}
			set
			{
				if ((this._PhysicalVirtualPath != value))
				{
					this.OnPhysicalVirtualPathChanging(value);
					this.SendPropertyChanging();
					this._PhysicalVirtualPath = value;
					this.SendPropertyChanged("PhysicalVirtualPath");
					this.OnPhysicalVirtualPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhysicalAbsolutePath", DbType="NVarChar(500)")]
		public string PhysicalAbsolutePath
		{
			get
			{
				return this._PhysicalAbsolutePath;
			}
			set
			{
				if ((this._PhysicalAbsolutePath != value))
				{
					this.OnPhysicalAbsolutePathChanging(value);
					this.SendPropertyChanging();
					this._PhysicalAbsolutePath = value;
					this.SendPropertyChanged("PhysicalAbsolutePath");
					this.OnPhysicalAbsolutePathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WebVirtualPath", DbType="NVarChar(400)")]
		public string WebVirtualPath
		{
			get
			{
				return this._WebVirtualPath;
			}
			set
			{
				if ((this._WebVirtualPath != value))
				{
					this.OnWebVirtualPathChanging(value);
					this.SendPropertyChanging();
					this._WebVirtualPath = value;
					this.SendPropertyChanged("WebVirtualPath");
					this.OnWebVirtualPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WebAbsolutePath", DbType="NVarChar(500)")]
		public string WebAbsolutePath
		{
			get
			{
				return this._WebAbsolutePath;
			}
			set
			{
				if ((this._WebAbsolutePath != value))
				{
					this.OnWebAbsolutePathChanging(value);
					this.SendPropertyChanging();
					this._WebAbsolutePath = value;
					this.SendPropertyChanged("WebAbsolutePath");
					this.OnWebAbsolutePathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fileextension", DbType="VarChar(50)")]
		public string fileextension
		{
			get
			{
				return this._fileextension;
			}
			set
			{
				if ((this._fileextension != value))
				{
					this.OnfileextensionChanging(value);
					this.SendPropertyChanging();
					this._fileextension = value;
					this.SendPropertyChanged("fileextension");
					this.OnfileextensionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedDate
		{
			get
			{
				return this._UpdatedDate;
			}
			set
			{
				if ((this._UpdatedDate != value))
				{
					this.OnUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._UpdatedDate = value;
					this.SendPropertyChanged("UpdatedDate");
					this.OnUpdatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Author", DbType="NVarChar(100)")]
		public string Author
		{
			get
			{
				return this._Author;
			}
			set
			{
				if ((this._Author != value))
				{
					this.OnAuthorChanging(value);
					this.SendPropertyChanging();
					this._Author = value;
					this.SendPropertyChanged("Author");
					this.OnAuthorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TemplateName", DbType="NVarChar(200)")]
		public string TemplateName
		{
			get
			{
				return this._TemplateName;
			}
			set
			{
				if ((this._TemplateName != value))
				{
					this.OnTemplateNameChanging(value);
					this.SendPropertyChanging();
					this._TemplateName = value;
					this.SendPropertyChanged("TemplateName");
					this.OnTemplateNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectEventDocument_ProjectEventDoc", Storage="_ProjectEventDocs", ThisKey="ProjectEventDocumentID", OtherKey="ProjectEventDocumentID")]
		public EntitySet<ProjectEventDoc> ProjectEventDocs
		{
			get
			{
				return this._ProjectEventDocs;
			}
			set
			{
				this._ProjectEventDocs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProjectEventDocs(ProjectEventDoc entity)
		{
			this.SendPropertyChanging();
			entity.ProjectEventDocument = this;
		}
		
		private void detach_ProjectEventDocs(ProjectEventDoc entity)
		{
			this.SendPropertyChanging();
			entity.ProjectEventDocument = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProjectInfo")]
	public partial class ProjectInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProjectInfoID;
		
		private System.Nullable<decimal> _AmtRequested;
		
		private System.Nullable<decimal> _AwardedAmt;
		
		private System.Nullable<System.DateTime> _AcceptedDate;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private System.Nullable<System.DateTime> _ClosedDate;
		
		private EntityRef<Project> _Project;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProjectInfoIDChanging(int value);
    partial void OnProjectInfoIDChanged();
    partial void OnAmtRequestedChanging(System.Nullable<decimal> value);
    partial void OnAmtRequestedChanged();
    partial void OnAwardedAmtChanging(System.Nullable<decimal> value);
    partial void OnAwardedAmtChanged();
    partial void OnAcceptedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAcceptedDateChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnClosedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnClosedDateChanged();
    #endregion
		
		public ProjectInfo()
		{
			this._Project = default(EntityRef<Project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectInfoID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProjectInfoID
		{
			get
			{
				return this._ProjectInfoID;
			}
			set
			{
				if ((this._ProjectInfoID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectInfoIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectInfoID = value;
					this.SendPropertyChanged("ProjectInfoID");
					this.OnProjectInfoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmtRequested", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> AmtRequested
		{
			get
			{
				return this._AmtRequested;
			}
			set
			{
				if ((this._AmtRequested != value))
				{
					this.OnAmtRequestedChanging(value);
					this.SendPropertyChanging();
					this._AmtRequested = value;
					this.SendPropertyChanged("AmtRequested");
					this.OnAmtRequestedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AwardedAmt", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> AwardedAmt
		{
			get
			{
				return this._AwardedAmt;
			}
			set
			{
				if ((this._AwardedAmt != value))
				{
					this.OnAwardedAmtChanging(value);
					this.SendPropertyChanging();
					this._AwardedAmt = value;
					this.SendPropertyChanged("AwardedAmt");
					this.OnAwardedAmtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AcceptedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> AcceptedDate
		{
			get
			{
				return this._AcceptedDate;
			}
			set
			{
				if ((this._AcceptedDate != value))
				{
					this.OnAcceptedDateChanging(value);
					this.SendPropertyChanging();
					this._AcceptedDate = value;
					this.SendPropertyChanged("AcceptedDate");
					this.OnAcceptedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClosedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ClosedDate
		{
			get
			{
				return this._ClosedDate;
			}
			set
			{
				if ((this._ClosedDate != value))
				{
					this.OnClosedDateChanging(value);
					this.SendPropertyChanging();
					this._ClosedDate = value;
					this.SendPropertyChanged("ClosedDate");
					this.OnClosedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjectInfo", Storage="_Project", ThisKey="ProjectInfoID", OtherKey="ProjectID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.ProjectInfo = null;
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.ProjectInfo = this;
						this._ProjectInfoID = value.ProjectID;
					}
					else
					{
						this._ProjectInfoID = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Projects")]
	public partial class Project : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProjectID;
		
		private System.Nullable<int> _OrgID;
		
		private string _Label;
		
		private System.Nullable<bool> _isDeleted;
		
		private EntityRef<BankInfo> _BankInfo;
		
		private EntityRef<Budget> _Budget;
		
		private EntityRef<CompetitionCode> _CompetitionCode;
		
		private EntitySet<FundingSource> _FundingSources;
		
		private EntityRef<GrantType> _GrantType;
		
		private EntityRef<Indicator> _Indicator;
		
		private EntityRef<ProgramArea> _ProgramArea;
		
		private EntitySet<ProjectEvent> _ProjectEvents;
		
		private EntityRef<ProjectInfo> _ProjectInfo;
		
		private EntityRef<ProjLocation> _ProjLocation;
		
		private EntityRef<ProposalInfo> _ProposalInfo;
		
		private EntityRef<ProposalStatus> _ProposalStatus;
		
		private EntitySet<SSPStaffProject> _SSPStaffProjects;
		
		private EntitySet<TheKey> _TheKeys;
		
		private EntityRef<OutComeStatement> _OutComeStatement;
		
		private EntityRef<LFIndicator> _LFIndicator;
		
		private EntityRef<Organization> _Organization;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProjectIDChanging(int value);
    partial void OnProjectIDChanged();
    partial void OnOrgIDChanging(System.Nullable<int> value);
    partial void OnOrgIDChanged();
    partial void OnLabelChanging(string value);
    partial void OnLabelChanged();
    partial void OnisDeletedChanging(System.Nullable<bool> value);
    partial void OnisDeletedChanged();
    #endregion
		
		public Project()
		{
			this._BankInfo = default(EntityRef<BankInfo>);
			this._Budget = default(EntityRef<Budget>);
			this._CompetitionCode = default(EntityRef<CompetitionCode>);
			this._FundingSources = new EntitySet<FundingSource>(new Action<FundingSource>(this.attach_FundingSources), new Action<FundingSource>(this.detach_FundingSources));
			this._GrantType = default(EntityRef<GrantType>);
			this._Indicator = default(EntityRef<Indicator>);
			this._ProgramArea = default(EntityRef<ProgramArea>);
			this._ProjectEvents = new EntitySet<ProjectEvent>(new Action<ProjectEvent>(this.attach_ProjectEvents), new Action<ProjectEvent>(this.detach_ProjectEvents));
			this._ProjectInfo = default(EntityRef<ProjectInfo>);
			this._ProjLocation = default(EntityRef<ProjLocation>);
			this._ProposalInfo = default(EntityRef<ProposalInfo>);
			this._ProposalStatus = default(EntityRef<ProposalStatus>);
			this._SSPStaffProjects = new EntitySet<SSPStaffProject>(new Action<SSPStaffProject>(this.attach_SSPStaffProjects), new Action<SSPStaffProject>(this.detach_SSPStaffProjects));
			this._TheKeys = new EntitySet<TheKey>(new Action<TheKey>(this.attach_TheKeys), new Action<TheKey>(this.detach_TheKeys));
			this._OutComeStatement = default(EntityRef<OutComeStatement>);
			this._LFIndicator = default(EntityRef<LFIndicator>);
			this._Organization = default(EntityRef<Organization>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrgID", DbType="Int")]
		public System.Nullable<int> OrgID
		{
			get
			{
				return this._OrgID;
			}
			set
			{
				if ((this._OrgID != value))
				{
					if (this._Organization.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrgIDChanging(value);
					this.SendPropertyChanging();
					this._OrgID = value;
					this.SendPropertyChanged("OrgID");
					this.OnOrgIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Label", DbType="NVarChar(100)")]
		public string Label
		{
			get
			{
				return this._Label;
			}
			set
			{
				if ((this._Label != value))
				{
					this.OnLabelChanging(value);
					this.SendPropertyChanging();
					this._Label = value;
					this.SendPropertyChanged("Label");
					this.OnLabelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isDeleted", DbType="Bit")]
		public System.Nullable<bool> isDeleted
		{
			get
			{
				return this._isDeleted;
			}
			set
			{
				if ((this._isDeleted != value))
				{
					this.OnisDeletedChanging(value);
					this.SendPropertyChanging();
					this._isDeleted = value;
					this.SendPropertyChanged("isDeleted");
					this.OnisDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_BankInfo", Storage="_BankInfo", ThisKey="ProjectID", OtherKey="BankInfoID", IsUnique=true, IsForeignKey=false)]
		public BankInfo BankInfo
		{
			get
			{
				return this._BankInfo.Entity;
			}
			set
			{
				BankInfo previousValue = this._BankInfo.Entity;
				if (((previousValue != value) 
							|| (this._BankInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BankInfo.Entity = null;
						previousValue.Project = null;
					}
					this._BankInfo.Entity = value;
					if ((value != null))
					{
						value.Project = this;
					}
					this.SendPropertyChanged("BankInfo");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Budget", Storage="_Budget", ThisKey="ProjectID", OtherKey="BudgetID", IsUnique=true, IsForeignKey=false)]
		public Budget Budget
		{
			get
			{
				return this._Budget.Entity;
			}
			set
			{
				Budget previousValue = this._Budget.Entity;
				if (((previousValue != value) 
							|| (this._Budget.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Budget.Entity = null;
						previousValue.Project = null;
					}
					this._Budget.Entity = value;
					if ((value != null))
					{
						value.Project = this;
					}
					this.SendPropertyChanged("Budget");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_CompetitionCode", Storage="_CompetitionCode", ThisKey="ProjectID", OtherKey="ProjectID", IsUnique=true, IsForeignKey=false)]
		public CompetitionCode CompetitionCode
		{
			get
			{
				return this._CompetitionCode.Entity;
			}
			set
			{
				CompetitionCode previousValue = this._CompetitionCode.Entity;
				if (((previousValue != value) 
							|| (this._CompetitionCode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CompetitionCode.Entity = null;
						previousValue.Project = null;
					}
					this._CompetitionCode.Entity = value;
					if ((value != null))
					{
						value.Project = this;
					}
					this.SendPropertyChanged("CompetitionCode");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_FundingSource", Storage="_FundingSources", ThisKey="ProjectID", OtherKey="ProjectID")]
		public EntitySet<FundingSource> FundingSources
		{
			get
			{
				return this._FundingSources;
			}
			set
			{
				this._FundingSources.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_GrantType", Storage="_GrantType", ThisKey="ProjectID", OtherKey="ProjectID", IsUnique=true, IsForeignKey=false)]
		public GrantType GrantType
		{
			get
			{
				return this._GrantType.Entity;
			}
			set
			{
				GrantType previousValue = this._GrantType.Entity;
				if (((previousValue != value) 
							|| (this._GrantType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GrantType.Entity = null;
						previousValue.Project = null;
					}
					this._GrantType.Entity = value;
					if ((value != null))
					{
						value.Project = this;
					}
					this.SendPropertyChanged("GrantType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Indicator", Storage="_Indicator", ThisKey="ProjectID", OtherKey="IndicatorID", IsUnique=true, IsForeignKey=false)]
		public Indicator Indicator
		{
			get
			{
				return this._Indicator.Entity;
			}
			set
			{
				Indicator previousValue = this._Indicator.Entity;
				if (((previousValue != value) 
							|| (this._Indicator.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Indicator.Entity = null;
						previousValue.Project = null;
					}
					this._Indicator.Entity = value;
					if ((value != null))
					{
						value.Project = this;
					}
					this.SendPropertyChanged("Indicator");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProgramArea", Storage="_ProgramArea", ThisKey="ProjectID", OtherKey="ProjectID", IsUnique=true, IsForeignKey=false)]
		public ProgramArea ProgramArea
		{
			get
			{
				return this._ProgramArea.Entity;
			}
			set
			{
				ProgramArea previousValue = this._ProgramArea.Entity;
				if (((previousValue != value) 
							|| (this._ProgramArea.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProgramArea.Entity = null;
						previousValue.Project = null;
					}
					this._ProgramArea.Entity = value;
					if ((value != null))
					{
						value.Project = this;
					}
					this.SendPropertyChanged("ProgramArea");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjectEvent", Storage="_ProjectEvents", ThisKey="ProjectID", OtherKey="ProjectID")]
		public EntitySet<ProjectEvent> ProjectEvents
		{
			get
			{
				return this._ProjectEvents;
			}
			set
			{
				this._ProjectEvents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjectInfo", Storage="_ProjectInfo", ThisKey="ProjectID", OtherKey="ProjectInfoID", IsUnique=true, IsForeignKey=false)]
		public ProjectInfo ProjectInfo
		{
			get
			{
				return this._ProjectInfo.Entity;
			}
			set
			{
				ProjectInfo previousValue = this._ProjectInfo.Entity;
				if (((previousValue != value) 
							|| (this._ProjectInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectInfo.Entity = null;
						previousValue.Project = null;
					}
					this._ProjectInfo.Entity = value;
					if ((value != null))
					{
						value.Project = this;
					}
					this.SendPropertyChanged("ProjectInfo");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjLocation", Storage="_ProjLocation", ThisKey="ProjectID", OtherKey="ProjectID", IsUnique=true, IsForeignKey=false)]
		public ProjLocation ProjLocation
		{
			get
			{
				return this._ProjLocation.Entity;
			}
			set
			{
				ProjLocation previousValue = this._ProjLocation.Entity;
				if (((previousValue != value) 
							|| (this._ProjLocation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjLocation.Entity = null;
						previousValue.Project = null;
					}
					this._ProjLocation.Entity = value;
					if ((value != null))
					{
						value.Project = this;
					}
					this.SendPropertyChanged("ProjLocation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProposalInfo", Storage="_ProposalInfo", ThisKey="ProjectID", OtherKey="ProjectID", IsUnique=true, IsForeignKey=false)]
		public ProposalInfo ProposalInfo
		{
			get
			{
				return this._ProposalInfo.Entity;
			}
			set
			{
				ProposalInfo previousValue = this._ProposalInfo.Entity;
				if (((previousValue != value) 
							|| (this._ProposalInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProposalInfo.Entity = null;
						previousValue.Project = null;
					}
					this._ProposalInfo.Entity = value;
					if ((value != null))
					{
						value.Project = this;
					}
					this.SendPropertyChanged("ProposalInfo");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProposalStatus", Storage="_ProposalStatus", ThisKey="ProjectID", OtherKey="ProjectID", IsUnique=true, IsForeignKey=false)]
		public ProposalStatus ProposalStatus
		{
			get
			{
				return this._ProposalStatus.Entity;
			}
			set
			{
				ProposalStatus previousValue = this._ProposalStatus.Entity;
				if (((previousValue != value) 
							|| (this._ProposalStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProposalStatus.Entity = null;
						previousValue.Project = null;
					}
					this._ProposalStatus.Entity = value;
					if ((value != null))
					{
						value.Project = this;
					}
					this.SendPropertyChanged("ProposalStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_SSPStaffProject", Storage="_SSPStaffProjects", ThisKey="ProjectID", OtherKey="ProjectID")]
		public EntitySet<SSPStaffProject> SSPStaffProjects
		{
			get
			{
				return this._SSPStaffProjects;
			}
			set
			{
				this._SSPStaffProjects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_TheKey", Storage="_TheKeys", ThisKey="ProjectID", OtherKey="ProjectID")]
		public EntitySet<TheKey> TheKeys
		{
			get
			{
				return this._TheKeys;
			}
			set
			{
				this._TheKeys.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_OutComeStatement", Storage="_OutComeStatement", ThisKey="ProjectID", OtherKey="ProjectID", IsUnique=true, IsForeignKey=false)]
		public OutComeStatement OutComeStatement
		{
			get
			{
				return this._OutComeStatement.Entity;
			}
			set
			{
				OutComeStatement previousValue = this._OutComeStatement.Entity;
				if (((previousValue != value) 
							|| (this._OutComeStatement.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OutComeStatement.Entity = null;
						previousValue.Project = null;
					}
					this._OutComeStatement.Entity = value;
					if ((value != null))
					{
						value.Project = this;
					}
					this.SendPropertyChanged("OutComeStatement");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_LFIndicator", Storage="_LFIndicator", ThisKey="ProjectID", OtherKey="ProjectID", IsUnique=true, IsForeignKey=false)]
		public LFIndicator LFIndicator
		{
			get
			{
				return this._LFIndicator.Entity;
			}
			set
			{
				LFIndicator previousValue = this._LFIndicator.Entity;
				if (((previousValue != value) 
							|| (this._LFIndicator.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LFIndicator.Entity = null;
						previousValue.Project = null;
					}
					this._LFIndicator.Entity = value;
					if ((value != null))
					{
						value.Project = this;
					}
					this.SendPropertyChanged("LFIndicator");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_Project", Storage="_Organization", ThisKey="OrgID", OtherKey="OrgID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Organization Organization
		{
			get
			{
				return this._Organization.Entity;
			}
			set
			{
				Organization previousValue = this._Organization.Entity;
				if (((previousValue != value) 
							|| (this._Organization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organization.Entity = null;
						previousValue.Projects.Remove(this);
					}
					this._Organization.Entity = value;
					if ((value != null))
					{
						value.Projects.Add(this);
						this._OrgID = value.OrgID;
					}
					else
					{
						this._OrgID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Organization");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FundingSources(FundingSource entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_FundingSources(FundingSource entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
		
		private void attach_ProjectEvents(ProjectEvent entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_ProjectEvents(ProjectEvent entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
		
		private void attach_SSPStaffProjects(SSPStaffProject entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_SSPStaffProjects(SSPStaffProject entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
		
		private void attach_TheKeys(TheKey entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_TheKeys(TheKey entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProjLocation")]
	public partial class ProjLocation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ProjectID;
		
		private System.Nullable<System.DateTime> _SelectedDate;
		
		private EntityRef<Project> _Project;
		
		private EntityRef<ProjLocationList> _ProjLocationList;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnProjectIDChanging(int value);
    partial void OnProjectIDChanged();
    partial void OnSelectedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnSelectedDateChanged();
    #endregion
		
		public ProjLocation()
		{
			this._Project = default(EntityRef<Project>);
			this._ProjLocationList = default(EntityRef<ProjLocationList>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					if (this._ProjLocationList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SelectedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> SelectedDate
		{
			get
			{
				return this._SelectedDate;
			}
			set
			{
				if ((this._SelectedDate != value))
				{
					this.OnSelectedDateChanging(value);
					this.SendPropertyChanging();
					this._SelectedDate = value;
					this.SendPropertyChanged("SelectedDate");
					this.OnSelectedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjLocation", Storage="_Project", ThisKey="ProjectID", OtherKey="ProjectID", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.ProjLocation = null;
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.ProjLocation = this;
						this._ProjectID = value.ProjectID;
					}
					else
					{
						this._ProjectID = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjLocationList_ProjLocation", Storage="_ProjLocationList", ThisKey="ID", OtherKey="ID", IsForeignKey=true)]
		public ProjLocationList ProjLocationList
		{
			get
			{
				return this._ProjLocationList.Entity;
			}
			set
			{
				ProjLocationList previousValue = this._ProjLocationList.Entity;
				if (((previousValue != value) 
							|| (this._ProjLocationList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjLocationList.Entity = null;
						previousValue.ProjLocations.Remove(this);
					}
					this._ProjLocationList.Entity = value;
					if ((value != null))
					{
						value.ProjLocations.Add(this);
						this._ID = value.ID;
					}
					else
					{
						this._ID = default(int);
					}
					this.SendPropertyChanged("ProjLocationList");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProjLocationList")]
	public partial class ProjLocationList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<ProjLocation> _ProjLocations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public ProjLocationList()
		{
			this._ProjLocations = new EntitySet<ProjLocation>(new Action<ProjLocation>(this.attach_ProjLocations), new Action<ProjLocation>(this.detach_ProjLocations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(150)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjLocationList_ProjLocation", Storage="_ProjLocations", ThisKey="ID", OtherKey="ID")]
		public EntitySet<ProjLocation> ProjLocations
		{
			get
			{
				return this._ProjLocations;
			}
			set
			{
				this._ProjLocations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProjLocations(ProjLocation entity)
		{
			this.SendPropertyChanging();
			entity.ProjLocationList = this;
		}
		
		private void detach_ProjLocations(ProjLocation entity)
		{
			this.SendPropertyChanging();
			entity.ProjLocationList = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProposalInfo")]
	public partial class ProposalInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProjectID;
		
		private System.DateTime _RequestDate;
		
		private string _TitleR;
		
		private string _TitleE;
		
		private string _PubStatementR;
		
		private string _PubStatementE;
		
		private string _PubStatementK;
		
		private EntityRef<Project> _Project;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProjectIDChanging(int value);
    partial void OnProjectIDChanged();
    partial void OnRequestDateChanging(System.DateTime value);
    partial void OnRequestDateChanged();
    partial void OnTitleRChanging(string value);
    partial void OnTitleRChanged();
    partial void OnTitleEChanging(string value);
    partial void OnTitleEChanged();
    partial void OnPubStatementRChanging(string value);
    partial void OnPubStatementRChanged();
    partial void OnPubStatementEChanging(string value);
    partial void OnPubStatementEChanged();
    partial void OnPubStatementKChanging(string value);
    partial void OnPubStatementKChanged();
    #endregion
		
		public ProposalInfo()
		{
			this._Project = default(EntityRef<Project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestDate", DbType="DateTime NOT NULL")]
		public System.DateTime RequestDate
		{
			get
			{
				return this._RequestDate;
			}
			set
			{
				if ((this._RequestDate != value))
				{
					this.OnRequestDateChanging(value);
					this.SendPropertyChanging();
					this._RequestDate = value;
					this.SendPropertyChanged("RequestDate");
					this.OnRequestDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TitleR", DbType="NVarChar(400)")]
		public string TitleR
		{
			get
			{
				return this._TitleR;
			}
			set
			{
				if ((this._TitleR != value))
				{
					this.OnTitleRChanging(value);
					this.SendPropertyChanging();
					this._TitleR = value;
					this.SendPropertyChanged("TitleR");
					this.OnTitleRChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TitleE", DbType="NVarChar(400)")]
		public string TitleE
		{
			get
			{
				return this._TitleE;
			}
			set
			{
				if ((this._TitleE != value))
				{
					this.OnTitleEChanging(value);
					this.SendPropertyChanging();
					this._TitleE = value;
					this.SendPropertyChanged("TitleE");
					this.OnTitleEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PubStatementR", DbType="NVarChar(2000)")]
		public string PubStatementR
		{
			get
			{
				return this._PubStatementR;
			}
			set
			{
				if ((this._PubStatementR != value))
				{
					this.OnPubStatementRChanging(value);
					this.SendPropertyChanging();
					this._PubStatementR = value;
					this.SendPropertyChanged("PubStatementR");
					this.OnPubStatementRChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PubStatementE", DbType="NVarChar(2000)")]
		public string PubStatementE
		{
			get
			{
				return this._PubStatementE;
			}
			set
			{
				if ((this._PubStatementE != value))
				{
					this.OnPubStatementEChanging(value);
					this.SendPropertyChanging();
					this._PubStatementE = value;
					this.SendPropertyChanged("PubStatementE");
					this.OnPubStatementEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PubStatementK", DbType="NVarChar(2000)")]
		public string PubStatementK
		{
			get
			{
				return this._PubStatementK;
			}
			set
			{
				if ((this._PubStatementK != value))
				{
					this.OnPubStatementKChanging(value);
					this.SendPropertyChanging();
					this._PubStatementK = value;
					this.SendPropertyChanged("PubStatementK");
					this.OnPubStatementKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProposalInfo", Storage="_Project", ThisKey="ProjectID", OtherKey="ProjectID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.ProposalInfo = null;
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.ProposalInfo = this;
						this._ProjectID = value.ProjectID;
					}
					else
					{
						this._ProjectID = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProposalStatus")]
	public partial class ProposalStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PropStatusID;
		
		private int _ProjectID;
		
		private System.Nullable<System.DateTime> _SelectedDate;
		
		private EntityRef<Project> _Project;
		
		private EntityRef<ProposalStatusList> _ProposalStatusList;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPropStatusIDChanging(int value);
    partial void OnPropStatusIDChanged();
    partial void OnProjectIDChanging(int value);
    partial void OnProjectIDChanged();
    partial void OnSelectedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnSelectedDateChanged();
    #endregion
		
		public ProposalStatus()
		{
			this._Project = default(EntityRef<Project>);
			this._ProposalStatusList = default(EntityRef<ProposalStatusList>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropStatusID", DbType="Int NOT NULL")]
		public int PropStatusID
		{
			get
			{
				return this._PropStatusID;
			}
			set
			{
				if ((this._PropStatusID != value))
				{
					if (this._ProposalStatusList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPropStatusIDChanging(value);
					this.SendPropertyChanging();
					this._PropStatusID = value;
					this.SendPropertyChanged("PropStatusID");
					this.OnPropStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SelectedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> SelectedDate
		{
			get
			{
				return this._SelectedDate;
			}
			set
			{
				if ((this._SelectedDate != value))
				{
					this.OnSelectedDateChanging(value);
					this.SendPropertyChanging();
					this._SelectedDate = value;
					this.SendPropertyChanged("SelectedDate");
					this.OnSelectedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProposalStatus", Storage="_Project", ThisKey="ProjectID", OtherKey="ProjectID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.ProposalStatus = null;
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.ProposalStatus = this;
						this._ProjectID = value.ProjectID;
					}
					else
					{
						this._ProjectID = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProposalStatusList_ProposalStatus", Storage="_ProposalStatusList", ThisKey="PropStatusID", OtherKey="ProposalStatusID", IsForeignKey=true)]
		public ProposalStatusList ProposalStatusList
		{
			get
			{
				return this._ProposalStatusList.Entity;
			}
			set
			{
				ProposalStatusList previousValue = this._ProposalStatusList.Entity;
				if (((previousValue != value) 
							|| (this._ProposalStatusList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProposalStatusList.Entity = null;
						previousValue.ProposalStatus.Remove(this);
					}
					this._ProposalStatusList.Entity = value;
					if ((value != null))
					{
						value.ProposalStatus.Add(this);
						this._PropStatusID = value.ProposalStatusID;
					}
					else
					{
						this._PropStatusID = default(int);
					}
					this.SendPropertyChanged("ProposalStatusList");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProposalStatusList")]
	public partial class ProposalStatusList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProposalStatusID;
		
		private string _ProposalStatusText;
		
		private EntitySet<ProposalStatus> _ProposalStatus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProposalStatusIDChanging(int value);
    partial void OnProposalStatusIDChanged();
    partial void OnProposalStatusTextChanging(string value);
    partial void OnProposalStatusTextChanged();
    #endregion
		
		public ProposalStatusList()
		{
			this._ProposalStatus = new EntitySet<ProposalStatus>(new Action<ProposalStatus>(this.attach_ProposalStatus), new Action<ProposalStatus>(this.detach_ProposalStatus));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProposalStatusID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProposalStatusID
		{
			get
			{
				return this._ProposalStatusID;
			}
			set
			{
				if ((this._ProposalStatusID != value))
				{
					this.OnProposalStatusIDChanging(value);
					this.SendPropertyChanging();
					this._ProposalStatusID = value;
					this.SendPropertyChanged("ProposalStatusID");
					this.OnProposalStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProposalStatusText", DbType="VarChar(50)")]
		public string ProposalStatusText
		{
			get
			{
				return this._ProposalStatusText;
			}
			set
			{
				if ((this._ProposalStatusText != value))
				{
					this.OnProposalStatusTextChanging(value);
					this.SendPropertyChanging();
					this._ProposalStatusText = value;
					this.SendPropertyChanged("ProposalStatusText");
					this.OnProposalStatusTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProposalStatusList_ProposalStatus", Storage="_ProposalStatus", ThisKey="ProposalStatusID", OtherKey="PropStatusID")]
		public EntitySet<ProposalStatus> ProposalStatus
		{
			get
			{
				return this._ProposalStatus;
			}
			set
			{
				this._ProposalStatus.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProposalStatus(ProposalStatus entity)
		{
			this.SendPropertyChanging();
			entity.ProposalStatusList = this;
		}
		
		private void detach_ProposalStatus(ProposalStatus entity)
		{
			this.SendPropertyChanging();
			entity.ProposalStatusList = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RegionList")]
	public partial class RegionList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DDID;
		
		private string _DDNAME;
		
		private EntitySet<Address> _Addresses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDDIDChanging(int value);
    partial void OnDDIDChanged();
    partial void OnDDNAMEChanging(string value);
    partial void OnDDNAMEChanged();
    #endregion
		
		public RegionList()
		{
			this._Addresses = new EntitySet<Address>(new Action<Address>(this.attach_Addresses), new Action<Address>(this.detach_Addresses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DDID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DDID
		{
			get
			{
				return this._DDID;
			}
			set
			{
				if ((this._DDID != value))
				{
					this.OnDDIDChanging(value);
					this.SendPropertyChanging();
					this._DDID = value;
					this.SendPropertyChanged("DDID");
					this.OnDDIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DDNAME", DbType="NVarChar(300)")]
		public string DDNAME
		{
			get
			{
				return this._DDNAME;
			}
			set
			{
				if ((this._DDNAME != value))
				{
					this.OnDDNAMEChanging(value);
					this.SendPropertyChanging();
					this._DDNAME = value;
					this.SendPropertyChanged("DDNAME");
					this.OnDDNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RegionList_Address", Storage="_Addresses", ThisKey="DDID", OtherKey="DDIDRegion")]
		public EntitySet<Address> Addresses
		{
			get
			{
				return this._Addresses;
			}
			set
			{
				this._Addresses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.RegionList = this;
		}
		
		private void detach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.RegionList = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReportPeriod")]
	public partial class ReportPeriod : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReportPeriodID;
		
		private int _FinArticleID;
		
		private System.Nullable<int> _Amount;
		
		private EntityRef<FinancialArticle> _FinancialArticle;
		
		private EntityRef<ReportPeriodList> _ReportPeriodList;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReportPeriodIDChanging(int value);
    partial void OnReportPeriodIDChanged();
    partial void OnFinArticleIDChanging(int value);
    partial void OnFinArticleIDChanged();
    partial void OnAmountChanging(System.Nullable<int> value);
    partial void OnAmountChanged();
    #endregion
		
		public ReportPeriod()
		{
			this._FinancialArticle = default(EntityRef<FinancialArticle>);
			this._ReportPeriodList = default(EntityRef<ReportPeriodList>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportPeriodID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ReportPeriodID
		{
			get
			{
				return this._ReportPeriodID;
			}
			set
			{
				if ((this._ReportPeriodID != value))
				{
					if (this._ReportPeriodList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReportPeriodIDChanging(value);
					this.SendPropertyChanging();
					this._ReportPeriodID = value;
					this.SendPropertyChanged("ReportPeriodID");
					this.OnReportPeriodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinArticleID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int FinArticleID
		{
			get
			{
				return this._FinArticleID;
			}
			set
			{
				if ((this._FinArticleID != value))
				{
					if (this._FinancialArticle.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFinArticleIDChanging(value);
					this.SendPropertyChanging();
					this._FinArticleID = value;
					this.SendPropertyChanged("FinArticleID");
					this.OnFinArticleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Int")]
		public System.Nullable<int> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FinancialArticle_ReportPeriod", Storage="_FinancialArticle", ThisKey="FinArticleID", OtherKey="FinArticleID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public FinancialArticle FinancialArticle
		{
			get
			{
				return this._FinancialArticle.Entity;
			}
			set
			{
				FinancialArticle previousValue = this._FinancialArticle.Entity;
				if (((previousValue != value) 
							|| (this._FinancialArticle.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FinancialArticle.Entity = null;
						previousValue.ReportPeriods.Remove(this);
					}
					this._FinancialArticle.Entity = value;
					if ((value != null))
					{
						value.ReportPeriods.Add(this);
						this._FinArticleID = value.FinArticleID;
					}
					else
					{
						this._FinArticleID = default(int);
					}
					this.SendPropertyChanged("FinancialArticle");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReportPeriodList_ReportPeriod", Storage="_ReportPeriodList", ThisKey="ReportPeriodID", OtherKey="ReportPeriodID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ReportPeriodList ReportPeriodList
		{
			get
			{
				return this._ReportPeriodList.Entity;
			}
			set
			{
				ReportPeriodList previousValue = this._ReportPeriodList.Entity;
				if (((previousValue != value) 
							|| (this._ReportPeriodList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReportPeriodList.Entity = null;
						previousValue.ReportPeriods.Remove(this);
					}
					this._ReportPeriodList.Entity = value;
					if ((value != null))
					{
						value.ReportPeriods.Add(this);
						this._ReportPeriodID = value.ReportPeriodID;
					}
					else
					{
						this._ReportPeriodID = default(int);
					}
					this.SendPropertyChanged("ReportPeriodList");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReportPeriodList")]
	public partial class ReportPeriodList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReportPeriodID;
		
		private int _BudgetID;
		
		private System.Nullable<System.DateTime> _PeriodStart;
		
		private System.Nullable<System.DateTime> _PeriodEnd;
		
		private System.Nullable<int> _PaymentStatus;
		
		private System.Nullable<int> _PaymentAmount;
		
		private System.Nullable<System.DateTime> _PaymentDate;
		
		private string _PeriodTitle;
		
		private EntitySet<ReportPeriod> _ReportPeriods;
		
		private EntityRef<Budget> _Budget;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReportPeriodIDChanging(int value);
    partial void OnReportPeriodIDChanged();
    partial void OnBudgetIDChanging(int value);
    partial void OnBudgetIDChanged();
    partial void OnPeriodStartChanging(System.Nullable<System.DateTime> value);
    partial void OnPeriodStartChanged();
    partial void OnPeriodEndChanging(System.Nullable<System.DateTime> value);
    partial void OnPeriodEndChanged();
    partial void OnPaymentStatusChanging(System.Nullable<int> value);
    partial void OnPaymentStatusChanged();
    partial void OnPaymentAmountChanging(System.Nullable<int> value);
    partial void OnPaymentAmountChanged();
    partial void OnPaymentDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPaymentDateChanged();
    partial void OnPeriodTitleChanging(string value);
    partial void OnPeriodTitleChanged();
    #endregion
		
		public ReportPeriodList()
		{
			this._ReportPeriods = new EntitySet<ReportPeriod>(new Action<ReportPeriod>(this.attach_ReportPeriods), new Action<ReportPeriod>(this.detach_ReportPeriods));
			this._Budget = default(EntityRef<Budget>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportPeriodID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ReportPeriodID
		{
			get
			{
				return this._ReportPeriodID;
			}
			set
			{
				if ((this._ReportPeriodID != value))
				{
					this.OnReportPeriodIDChanging(value);
					this.SendPropertyChanging();
					this._ReportPeriodID = value;
					this.SendPropertyChanged("ReportPeriodID");
					this.OnReportPeriodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BudgetID", DbType="Int NOT NULL")]
		public int BudgetID
		{
			get
			{
				return this._BudgetID;
			}
			set
			{
				if ((this._BudgetID != value))
				{
					if (this._Budget.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBudgetIDChanging(value);
					this.SendPropertyChanging();
					this._BudgetID = value;
					this.SendPropertyChanged("BudgetID");
					this.OnBudgetIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PeriodStart", DbType="DateTime")]
		public System.Nullable<System.DateTime> PeriodStart
		{
			get
			{
				return this._PeriodStart;
			}
			set
			{
				if ((this._PeriodStart != value))
				{
					this.OnPeriodStartChanging(value);
					this.SendPropertyChanging();
					this._PeriodStart = value;
					this.SendPropertyChanged("PeriodStart");
					this.OnPeriodStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PeriodEnd", DbType="DateTime")]
		public System.Nullable<System.DateTime> PeriodEnd
		{
			get
			{
				return this._PeriodEnd;
			}
			set
			{
				if ((this._PeriodEnd != value))
				{
					this.OnPeriodEndChanging(value);
					this.SendPropertyChanging();
					this._PeriodEnd = value;
					this.SendPropertyChanged("PeriodEnd");
					this.OnPeriodEndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentStatus", DbType="Int")]
		public System.Nullable<int> PaymentStatus
		{
			get
			{
				return this._PaymentStatus;
			}
			set
			{
				if ((this._PaymentStatus != value))
				{
					this.OnPaymentStatusChanging(value);
					this.SendPropertyChanging();
					this._PaymentStatus = value;
					this.SendPropertyChanged("PaymentStatus");
					this.OnPaymentStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentAmount", DbType="Int")]
		public System.Nullable<int> PaymentAmount
		{
			get
			{
				return this._PaymentAmount;
			}
			set
			{
				if ((this._PaymentAmount != value))
				{
					this.OnPaymentAmountChanging(value);
					this.SendPropertyChanging();
					this._PaymentAmount = value;
					this.SendPropertyChanged("PaymentAmount");
					this.OnPaymentAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> PaymentDate
		{
			get
			{
				return this._PaymentDate;
			}
			set
			{
				if ((this._PaymentDate != value))
				{
					this.OnPaymentDateChanging(value);
					this.SendPropertyChanging();
					this._PaymentDate = value;
					this.SendPropertyChanged("PaymentDate");
					this.OnPaymentDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PeriodTitle", DbType="VarChar(200)")]
		public string PeriodTitle
		{
			get
			{
				return this._PeriodTitle;
			}
			set
			{
				if ((this._PeriodTitle != value))
				{
					this.OnPeriodTitleChanging(value);
					this.SendPropertyChanging();
					this._PeriodTitle = value;
					this.SendPropertyChanged("PeriodTitle");
					this.OnPeriodTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReportPeriodList_ReportPeriod", Storage="_ReportPeriods", ThisKey="ReportPeriodID", OtherKey="ReportPeriodID")]
		public EntitySet<ReportPeriod> ReportPeriods
		{
			get
			{
				return this._ReportPeriods;
			}
			set
			{
				this._ReportPeriods.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Budget_ReportPeriodList", Storage="_Budget", ThisKey="BudgetID", OtherKey="BudgetID", IsForeignKey=true)]
		public Budget Budget
		{
			get
			{
				return this._Budget.Entity;
			}
			set
			{
				Budget previousValue = this._Budget.Entity;
				if (((previousValue != value) 
							|| (this._Budget.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Budget.Entity = null;
						previousValue.ReportPeriodLists.Remove(this);
					}
					this._Budget.Entity = value;
					if ((value != null))
					{
						value.ReportPeriodLists.Add(this);
						this._BudgetID = value.BudgetID;
					}
					else
					{
						this._BudgetID = default(int);
					}
					this.SendPropertyChanged("Budget");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ReportPeriods(ReportPeriod entity)
		{
			this.SendPropertyChanging();
			entity.ReportPeriodList = this;
		}
		
		private void detach_ReportPeriods(ReportPeriod entity)
		{
			this.SendPropertyChanging();
			entity.ReportPeriodList = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReportPeriodListR")]
	public partial class ReportPeriodListR : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReportPeriodID;
		
		private int _BudgetID;
		
		private System.Nullable<System.DateTime> _PeriodStart;
		
		private System.Nullable<System.DateTime> _PeriodEnd;
		
		private System.Nullable<int> _PaymentStatus;
		
		private System.Nullable<decimal> _PaymentAmount;
		
		private System.Nullable<System.DateTime> _PaymentDate;
		
		private string _PeriodTitle;
		
		private EntitySet<ReportPeriodR> _ReportPeriodRs;
		
		private EntityRef<Budget> _Budget;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReportPeriodIDChanging(int value);
    partial void OnReportPeriodIDChanged();
    partial void OnBudgetIDChanging(int value);
    partial void OnBudgetIDChanged();
    partial void OnPeriodStartChanging(System.Nullable<System.DateTime> value);
    partial void OnPeriodStartChanged();
    partial void OnPeriodEndChanging(System.Nullable<System.DateTime> value);
    partial void OnPeriodEndChanged();
    partial void OnPaymentStatusChanging(System.Nullable<int> value);
    partial void OnPaymentStatusChanged();
    partial void OnPaymentAmountChanging(System.Nullable<decimal> value);
    partial void OnPaymentAmountChanged();
    partial void OnPaymentDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPaymentDateChanged();
    partial void OnPeriodTitleChanging(string value);
    partial void OnPeriodTitleChanged();
    #endregion
		
		public ReportPeriodListR()
		{
			this._ReportPeriodRs = new EntitySet<ReportPeriodR>(new Action<ReportPeriodR>(this.attach_ReportPeriodRs), new Action<ReportPeriodR>(this.detach_ReportPeriodRs));
			this._Budget = default(EntityRef<Budget>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportPeriodID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ReportPeriodID
		{
			get
			{
				return this._ReportPeriodID;
			}
			set
			{
				if ((this._ReportPeriodID != value))
				{
					this.OnReportPeriodIDChanging(value);
					this.SendPropertyChanging();
					this._ReportPeriodID = value;
					this.SendPropertyChanged("ReportPeriodID");
					this.OnReportPeriodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BudgetID", DbType="Int NOT NULL")]
		public int BudgetID
		{
			get
			{
				return this._BudgetID;
			}
			set
			{
				if ((this._BudgetID != value))
				{
					if (this._Budget.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBudgetIDChanging(value);
					this.SendPropertyChanging();
					this._BudgetID = value;
					this.SendPropertyChanged("BudgetID");
					this.OnBudgetIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PeriodStart", DbType="DateTime")]
		public System.Nullable<System.DateTime> PeriodStart
		{
			get
			{
				return this._PeriodStart;
			}
			set
			{
				if ((this._PeriodStart != value))
				{
					this.OnPeriodStartChanging(value);
					this.SendPropertyChanging();
					this._PeriodStart = value;
					this.SendPropertyChanged("PeriodStart");
					this.OnPeriodStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PeriodEnd", DbType="DateTime")]
		public System.Nullable<System.DateTime> PeriodEnd
		{
			get
			{
				return this._PeriodEnd;
			}
			set
			{
				if ((this._PeriodEnd != value))
				{
					this.OnPeriodEndChanging(value);
					this.SendPropertyChanging();
					this._PeriodEnd = value;
					this.SendPropertyChanged("PeriodEnd");
					this.OnPeriodEndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentStatus", DbType="Int")]
		public System.Nullable<int> PaymentStatus
		{
			get
			{
				return this._PaymentStatus;
			}
			set
			{
				if ((this._PaymentStatus != value))
				{
					this.OnPaymentStatusChanging(value);
					this.SendPropertyChanging();
					this._PaymentStatus = value;
					this.SendPropertyChanged("PaymentStatus");
					this.OnPaymentStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentAmount", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> PaymentAmount
		{
			get
			{
				return this._PaymentAmount;
			}
			set
			{
				if ((this._PaymentAmount != value))
				{
					this.OnPaymentAmountChanging(value);
					this.SendPropertyChanging();
					this._PaymentAmount = value;
					this.SendPropertyChanged("PaymentAmount");
					this.OnPaymentAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> PaymentDate
		{
			get
			{
				return this._PaymentDate;
			}
			set
			{
				if ((this._PaymentDate != value))
				{
					this.OnPaymentDateChanging(value);
					this.SendPropertyChanging();
					this._PaymentDate = value;
					this.SendPropertyChanged("PaymentDate");
					this.OnPaymentDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PeriodTitle", DbType="VarChar(200)")]
		public string PeriodTitle
		{
			get
			{
				return this._PeriodTitle;
			}
			set
			{
				if ((this._PeriodTitle != value))
				{
					this.OnPeriodTitleChanging(value);
					this.SendPropertyChanging();
					this._PeriodTitle = value;
					this.SendPropertyChanged("PeriodTitle");
					this.OnPeriodTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReportPeriodListR_ReportPeriodR", Storage="_ReportPeriodRs", ThisKey="ReportPeriodID", OtherKey="ReportPeriodID")]
		public EntitySet<ReportPeriodR> ReportPeriodRs
		{
			get
			{
				return this._ReportPeriodRs;
			}
			set
			{
				this._ReportPeriodRs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Budget_ReportPeriodListR", Storage="_Budget", ThisKey="BudgetID", OtherKey="BudgetID", IsForeignKey=true)]
		public Budget Budget
		{
			get
			{
				return this._Budget.Entity;
			}
			set
			{
				Budget previousValue = this._Budget.Entity;
				if (((previousValue != value) 
							|| (this._Budget.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Budget.Entity = null;
						previousValue.ReportPeriodListRs.Remove(this);
					}
					this._Budget.Entity = value;
					if ((value != null))
					{
						value.ReportPeriodListRs.Add(this);
						this._BudgetID = value.BudgetID;
					}
					else
					{
						this._BudgetID = default(int);
					}
					this.SendPropertyChanged("Budget");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ReportPeriodRs(ReportPeriodR entity)
		{
			this.SendPropertyChanging();
			entity.ReportPeriodListR = this;
		}
		
		private void detach_ReportPeriodRs(ReportPeriodR entity)
		{
			this.SendPropertyChanging();
			entity.ReportPeriodListR = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReportPeriodR")]
	public partial class ReportPeriodR : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReportPeriodID;
		
		private int _FinArticleCatID;
		
		private System.Nullable<decimal> _Amount;
		
		private EntityRef<ReportPeriodListR> _ReportPeriodListR;
		
		private EntityRef<FinArticleCategoryR> _FinArticleCategoryR;
		
		private EntityRef<FinArticleCategoryR> _FinArticleCategoryR1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReportPeriodIDChanging(int value);
    partial void OnReportPeriodIDChanged();
    partial void OnFinArticleCatIDChanging(int value);
    partial void OnFinArticleCatIDChanged();
    partial void OnAmountChanging(System.Nullable<decimal> value);
    partial void OnAmountChanged();
    #endregion
		
		public ReportPeriodR()
		{
			this._ReportPeriodListR = default(EntityRef<ReportPeriodListR>);
			this._FinArticleCategoryR = default(EntityRef<FinArticleCategoryR>);
			this._FinArticleCategoryR1 = default(EntityRef<FinArticleCategoryR>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportPeriodID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ReportPeriodID
		{
			get
			{
				return this._ReportPeriodID;
			}
			set
			{
				if ((this._ReportPeriodID != value))
				{
					if (this._ReportPeriodListR.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReportPeriodIDChanging(value);
					this.SendPropertyChanging();
					this._ReportPeriodID = value;
					this.SendPropertyChanged("ReportPeriodID");
					this.OnReportPeriodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinArticleCatID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int FinArticleCatID
		{
			get
			{
				return this._FinArticleCatID;
			}
			set
			{
				if ((this._FinArticleCatID != value))
				{
					if ((this._FinArticleCategoryR.HasLoadedOrAssignedValue || this._FinArticleCategoryR1.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFinArticleCatIDChanging(value);
					this.SendPropertyChanging();
					this._FinArticleCatID = value;
					this.SendPropertyChanged("FinArticleCatID");
					this.OnFinArticleCatIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReportPeriodListR_ReportPeriodR", Storage="_ReportPeriodListR", ThisKey="ReportPeriodID", OtherKey="ReportPeriodID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ReportPeriodListR ReportPeriodListR
		{
			get
			{
				return this._ReportPeriodListR.Entity;
			}
			set
			{
				ReportPeriodListR previousValue = this._ReportPeriodListR.Entity;
				if (((previousValue != value) 
							|| (this._ReportPeriodListR.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReportPeriodListR.Entity = null;
						previousValue.ReportPeriodRs.Remove(this);
					}
					this._ReportPeriodListR.Entity = value;
					if ((value != null))
					{
						value.ReportPeriodRs.Add(this);
						this._ReportPeriodID = value.ReportPeriodID;
					}
					else
					{
						this._ReportPeriodID = default(int);
					}
					this.SendPropertyChanged("ReportPeriodListR");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FinArticleCategoryR_ReportPeriodR", Storage="_FinArticleCategoryR", ThisKey="FinArticleCatID", OtherKey="FinArticleCatID", IsForeignKey=true)]
		public FinArticleCategoryR FinArticleCategoryR
		{
			get
			{
				return this._FinArticleCategoryR.Entity;
			}
			set
			{
				FinArticleCategoryR previousValue = this._FinArticleCategoryR.Entity;
				if (((previousValue != value) 
							|| (this._FinArticleCategoryR.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FinArticleCategoryR.Entity = null;
						previousValue.ReportPeriodRs.Remove(this);
					}
					this._FinArticleCategoryR.Entity = value;
					if ((value != null))
					{
						value.ReportPeriodRs.Add(this);
						this._FinArticleCatID = value.FinArticleCatID;
					}
					else
					{
						this._FinArticleCatID = default(int);
					}
					this.SendPropertyChanged("FinArticleCategoryR");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FinArticleCategoryR_ReportPeriodR1", Storage="_FinArticleCategoryR1", ThisKey="FinArticleCatID", OtherKey="FinArticleCatID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public FinArticleCategoryR FinArticleCategoryR1
		{
			get
			{
				return this._FinArticleCategoryR1.Entity;
			}
			set
			{
				FinArticleCategoryR previousValue = this._FinArticleCategoryR1.Entity;
				if (((previousValue != value) 
							|| (this._FinArticleCategoryR1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FinArticleCategoryR1.Entity = null;
						previousValue.ReportPeriodRs1.Remove(this);
					}
					this._FinArticleCategoryR1.Entity = value;
					if ((value != null))
					{
						value.ReportPeriodRs1.Add(this);
						this._FinArticleCatID = value.FinArticleCatID;
					}
					else
					{
						this._FinArticleCatID = default(int);
					}
					this.SendPropertyChanged("FinArticleCategoryR1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Roles")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoleID;
		
		private string _RoleTitle;
		
		private EntitySet<OrganizationStaff> _OrganizationStaffs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    partial void OnRoleTitleChanging(string value);
    partial void OnRoleTitleChanged();
    #endregion
		
		public Role()
		{
			this._OrganizationStaffs = new EntitySet<OrganizationStaff>(new Action<OrganizationStaff>(this.attach_OrganizationStaffs), new Action<OrganizationStaff>(this.detach_OrganizationStaffs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleTitle", DbType="VarChar(50)")]
		public string RoleTitle
		{
			get
			{
				return this._RoleTitle;
			}
			set
			{
				if ((this._RoleTitle != value))
				{
					this.OnRoleTitleChanging(value);
					this.SendPropertyChanging();
					this._RoleTitle = value;
					this.SendPropertyChanged("RoleTitle");
					this.OnRoleTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_OrganizationStaff", Storage="_OrganizationStaffs", ThisKey="RoleID", OtherKey="RoleID")]
		public EntitySet<OrganizationStaff> OrganizationStaffs
		{
			get
			{
				return this._OrganizationStaffs;
			}
			set
			{
				this._OrganizationStaffs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrganizationStaffs(OrganizationStaff entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_OrganizationStaffs(OrganizationStaff entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RolesSSPStaff")]
	public partial class RolesSSPStaff : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoleID;
		
		private string _RoleName;
		
		private System.Nullable<int> _RoleNumeric;
		
		private EntitySet<Permission1> _Permission1s;
		
		private EntitySet<SSPStaff> _SSPStaffs;
		
		private EntitySet<PageAccess> _PageAccesses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    partial void OnRoleNameChanging(string value);
    partial void OnRoleNameChanged();
    partial void OnRoleNumericChanging(System.Nullable<int> value);
    partial void OnRoleNumericChanged();
    #endregion
		
		public RolesSSPStaff()
		{
			this._Permission1s = new EntitySet<Permission1>(new Action<Permission1>(this.attach_Permission1s), new Action<Permission1>(this.detach_Permission1s));
			this._SSPStaffs = new EntitySet<SSPStaff>(new Action<SSPStaff>(this.attach_SSPStaffs), new Action<SSPStaff>(this.detach_SSPStaffs));
			this._PageAccesses = new EntitySet<PageAccess>(new Action<PageAccess>(this.attach_PageAccesses), new Action<PageAccess>(this.detach_PageAccesses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this.OnRoleNameChanging(value);
					this.SendPropertyChanging();
					this._RoleName = value;
					this.SendPropertyChanged("RoleName");
					this.OnRoleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleNumeric", DbType="Int")]
		public System.Nullable<int> RoleNumeric
		{
			get
			{
				return this._RoleNumeric;
			}
			set
			{
				if ((this._RoleNumeric != value))
				{
					this.OnRoleNumericChanging(value);
					this.SendPropertyChanging();
					this._RoleNumeric = value;
					this.SendPropertyChanged("RoleNumeric");
					this.OnRoleNumericChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RolesSSPStaff_Permission1", Storage="_Permission1s", ThisKey="RoleID", OtherKey="RoleID")]
		public EntitySet<Permission1> Permission1s
		{
			get
			{
				return this._Permission1s;
			}
			set
			{
				this._Permission1s.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RolesSSPStaff_SSPStaff", Storage="_SSPStaffs", ThisKey="RoleID", OtherKey="RoleID")]
		public EntitySet<SSPStaff> SSPStaffs
		{
			get
			{
				return this._SSPStaffs;
			}
			set
			{
				this._SSPStaffs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RolesSSPStaff_PageAccess", Storage="_PageAccesses", ThisKey="RoleID", OtherKey="RoleId")]
		public EntitySet<PageAccess> PageAccesses
		{
			get
			{
				return this._PageAccesses;
			}
			set
			{
				this._PageAccesses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Permission1s(Permission1 entity)
		{
			this.SendPropertyChanging();
			entity.RolesSSPStaff = this;
		}
		
		private void detach_Permission1s(Permission1 entity)
		{
			this.SendPropertyChanging();
			entity.RolesSSPStaff = null;
		}
		
		private void attach_SSPStaffs(SSPStaff entity)
		{
			this.SendPropertyChanging();
			entity.RolesSSPStaff = this;
		}
		
		private void detach_SSPStaffs(SSPStaff entity)
		{
			this.SendPropertyChanging();
			entity.RolesSSPStaff = null;
		}
		
		private void attach_PageAccesses(PageAccess entity)
		{
			this.SendPropertyChanging();
			entity.RolesSSPStaff = this;
		}
		
		private void detach_PageAccesses(PageAccess entity)
		{
			this.SendPropertyChanging();
			entity.RolesSSPStaff = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SSPStaff")]
	public partial class SSPStaff : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SSPStaffID;
		
		private int _RoleID;
		
		private string _LastName;
		
		private string _FirstName;
		
		private string _MiddleName;
		
		private string _username;
		
		private string _Password;
		
		private string _Email;
		
		private EntitySet<SSPStaffProject> _SSPStaffProjects;
		
		private EntityRef<RolesSSPStaff> _RolesSSPStaff;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSSPStaffIDChanging(int value);
    partial void OnSSPStaffIDChanged();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnMiddleNameChanging(string value);
    partial void OnMiddleNameChanged();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    #endregion
		
		public SSPStaff()
		{
			this._SSPStaffProjects = new EntitySet<SSPStaffProject>(new Action<SSPStaffProject>(this.attach_SSPStaffProjects), new Action<SSPStaffProject>(this.detach_SSPStaffProjects));
			this._RolesSSPStaff = default(EntityRef<RolesSSPStaff>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SSPStaffID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SSPStaffID
		{
			get
			{
				return this._SSPStaffID;
			}
			set
			{
				if ((this._SSPStaffID != value))
				{
					this.OnSSPStaffIDChanging(value);
					this.SendPropertyChanging();
					this._SSPStaffID = value;
					this.SendPropertyChanged("SSPStaffID");
					this.OnSSPStaffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="Int NOT NULL")]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._RolesSSPStaff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(50)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(50)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MiddleName", DbType="NVarChar(50)")]
		public string MiddleName
		{
			get
			{
				return this._MiddleName;
			}
			set
			{
				if ((this._MiddleName != value))
				{
					this.OnMiddleNameChanging(value);
					this.SendPropertyChanging();
					this._MiddleName = value;
					this.SendPropertyChanged("MiddleName");
					this.OnMiddleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="VarChar(100)")]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(100)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(100)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SSPStaff_SSPStaffProject", Storage="_SSPStaffProjects", ThisKey="SSPStaffID", OtherKey="SSPStaffID")]
		public EntitySet<SSPStaffProject> SSPStaffProjects
		{
			get
			{
				return this._SSPStaffProjects;
			}
			set
			{
				this._SSPStaffProjects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RolesSSPStaff_SSPStaff", Storage="_RolesSSPStaff", ThisKey="RoleID", OtherKey="RoleID", IsForeignKey=true)]
		public RolesSSPStaff RolesSSPStaff
		{
			get
			{
				return this._RolesSSPStaff.Entity;
			}
			set
			{
				RolesSSPStaff previousValue = this._RolesSSPStaff.Entity;
				if (((previousValue != value) 
							|| (this._RolesSSPStaff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RolesSSPStaff.Entity = null;
						previousValue.SSPStaffs.Remove(this);
					}
					this._RolesSSPStaff.Entity = value;
					if ((value != null))
					{
						value.SSPStaffs.Add(this);
						this._RoleID = value.RoleID;
					}
					else
					{
						this._RoleID = default(int);
					}
					this.SendPropertyChanged("RolesSSPStaff");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SSPStaffProjects(SSPStaffProject entity)
		{
			this.SendPropertyChanging();
			entity.SSPStaff = this;
		}
		
		private void detach_SSPStaffProjects(SSPStaffProject entity)
		{
			this.SendPropertyChanging();
			entity.SSPStaff = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SSPStaffProjects")]
	public partial class SSPStaffProject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SSPStaffID;
		
		private int _ProjectID;
		
		private System.Nullable<bool> _Active;
		
		private EntityRef<Project> _Project;
		
		private EntityRef<SSPStaff> _SSPStaff;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSSPStaffIDChanging(int value);
    partial void OnSSPStaffIDChanged();
    partial void OnProjectIDChanging(int value);
    partial void OnProjectIDChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public SSPStaffProject()
		{
			this._Project = default(EntityRef<Project>);
			this._SSPStaff = default(EntityRef<SSPStaff>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SSPStaffID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SSPStaffID
		{
			get
			{
				return this._SSPStaffID;
			}
			set
			{
				if ((this._SSPStaffID != value))
				{
					if (this._SSPStaff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSSPStaffIDChanging(value);
					this.SendPropertyChanging();
					this._SSPStaffID = value;
					this.SendPropertyChanged("SSPStaffID");
					this.OnSSPStaffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_SSPStaffProject", Storage="_Project", ThisKey="ProjectID", OtherKey="ProjectID", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.SSPStaffProjects.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.SSPStaffProjects.Add(this);
						this._ProjectID = value.ProjectID;
					}
					else
					{
						this._ProjectID = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SSPStaff_SSPStaffProject", Storage="_SSPStaff", ThisKey="SSPStaffID", OtherKey="SSPStaffID", IsForeignKey=true)]
		public SSPStaff SSPStaff
		{
			get
			{
				return this._SSPStaff.Entity;
			}
			set
			{
				SSPStaff previousValue = this._SSPStaff.Entity;
				if (((previousValue != value) 
							|| (this._SSPStaff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SSPStaff.Entity = null;
						previousValue.SSPStaffProjects.Remove(this);
					}
					this._SSPStaff.Entity = value;
					if ((value != null))
					{
						value.SSPStaffProjects.Add(this);
						this._SSPStaffID = value.SSPStaffID;
					}
					else
					{
						this._SSPStaffID = default(int);
					}
					this.SendPropertyChanged("SSPStaff");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TemplateDocument")]
	public partial class TemplateDocument : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TemplateDocsID;
		
		private string _TemplateDocName;
		
		private int _EventTypeID;
		
		private EntityRef<TemplateFile> _TemplateFile;
		
		private EntityRef<EventType> _EventType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTemplateDocsIDChanging(int value);
    partial void OnTemplateDocsIDChanged();
    partial void OnTemplateDocNameChanging(string value);
    partial void OnTemplateDocNameChanged();
    partial void OnEventTypeIDChanging(int value);
    partial void OnEventTypeIDChanged();
    #endregion
		
		public TemplateDocument()
		{
			this._TemplateFile = default(EntityRef<TemplateFile>);
			this._EventType = default(EntityRef<EventType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TemplateDocsID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TemplateDocsID
		{
			get
			{
				return this._TemplateDocsID;
			}
			set
			{
				if ((this._TemplateDocsID != value))
				{
					this.OnTemplateDocsIDChanging(value);
					this.SendPropertyChanging();
					this._TemplateDocsID = value;
					this.SendPropertyChanged("TemplateDocsID");
					this.OnTemplateDocsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TemplateDocName", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string TemplateDocName
		{
			get
			{
				return this._TemplateDocName;
			}
			set
			{
				if ((this._TemplateDocName != value))
				{
					this.OnTemplateDocNameChanging(value);
					this.SendPropertyChanging();
					this._TemplateDocName = value;
					this.SendPropertyChanged("TemplateDocName");
					this.OnTemplateDocNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventTypeID", DbType="Int NOT NULL")]
		public int EventTypeID
		{
			get
			{
				return this._EventTypeID;
			}
			set
			{
				if ((this._EventTypeID != value))
				{
					if (this._EventType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventTypeIDChanging(value);
					this.SendPropertyChanging();
					this._EventTypeID = value;
					this.SendPropertyChanged("EventTypeID");
					this.OnEventTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TemplateDocument_TemplateFile", Storage="_TemplateFile", ThisKey="TemplateDocsID", OtherKey="TemplateFileID", IsUnique=true, IsForeignKey=false)]
		public TemplateFile TemplateFile
		{
			get
			{
				return this._TemplateFile.Entity;
			}
			set
			{
				TemplateFile previousValue = this._TemplateFile.Entity;
				if (((previousValue != value) 
							|| (this._TemplateFile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TemplateFile.Entity = null;
						previousValue.TemplateDocument = null;
					}
					this._TemplateFile.Entity = value;
					if ((value != null))
					{
						value.TemplateDocument = this;
					}
					this.SendPropertyChanged("TemplateFile");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EventType_TemplateDocument", Storage="_EventType", ThisKey="EventTypeID", OtherKey="EventTypeID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public EventType EventType
		{
			get
			{
				return this._EventType.Entity;
			}
			set
			{
				EventType previousValue = this._EventType.Entity;
				if (((previousValue != value) 
							|| (this._EventType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EventType.Entity = null;
						previousValue.TemplateDocuments.Remove(this);
					}
					this._EventType.Entity = value;
					if ((value != null))
					{
						value.TemplateDocuments.Add(this);
						this._EventTypeID = value.EventTypeID;
					}
					else
					{
						this._EventTypeID = default(int);
					}
					this.SendPropertyChanged("EventType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TemplateFile")]
	public partial class TemplateFile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TemplateFileID;
		
		private string _FileName;
		
		private string _PhysicalVirtualPath;
		
		private string _PhysicalAbsolutePath;
		
		private string _WebVirtualPath;
		
		private string _WebAbsolutePath;
		
		private string _fileextension;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<System.DateTime> _UpdatedDate;
		
		private string _Author;
		
		private EntityRef<TemplateDocument> _TemplateDocument;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTemplateFileIDChanging(int value);
    partial void OnTemplateFileIDChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnPhysicalVirtualPathChanging(string value);
    partial void OnPhysicalVirtualPathChanged();
    partial void OnPhysicalAbsolutePathChanging(string value);
    partial void OnPhysicalAbsolutePathChanged();
    partial void OnWebVirtualPathChanging(string value);
    partial void OnWebVirtualPathChanged();
    partial void OnWebAbsolutePathChanging(string value);
    partial void OnWebAbsolutePathChanged();
    partial void OnfileextensionChanging(string value);
    partial void OnfileextensionChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnUpdatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedDateChanged();
    partial void OnAuthorChanging(string value);
    partial void OnAuthorChanged();
    #endregion
		
		public TemplateFile()
		{
			this._TemplateDocument = default(EntityRef<TemplateDocument>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TemplateFileID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TemplateFileID
		{
			get
			{
				return this._TemplateFileID;
			}
			set
			{
				if ((this._TemplateFileID != value))
				{
					if (this._TemplateDocument.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTemplateFileIDChanging(value);
					this.SendPropertyChanging();
					this._TemplateFileID = value;
					this.SendPropertyChanged("TemplateFileID");
					this.OnTemplateFileIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileName", DbType="NVarChar(200)")]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhysicalVirtualPath", DbType="NVarChar(400)")]
		public string PhysicalVirtualPath
		{
			get
			{
				return this._PhysicalVirtualPath;
			}
			set
			{
				if ((this._PhysicalVirtualPath != value))
				{
					this.OnPhysicalVirtualPathChanging(value);
					this.SendPropertyChanging();
					this._PhysicalVirtualPath = value;
					this.SendPropertyChanged("PhysicalVirtualPath");
					this.OnPhysicalVirtualPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhysicalAbsolutePath", DbType="NVarChar(500)")]
		public string PhysicalAbsolutePath
		{
			get
			{
				return this._PhysicalAbsolutePath;
			}
			set
			{
				if ((this._PhysicalAbsolutePath != value))
				{
					this.OnPhysicalAbsolutePathChanging(value);
					this.SendPropertyChanging();
					this._PhysicalAbsolutePath = value;
					this.SendPropertyChanged("PhysicalAbsolutePath");
					this.OnPhysicalAbsolutePathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WebVirtualPath", DbType="NVarChar(400)")]
		public string WebVirtualPath
		{
			get
			{
				return this._WebVirtualPath;
			}
			set
			{
				if ((this._WebVirtualPath != value))
				{
					this.OnWebVirtualPathChanging(value);
					this.SendPropertyChanging();
					this._WebVirtualPath = value;
					this.SendPropertyChanged("WebVirtualPath");
					this.OnWebVirtualPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WebAbsolutePath", DbType="NVarChar(500)")]
		public string WebAbsolutePath
		{
			get
			{
				return this._WebAbsolutePath;
			}
			set
			{
				if ((this._WebAbsolutePath != value))
				{
					this.OnWebAbsolutePathChanging(value);
					this.SendPropertyChanging();
					this._WebAbsolutePath = value;
					this.SendPropertyChanged("WebAbsolutePath");
					this.OnWebAbsolutePathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fileextension", DbType="VarChar(50)")]
		public string fileextension
		{
			get
			{
				return this._fileextension;
			}
			set
			{
				if ((this._fileextension != value))
				{
					this.OnfileextensionChanging(value);
					this.SendPropertyChanging();
					this._fileextension = value;
					this.SendPropertyChanged("fileextension");
					this.OnfileextensionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedDate
		{
			get
			{
				return this._UpdatedDate;
			}
			set
			{
				if ((this._UpdatedDate != value))
				{
					this.OnUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._UpdatedDate = value;
					this.SendPropertyChanged("UpdatedDate");
					this.OnUpdatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Author", DbType="NVarChar(100)")]
		public string Author
		{
			get
			{
				return this._Author;
			}
			set
			{
				if ((this._Author != value))
				{
					this.OnAuthorChanging(value);
					this.SendPropertyChanging();
					this._Author = value;
					this.SendPropertyChanged("Author");
					this.OnAuthorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TemplateDocument_TemplateFile", Storage="_TemplateDocument", ThisKey="TemplateFileID", OtherKey="TemplateDocsID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public TemplateDocument TemplateDocument
		{
			get
			{
				return this._TemplateDocument.Entity;
			}
			set
			{
				TemplateDocument previousValue = this._TemplateDocument.Entity;
				if (((previousValue != value) 
							|| (this._TemplateDocument.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TemplateDocument.Entity = null;
						previousValue.TemplateFile = null;
					}
					this._TemplateDocument.Entity = value;
					if ((value != null))
					{
						value.TemplateFile = this;
						this._TemplateFileID = value.TemplateDocsID;
					}
					else
					{
						this._TemplateFileID = default(int);
					}
					this.SendPropertyChanged("TemplateDocument");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TheKey")]
	public partial class TheKey : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _KeyID;
		
		private System.Nullable<int> _ProjectID;
		
		private string _KeyName;
		
		private EntityRef<Project> _Project;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnKeyIDChanging(int value);
    partial void OnKeyIDChanged();
    partial void OnProjectIDChanging(System.Nullable<int> value);
    partial void OnProjectIDChanged();
    partial void OnKeyNameChanging(string value);
    partial void OnKeyNameChanged();
    #endregion
		
		public TheKey()
		{
			this._Project = default(EntityRef<Project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KeyID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int KeyID
		{
			get
			{
				return this._KeyID;
			}
			set
			{
				if ((this._KeyID != value))
				{
					this.OnKeyIDChanging(value);
					this.SendPropertyChanging();
					this._KeyID = value;
					this.SendPropertyChanged("KeyID");
					this.OnKeyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int")]
		public System.Nullable<int> ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KeyName", DbType="NVarChar(100)")]
		public string KeyName
		{
			get
			{
				return this._KeyName;
			}
			set
			{
				if ((this._KeyName != value))
				{
					this.OnKeyNameChanging(value);
					this.SendPropertyChanging();
					this._KeyName = value;
					this.SendPropertyChanged("KeyName");
					this.OnKeyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_TheKey", Storage="_Project", ThisKey="ProjectID", OtherKey="ProjectID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.TheKeys.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.TheKeys.Add(this);
						this._ProjectID = value.ProjectID;
					}
					else
					{
						this._ProjectID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FinArticleCategoryR")]
	public partial class FinArticleCategoryR : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FinArticleCatID;
		
		private int _BudgetID;
		
		private string _FinArticleCatText;
		
		private System.Nullable<decimal> _Price;
		
		private System.Nullable<decimal> _TransferAmt;
		
		private System.Nullable<int> _FinCatID;
		
		private EntitySet<ReportPeriodR> _ReportPeriodRs;
		
		private EntitySet<ReportPeriodR> _ReportPeriodRs1;
		
		private EntityRef<Budget> _Budget;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFinArticleCatIDChanging(int value);
    partial void OnFinArticleCatIDChanged();
    partial void OnBudgetIDChanging(int value);
    partial void OnBudgetIDChanged();
    partial void OnFinArticleCatTextChanging(string value);
    partial void OnFinArticleCatTextChanged();
    partial void OnPriceChanging(System.Nullable<decimal> value);
    partial void OnPriceChanged();
    partial void OnTransferAmtChanging(System.Nullable<decimal> value);
    partial void OnTransferAmtChanged();
    partial void OnFinCatIDChanging(System.Nullable<int> value);
    partial void OnFinCatIDChanged();
    #endregion
		
		public FinArticleCategoryR()
		{
			this._ReportPeriodRs = new EntitySet<ReportPeriodR>(new Action<ReportPeriodR>(this.attach_ReportPeriodRs), new Action<ReportPeriodR>(this.detach_ReportPeriodRs));
			this._ReportPeriodRs1 = new EntitySet<ReportPeriodR>(new Action<ReportPeriodR>(this.attach_ReportPeriodRs1), new Action<ReportPeriodR>(this.detach_ReportPeriodRs1));
			this._Budget = default(EntityRef<Budget>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinArticleCatID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FinArticleCatID
		{
			get
			{
				return this._FinArticleCatID;
			}
			set
			{
				if ((this._FinArticleCatID != value))
				{
					this.OnFinArticleCatIDChanging(value);
					this.SendPropertyChanging();
					this._FinArticleCatID = value;
					this.SendPropertyChanged("FinArticleCatID");
					this.OnFinArticleCatIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BudgetID", DbType="Int NOT NULL")]
		public int BudgetID
		{
			get
			{
				return this._BudgetID;
			}
			set
			{
				if ((this._BudgetID != value))
				{
					if (this._Budget.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBudgetIDChanging(value);
					this.SendPropertyChanging();
					this._BudgetID = value;
					this.SendPropertyChanged("BudgetID");
					this.OnBudgetIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinArticleCatText", DbType="NVarChar(300)")]
		public string FinArticleCatText
		{
			get
			{
				return this._FinArticleCatText;
			}
			set
			{
				if ((this._FinArticleCatText != value))
				{
					this.OnFinArticleCatTextChanging(value);
					this.SendPropertyChanging();
					this._FinArticleCatText = value;
					this.SendPropertyChanged("FinArticleCatText");
					this.OnFinArticleCatTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransferAmt", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> TransferAmt
		{
			get
			{
				return this._TransferAmt;
			}
			set
			{
				if ((this._TransferAmt != value))
				{
					this.OnTransferAmtChanging(value);
					this.SendPropertyChanging();
					this._TransferAmt = value;
					this.SendPropertyChanged("TransferAmt");
					this.OnTransferAmtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinCatID", DbType="Int")]
		public System.Nullable<int> FinCatID
		{
			get
			{
				return this._FinCatID;
			}
			set
			{
				if ((this._FinCatID != value))
				{
					this.OnFinCatIDChanging(value);
					this.SendPropertyChanging();
					this._FinCatID = value;
					this.SendPropertyChanged("FinCatID");
					this.OnFinCatIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FinArticleCategoryR_ReportPeriodR", Storage="_ReportPeriodRs", ThisKey="FinArticleCatID", OtherKey="FinArticleCatID")]
		public EntitySet<ReportPeriodR> ReportPeriodRs
		{
			get
			{
				return this._ReportPeriodRs;
			}
			set
			{
				this._ReportPeriodRs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FinArticleCategoryR_ReportPeriodR1", Storage="_ReportPeriodRs1", ThisKey="FinArticleCatID", OtherKey="FinArticleCatID")]
		public EntitySet<ReportPeriodR> ReportPeriodRs1
		{
			get
			{
				return this._ReportPeriodRs1;
			}
			set
			{
				this._ReportPeriodRs1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Budget_FinArticleCategoryR", Storage="_Budget", ThisKey="BudgetID", OtherKey="BudgetID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Budget Budget
		{
			get
			{
				return this._Budget.Entity;
			}
			set
			{
				Budget previousValue = this._Budget.Entity;
				if (((previousValue != value) 
							|| (this._Budget.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Budget.Entity = null;
						previousValue.FinArticleCategoryRs.Remove(this);
					}
					this._Budget.Entity = value;
					if ((value != null))
					{
						value.FinArticleCategoryRs.Add(this);
						this._BudgetID = value.BudgetID;
					}
					else
					{
						this._BudgetID = default(int);
					}
					this.SendPropertyChanged("Budget");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ReportPeriodRs(ReportPeriodR entity)
		{
			this.SendPropertyChanging();
			entity.FinArticleCategoryR = this;
		}
		
		private void detach_ReportPeriodRs(ReportPeriodR entity)
		{
			this.SendPropertyChanging();
			entity.FinArticleCategoryR = null;
		}
		
		private void attach_ReportPeriodRs1(ReportPeriodR entity)
		{
			this.SendPropertyChanging();
			entity.FinArticleCategoryR1 = this;
		}
		
		private void detach_ReportPeriodRs1(ReportPeriodR entity)
		{
			this.SendPropertyChanging();
			entity.FinArticleCategoryR1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OutComeStatements")]
	public partial class OutComeStatement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProjectID;
		
		private string _OutcomeR;
		
		private string _OutcomeE;
		
		private string _OutcomeK;
		
		private System.Nullable<bool> _sensitive;
		
		private EntityRef<Project> _Project;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProjectIDChanging(int value);
    partial void OnProjectIDChanged();
    partial void OnOutcomeRChanging(string value);
    partial void OnOutcomeRChanged();
    partial void OnOutcomeEChanging(string value);
    partial void OnOutcomeEChanged();
    partial void OnOutcomeKChanging(string value);
    partial void OnOutcomeKChanged();
    partial void OnsensitiveChanging(System.Nullable<bool> value);
    partial void OnsensitiveChanged();
    #endregion
		
		public OutComeStatement()
		{
			this._Project = default(EntityRef<Project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OutcomeR", DbType="NVarChar(4000)")]
		public string OutcomeR
		{
			get
			{
				return this._OutcomeR;
			}
			set
			{
				if ((this._OutcomeR != value))
				{
					this.OnOutcomeRChanging(value);
					this.SendPropertyChanging();
					this._OutcomeR = value;
					this.SendPropertyChanged("OutcomeR");
					this.OnOutcomeRChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OutcomeE", DbType="NVarChar(4000)")]
		public string OutcomeE
		{
			get
			{
				return this._OutcomeE;
			}
			set
			{
				if ((this._OutcomeE != value))
				{
					this.OnOutcomeEChanging(value);
					this.SendPropertyChanging();
					this._OutcomeE = value;
					this.SendPropertyChanged("OutcomeE");
					this.OnOutcomeEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OutcomeK", DbType="NVarChar(4000)")]
		public string OutcomeK
		{
			get
			{
				return this._OutcomeK;
			}
			set
			{
				if ((this._OutcomeK != value))
				{
					this.OnOutcomeKChanging(value);
					this.SendPropertyChanging();
					this._OutcomeK = value;
					this.SendPropertyChanged("OutcomeK");
					this.OnOutcomeKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sensitive", DbType="Bit")]
		public System.Nullable<bool> sensitive
		{
			get
			{
				return this._sensitive;
			}
			set
			{
				if ((this._sensitive != value))
				{
					this.OnsensitiveChanging(value);
					this.SendPropertyChanging();
					this._sensitive = value;
					this.SendPropertyChanged("sensitive");
					this.OnsensitiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_OutComeStatement", Storage="_Project", ThisKey="ProjectID", OtherKey="ProjectID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.OutComeStatement = null;
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.OutComeStatement = this;
						this._ProjectID = value.ProjectID;
					}
					else
					{
						this._ProjectID = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LFIndicator")]
	public partial class LFIndicator : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<int> _LFIndicatorID;
		
		private int _ProjectID;
		
		private System.Nullable<System.DateTime> _SelectedDate;
		
		private EntityRef<Project> _Project;
		
		private EntityRef<LFIndicatorList> _LFIndicatorList;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLFIndicatorIDChanging(System.Nullable<int> value);
    partial void OnLFIndicatorIDChanged();
    partial void OnProjectIDChanging(int value);
    partial void OnProjectIDChanged();
    partial void OnSelectedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnSelectedDateChanged();
    #endregion
		
		public LFIndicator()
		{
			this._Project = default(EntityRef<Project>);
			this._LFIndicatorList = default(EntityRef<LFIndicatorList>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LFIndicatorID", DbType="Int")]
		public System.Nullable<int> LFIndicatorID
		{
			get
			{
				return this._LFIndicatorID;
			}
			set
			{
				if ((this._LFIndicatorID != value))
				{
					if (this._LFIndicatorList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLFIndicatorIDChanging(value);
					this.SendPropertyChanging();
					this._LFIndicatorID = value;
					this.SendPropertyChanged("LFIndicatorID");
					this.OnLFIndicatorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SelectedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> SelectedDate
		{
			get
			{
				return this._SelectedDate;
			}
			set
			{
				if ((this._SelectedDate != value))
				{
					this.OnSelectedDateChanging(value);
					this.SendPropertyChanging();
					this._SelectedDate = value;
					this.SendPropertyChanged("SelectedDate");
					this.OnSelectedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_LFIndicator", Storage="_Project", ThisKey="ProjectID", OtherKey="ProjectID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.LFIndicator = null;
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.LFIndicator = this;
						this._ProjectID = value.ProjectID;
					}
					else
					{
						this._ProjectID = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LFIndicatorList_LFIndicator", Storage="_LFIndicatorList", ThisKey="LFIndicatorID", OtherKey="LFIndicatorID", IsForeignKey=true, DeleteRule="CASCADE")]
		public LFIndicatorList LFIndicatorList
		{
			get
			{
				return this._LFIndicatorList.Entity;
			}
			set
			{
				LFIndicatorList previousValue = this._LFIndicatorList.Entity;
				if (((previousValue != value) 
							|| (this._LFIndicatorList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LFIndicatorList.Entity = null;
						previousValue.LFIndicators.Remove(this);
					}
					this._LFIndicatorList.Entity = value;
					if ((value != null))
					{
						value.LFIndicators.Add(this);
						this._LFIndicatorID = value.LFIndicatorID;
					}
					else
					{
						this._LFIndicatorID = default(Nullable<int>);
					}
					this.SendPropertyChanged("LFIndicatorList");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LFIndicatorList")]
	public partial class LFIndicatorList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LFIndicatorID;
		
		private string _CodeText;
		
		private EntitySet<LFIndicator> _LFIndicators;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLFIndicatorIDChanging(int value);
    partial void OnLFIndicatorIDChanged();
    partial void OnCodeTextChanging(string value);
    partial void OnCodeTextChanged();
    #endregion
		
		public LFIndicatorList()
		{
			this._LFIndicators = new EntitySet<LFIndicator>(new Action<LFIndicator>(this.attach_LFIndicators), new Action<LFIndicator>(this.detach_LFIndicators));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LFIndicatorID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LFIndicatorID
		{
			get
			{
				return this._LFIndicatorID;
			}
			set
			{
				if ((this._LFIndicatorID != value))
				{
					this.OnLFIndicatorIDChanging(value);
					this.SendPropertyChanging();
					this._LFIndicatorID = value;
					this.SendPropertyChanged("LFIndicatorID");
					this.OnLFIndicatorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodeText", DbType="VarChar(50)")]
		public string CodeText
		{
			get
			{
				return this._CodeText;
			}
			set
			{
				if ((this._CodeText != value))
				{
					this.OnCodeTextChanging(value);
					this.SendPropertyChanging();
					this._CodeText = value;
					this.SendPropertyChanged("CodeText");
					this.OnCodeTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LFIndicatorList_LFIndicator", Storage="_LFIndicators", ThisKey="LFIndicatorID", OtherKey="LFIndicatorID")]
		public EntitySet<LFIndicator> LFIndicators
		{
			get
			{
				return this._LFIndicators;
			}
			set
			{
				this._LFIndicators.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LFIndicators(LFIndicator entity)
		{
			this.SendPropertyChanging();
			entity.LFIndicatorList = this;
		}
		
		private void detach_LFIndicators(LFIndicator entity)
		{
			this.SendPropertyChanging();
			entity.LFIndicatorList = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PageAccess")]
	public partial class PageAccess : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Controller;
		
		private string _Action;
		
		private int _RoleId;
		
		private int _AccessID;
		
		private int _ID;
		
		private EntityRef<RolesSSPStaff> _RolesSSPStaff;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnControllerChanging(string value);
    partial void OnControllerChanged();
    partial void OnActionChanging(string value);
    partial void OnActionChanged();
    partial void OnRoleIdChanging(int value);
    partial void OnRoleIdChanged();
    partial void OnAccessIDChanging(int value);
    partial void OnAccessIDChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    #endregion
		
		public PageAccess()
		{
			this._RolesSSPStaff = default(EntityRef<RolesSSPStaff>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Controller", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Controller
		{
			get
			{
				return this._Controller;
			}
			set
			{
				if ((this._Controller != value))
				{
					this.OnControllerChanging(value);
					this.SendPropertyChanging();
					this._Controller = value;
					this.SendPropertyChanged("Controller");
					this.OnControllerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Action", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Action
		{
			get
			{
				return this._Action;
			}
			set
			{
				if ((this._Action != value))
				{
					this.OnActionChanging(value);
					this.SendPropertyChanging();
					this._Action = value;
					this.SendPropertyChanged("Action");
					this.OnActionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="Int NOT NULL")]
		public int RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._RolesSSPStaff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessID", DbType="Int NOT NULL")]
		public int AccessID
		{
			get
			{
				return this._AccessID;
			}
			set
			{
				if ((this._AccessID != value))
				{
					this.OnAccessIDChanging(value);
					this.SendPropertyChanging();
					this._AccessID = value;
					this.SendPropertyChanged("AccessID");
					this.OnAccessIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RolesSSPStaff_PageAccess", Storage="_RolesSSPStaff", ThisKey="RoleId", OtherKey="RoleID", IsForeignKey=true)]
		public RolesSSPStaff RolesSSPStaff
		{
			get
			{
				return this._RolesSSPStaff.Entity;
			}
			set
			{
				RolesSSPStaff previousValue = this._RolesSSPStaff.Entity;
				if (((previousValue != value) 
							|| (this._RolesSSPStaff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RolesSSPStaff.Entity = null;
						previousValue.PageAccesses.Remove(this);
					}
					this._RolesSSPStaff.Entity = value;
					if ((value != null))
					{
						value.PageAccesses.Add(this);
						this._RoleId = value.RoleID;
					}
					else
					{
						this._RoleId = default(int);
					}
					this.SendPropertyChanged("RolesSSPStaff");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Contact")]
	public partial class Contact : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ContactID;
		
		private System.Nullable<int> _OrgID;
		
		private string _Prefix;
		
		private string _FirstName;
		
		private string _MiddleName;
		
		private string _LastName;
		
		private string _Title;
		
		private string _EmailAddress;
		
		private string _OfficePhone;
		
		private string _HomePhone;
		
		private string _CellPhone;
		
		private string _FaxNumber;
		
		private string _City;
		
		private string _County;
		
		private string _Address;
		
		private string _CurrentOne;
		
		private EntityRef<Organization> _Organization;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContactIDChanging(int value);
    partial void OnContactIDChanged();
    partial void OnOrgIDChanging(System.Nullable<int> value);
    partial void OnOrgIDChanged();
    partial void OnPrefixChanging(string value);
    partial void OnPrefixChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnMiddleNameChanging(string value);
    partial void OnMiddleNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnEmailAddressChanging(string value);
    partial void OnEmailAddressChanged();
    partial void OnOfficePhoneChanging(string value);
    partial void OnOfficePhoneChanged();
    partial void OnHomePhoneChanging(string value);
    partial void OnHomePhoneChanged();
    partial void OnCellPhoneChanging(string value);
    partial void OnCellPhoneChanged();
    partial void OnFaxNumberChanging(string value);
    partial void OnFaxNumberChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnCountyChanging(string value);
    partial void OnCountyChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnCurrentOneChanging(string value);
    partial void OnCurrentOneChanged();
    #endregion
		
		public Contact()
		{
			this._Organization = default(EntityRef<Organization>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ContactID
		{
			get
			{
				return this._ContactID;
			}
			set
			{
				if ((this._ContactID != value))
				{
					this.OnContactIDChanging(value);
					this.SendPropertyChanging();
					this._ContactID = value;
					this.SendPropertyChanged("ContactID");
					this.OnContactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrgID", DbType="Int")]
		public System.Nullable<int> OrgID
		{
			get
			{
				return this._OrgID;
			}
			set
			{
				if ((this._OrgID != value))
				{
					if (this._Organization.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrgIDChanging(value);
					this.SendPropertyChanging();
					this._OrgID = value;
					this.SendPropertyChanged("OrgID");
					this.OnOrgIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Prefix", DbType="NVarChar(100)")]
		public string Prefix
		{
			get
			{
				return this._Prefix;
			}
			set
			{
				if ((this._Prefix != value))
				{
					this.OnPrefixChanging(value);
					this.SendPropertyChanging();
					this._Prefix = value;
					this.SendPropertyChanged("Prefix");
					this.OnPrefixChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(100)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MiddleName", DbType="NVarChar(100)")]
		public string MiddleName
		{
			get
			{
				return this._MiddleName;
			}
			set
			{
				if ((this._MiddleName != value))
				{
					this.OnMiddleNameChanging(value);
					this.SendPropertyChanging();
					this._MiddleName = value;
					this.SendPropertyChanged("MiddleName");
					this.OnMiddleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(100)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(100)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailAddress", DbType="VarChar(50)")]
		public string EmailAddress
		{
			get
			{
				return this._EmailAddress;
			}
			set
			{
				if ((this._EmailAddress != value))
				{
					this.OnEmailAddressChanging(value);
					this.SendPropertyChanging();
					this._EmailAddress = value;
					this.SendPropertyChanged("EmailAddress");
					this.OnEmailAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OfficePhone", DbType="VarChar(50)")]
		public string OfficePhone
		{
			get
			{
				return this._OfficePhone;
			}
			set
			{
				if ((this._OfficePhone != value))
				{
					this.OnOfficePhoneChanging(value);
					this.SendPropertyChanging();
					this._OfficePhone = value;
					this.SendPropertyChanged("OfficePhone");
					this.OnOfficePhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HomePhone", DbType="VarChar(50)")]
		public string HomePhone
		{
			get
			{
				return this._HomePhone;
			}
			set
			{
				if ((this._HomePhone != value))
				{
					this.OnHomePhoneChanging(value);
					this.SendPropertyChanging();
					this._HomePhone = value;
					this.SendPropertyChanged("HomePhone");
					this.OnHomePhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CellPhone", DbType="VarChar(50)")]
		public string CellPhone
		{
			get
			{
				return this._CellPhone;
			}
			set
			{
				if ((this._CellPhone != value))
				{
					this.OnCellPhoneChanging(value);
					this.SendPropertyChanging();
					this._CellPhone = value;
					this.SendPropertyChanged("CellPhone");
					this.OnCellPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FaxNumber", DbType="VarChar(50)")]
		public string FaxNumber
		{
			get
			{
				return this._FaxNumber;
			}
			set
			{
				if ((this._FaxNumber != value))
				{
					this.OnFaxNumberChanging(value);
					this.SendPropertyChanging();
					this._FaxNumber = value;
					this.SendPropertyChanged("FaxNumber");
					this.OnFaxNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="NVarChar(100)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_County", DbType="NVarChar(100)")]
		public string County
		{
			get
			{
				return this._County;
			}
			set
			{
				if ((this._County != value))
				{
					this.OnCountyChanging(value);
					this.SendPropertyChanging();
					this._County = value;
					this.SendPropertyChanged("County");
					this.OnCountyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(100)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentOne", DbType="NVarChar(100)")]
		public string CurrentOne
		{
			get
			{
				return this._CurrentOne;
			}
			set
			{
				if ((this._CurrentOne != value))
				{
					this.OnCurrentOneChanging(value);
					this.SendPropertyChanging();
					this._CurrentOne = value;
					this.SendPropertyChanged("CurrentOne");
					this.OnCurrentOneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_Contact", Storage="_Organization", ThisKey="OrgID", OtherKey="OrgID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Organization Organization
		{
			get
			{
				return this._Organization.Entity;
			}
			set
			{
				Organization previousValue = this._Organization.Entity;
				if (((previousValue != value) 
							|| (this._Organization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organization.Entity = null;
						previousValue.Contacts.Remove(this);
					}
					this._Organization.Entity = value;
					if ((value != null))
					{
						value.Contacts.Add(this);
						this._OrgID = value.OrgID;
					}
					else
					{
						this._OrgID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Organization");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.IndicatorLabel")]
	public partial class IndicatorLabel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IndicatorLabelID;
		
		private int _GrantTypeCodeID;
		
		private string _Text;
		
		private System.Nullable<int> _LabelContentCategory;
		
		private System.Nullable<int> _LabelOrder;
		
		private System.Nullable<int> _LabelType;
		
		private EntitySet<IndicatorItem> _IndicatorItems;
		
		private EntitySet<IndicatorTemplateItem> _IndicatorTemplateItems;
		
		private EntityRef<GrantTypeList> _GrantTypeList;
		
		private EntityRef<IndicatorLabelContentCategory> _IndicatorLabelContentCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIndicatorLabelIDChanging(int value);
    partial void OnIndicatorLabelIDChanged();
    partial void OnGrantTypeCodeIDChanging(int value);
    partial void OnGrantTypeCodeIDChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnLabelContentCategoryChanging(System.Nullable<int> value);
    partial void OnLabelContentCategoryChanged();
    partial void OnLabelOrderChanging(System.Nullable<int> value);
    partial void OnLabelOrderChanged();
    partial void OnLabelTypeChanging(System.Nullable<int> value);
    partial void OnLabelTypeChanged();
    #endregion
		
		public IndicatorLabel()
		{
			this._IndicatorItems = new EntitySet<IndicatorItem>(new Action<IndicatorItem>(this.attach_IndicatorItems), new Action<IndicatorItem>(this.detach_IndicatorItems));
			this._IndicatorTemplateItems = new EntitySet<IndicatorTemplateItem>(new Action<IndicatorTemplateItem>(this.attach_IndicatorTemplateItems), new Action<IndicatorTemplateItem>(this.detach_IndicatorTemplateItems));
			this._GrantTypeList = default(EntityRef<GrantTypeList>);
			this._IndicatorLabelContentCategory = default(EntityRef<IndicatorLabelContentCategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IndicatorLabelID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IndicatorLabelID
		{
			get
			{
				return this._IndicatorLabelID;
			}
			set
			{
				if ((this._IndicatorLabelID != value))
				{
					this.OnIndicatorLabelIDChanging(value);
					this.SendPropertyChanging();
					this._IndicatorLabelID = value;
					this.SendPropertyChanged("IndicatorLabelID");
					this.OnIndicatorLabelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GrantTypeCodeID", DbType="Int NOT NULL")]
		public int GrantTypeCodeID
		{
			get
			{
				return this._GrantTypeCodeID;
			}
			set
			{
				if ((this._GrantTypeCodeID != value))
				{
					if (this._GrantTypeList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGrantTypeCodeIDChanging(value);
					this.SendPropertyChanging();
					this._GrantTypeCodeID = value;
					this.SendPropertyChanged("GrantTypeCodeID");
					this.OnGrantTypeCodeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(200)")]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LabelContentCategory", DbType="Int")]
		public System.Nullable<int> LabelContentCategory
		{
			get
			{
				return this._LabelContentCategory;
			}
			set
			{
				if ((this._LabelContentCategory != value))
				{
					if (this._IndicatorLabelContentCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLabelContentCategoryChanging(value);
					this.SendPropertyChanging();
					this._LabelContentCategory = value;
					this.SendPropertyChanged("LabelContentCategory");
					this.OnLabelContentCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LabelOrder", DbType="Int")]
		public System.Nullable<int> LabelOrder
		{
			get
			{
				return this._LabelOrder;
			}
			set
			{
				if ((this._LabelOrder != value))
				{
					this.OnLabelOrderChanging(value);
					this.SendPropertyChanging();
					this._LabelOrder = value;
					this.SendPropertyChanged("LabelOrder");
					this.OnLabelOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LabelType", DbType="Int")]
		public System.Nullable<int> LabelType
		{
			get
			{
				return this._LabelType;
			}
			set
			{
				if ((this._LabelType != value))
				{
					this.OnLabelTypeChanging(value);
					this.SendPropertyChanging();
					this._LabelType = value;
					this.SendPropertyChanged("LabelType");
					this.OnLabelTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IndicatorLabel_IndicatorItem", Storage="_IndicatorItems", ThisKey="IndicatorLabelID", OtherKey="IndicatorLabelID")]
		public EntitySet<IndicatorItem> IndicatorItems
		{
			get
			{
				return this._IndicatorItems;
			}
			set
			{
				this._IndicatorItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IndicatorLabel_IndicatorTemplateItem", Storage="_IndicatorTemplateItems", ThisKey="IndicatorLabelID", OtherKey="IndicatorLabelID")]
		public EntitySet<IndicatorTemplateItem> IndicatorTemplateItems
		{
			get
			{
				return this._IndicatorTemplateItems;
			}
			set
			{
				this._IndicatorTemplateItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GrantTypeList_IndicatorLabel", Storage="_GrantTypeList", ThisKey="GrantTypeCodeID", OtherKey="GrantTypeCodeID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public GrantTypeList GrantTypeList
		{
			get
			{
				return this._GrantTypeList.Entity;
			}
			set
			{
				GrantTypeList previousValue = this._GrantTypeList.Entity;
				if (((previousValue != value) 
							|| (this._GrantTypeList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GrantTypeList.Entity = null;
						previousValue.IndicatorLabels.Remove(this);
					}
					this._GrantTypeList.Entity = value;
					if ((value != null))
					{
						value.IndicatorLabels.Add(this);
						this._GrantTypeCodeID = value.GrantTypeCodeID;
					}
					else
					{
						this._GrantTypeCodeID = default(int);
					}
					this.SendPropertyChanged("GrantTypeList");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IndicatorLabelContentCategory_IndicatorLabel", Storage="_IndicatorLabelContentCategory", ThisKey="LabelContentCategory", OtherKey="ID", IsForeignKey=true)]
		public IndicatorLabelContentCategory IndicatorLabelContentCategory
		{
			get
			{
				return this._IndicatorLabelContentCategory.Entity;
			}
			set
			{
				IndicatorLabelContentCategory previousValue = this._IndicatorLabelContentCategory.Entity;
				if (((previousValue != value) 
							|| (this._IndicatorLabelContentCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IndicatorLabelContentCategory.Entity = null;
						previousValue.IndicatorLabels.Remove(this);
					}
					this._IndicatorLabelContentCategory.Entity = value;
					if ((value != null))
					{
						value.IndicatorLabels.Add(this);
						this._LabelContentCategory = value.ID;
					}
					else
					{
						this._LabelContentCategory = default(Nullable<int>);
					}
					this.SendPropertyChanged("IndicatorLabelContentCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_IndicatorItems(IndicatorItem entity)
		{
			this.SendPropertyChanging();
			entity.IndicatorLabel = this;
		}
		
		private void detach_IndicatorItems(IndicatorItem entity)
		{
			this.SendPropertyChanging();
			entity.IndicatorLabel = null;
		}
		
		private void attach_IndicatorTemplateItems(IndicatorTemplateItem entity)
		{
			this.SendPropertyChanging();
			entity.IndicatorLabel = this;
		}
		
		private void detach_IndicatorTemplateItems(IndicatorTemplateItem entity)
		{
			this.SendPropertyChanging();
			entity.IndicatorLabel = null;
		}
	}
}
#pragma warning restore 1591
